[
  {
    "question": "What is the output of the following code if spam.py  is run? import ham import eggs E. spam ham eggs Correct Answer: B Section: (none) import ham                 #2 go to ham.py import eggs                #3 go to eggs.py ",
    "code": "# spam.py\nprint(\"spam\", end=' ')\n# ham.py\nprint(\"ham\", end=' ')\n# eggs.py\nprint(\"eggs\", end=' ')\n# spam.py\nprint(\"spam\", end=' ')   #1 print spam\n# ham.py\nprint(\"ham\", end=' ')     #5 print ham\n# eggs.py\nprint(\"eggs\", end=' ')     #4 print eggs\n",
    "answers": [
      {
        "text": "A. Syntax Error",
        "correct": false
      },
      {
        "text": "B. spam eggs ham",
        "correct": false
      },
      {
        "text": "C. spam ham",
        "correct": false
      },
      {
        "text": "D. eggs ham spam",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "How do you call the function ham() saved as spam.py  below? ham() ham() spam.ham() ham() E. import ham from spam ham() Correct Answer: CD Section: (none) ",
    "code": "def ham():\nprint(\"Hello World\")\n",
    "answers": [
      {
        "text": "A. import spam",
        "correct": false
      },
      {
        "text": "B. import spam.ham",
        "correct": false
      },
      {
        "text": "C. import spam",
        "correct": false
      },
      {
        "text": "D. from spam import ham",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference: https://docs.python.org/3/tutorial/modules.html"
  },
  {
    "question": "Given the following package layout package/ subpackage1/ __init__.py moduleX.py moduleY.py subpackage2/ moduleZ.py moduleA.py Select all option(s) containing valid relative impo rts called from __init__.py E. from ..moduleA import foo Correct Answer: ABCDE Section: (none) https://docs.python.org/3/reference/import.html#pac kage-relative-imports https://realpython.com/absolute-vs-relative-python- imports/#relative-imports ",
    "code": "",
    "answers": [
      {
        "text": "A. from .moduleY import spam",
        "correct": false
      },
      {
        "text": "B. from .moduleY import spam as ham",
        "correct": false
      },
      {
        "text": "C. from ..subpackage1 import moduleY",
        "correct": false
      },
      {
        "text": "D. from ..subpackage2.moduleZ import eggs",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "How will you shorten the function call to spam() de fined inside packageA.subpackageB.subpackageC.moduleD? E. from packageA.subpackageB.subpackageC.moduleD imp ort spam F. from packageA.subpackageB.subpackageC.moduleD imp ort spam as s G. from packageA.subpackageB.subpackageC.moduleD imp ort spam alias s Correct Answer: BDEF Section: (none) https://docs.python.org/3/tutorial/modules.html#mor e-on-modules import packageA.subpackageB.subpackageC.moduleD is valid but it will not shorten the function call. alias is not part of the syntax for import. ",
    "code": "",
    "answers": [
      {
        "text": "A. import packageA.subpackageB.subpackageC.moduleD",
        "correct": false
      },
      {
        "text": "B. import packageA.subpackageB.subpackageC.moduleD a s p",
        "correct": false
      },
      {
        "text": "C. import packageA.subpackageB.subpackageC.moduleD a lias p",
        "correct": false
      },
      {
        "text": "D. from packageA.subpackageB.subpackageC.moduleD imp ort *",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all valid parameters to function dir() Correct Answer: ABCD Section: (none) https://docs.python.org/3/library/functions.html#di r ",
    "code": "",
    "answers": [
      {
        "text": "A. No parameter",
        "correct": false
      },
      {
        "text": "B. Object",
        "correct": false
      },
      {
        "text": "C. 0D. None",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all valid option(s) about the result of dir( ) E. A list of names of the base class attributes Correct Answer: BCDE Section: (none) https://docs.python.org/3/library/functions.html?#d ir ",
    "code": "",
    "answers": [
      {
        "text": "A. A list of filenames inside the directory",
        "correct": false
      },
      {
        "text": "B. A list of the module's attribute",
        "correct": false
      },
      {
        "text": "C. A list of names of class attributes",
        "correct": false
      },
      {
        "text": "D. A list of names of object attributes",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all valid option(s) about sys.path Correct Answer: CD Section: (none) https://docs.python.org/3/library/sys.html#sys.path ",
    "code": "",
    "answers": [
      {
        "text": "A. sys.path is a string that specifies the path wher e Python is installed",
        "correct": false
      },
      {
        "text": "B. sys.path is a string that specifies the path of t he compiled Python bytecode",
        "correct": false
      },
      {
        "text": "C. sys.path is a list of strings that specifies the search path for modules",
        "correct": false
      },
      {
        "text": "D. A program is free to modify sys.path for its own purpose.",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> math.ceil(-1.1) Correct Answer: A Section: (none) https://docs.python.org/3/library/math.html#math.ce il e.g. math.ceil(-1.1) is -1 because -1 > -1.1 and no t -2 because -2 < -1.1. ",
    "code": "",
    "answers": [
      {
        "text": "A. -1",
        "correct": false
      },
      {
        "text": "B. -1.0",
        "correct": false
      },
      {
        "text": "C. -2",
        "correct": false
      },
      {
        "text": "D. -2.0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": ">>> math.floor(-1.1) Correct Answer: C Section: (none) https://docs.python.org/3/library/math.html#math.fl oor e.g. math.floor(-1.1) is -2 because -2 < -1.1 and n ot -1 because -1 > -1.1 ",
    "code": "",
    "answers": [
      {
        "text": "A. -1",
        "correct": false
      },
      {
        "text": "B. -1.0",
        "correct": false
      },
      {
        "text": "C. -2",
        "correct": false
      },
      {
        "text": "D. -2.0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> math.trunc(-1.1) Correct Answer: A Section: (none) https://docs.python.org/3/library/math.html#math.tr unc ",
    "code": "",
    "answers": [
      {
        "text": "A. -1",
        "correct": false
      },
      {
        "text": "B. -1.0",
        "correct": false
      },
      {
        "text": "C. -2",
        "correct": false
      },
      {
        "text": "D. -2.0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> math.factorial(3.0)) Correct Answer: C Section: (none) https://docs.python.org/3/library/math.html#math.fa ctorial ",
    "code": "",
    "answers": [
      {
        "text": "A. 6",
        "correct": false
      },
      {
        "text": "B. 6.0",
        "correct": false
      },
      {
        "text": "C. TypeError: 'float' object cannot be interpreted a s an integer",
        "correct": false
      },
      {
        "text": "D. TypeError: factorial() takes 2 arguments",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> math.factorial(-3) Correct Answer: D Section: (none) https://docs.python.org/3/library/math.html#math.fa ctorial ",
    "code": "",
    "answers": [
      {
        "text": "A. -6",
        "correct": false
      },
      {
        "text": "B. -6.0",
        "correct": false
      },
      {
        "text": "C. TypeError: type float doesn't define __factorial__ method D. ValueError: factorial() not defined for negative va lues",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> math.hypot(2) Correct Answer: B Section: (none) https://docs.python.org/3/library/math.html#math.hy pot e.g. math.sqrt(sum([2**2])) == 2.0 ",
    "code": "",
    "answers": [
      {
        "text": "A. 3.6055512754639896",
        "correct": false
      },
      {
        "text": "B. 2.0",
        "correct": false
      },
      {
        "text": "C. TypeError: type int doesn't define __hypot__ meth od",
        "correct": false
      },
      {
        "text": "D. TypeError: hypot() takes 2 arguments",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> math.sqrt(1) Correct Answer: C Section: (none) https://docs.python.org/3/library/math.html#math.sq rt >>> import math >>> type(math.sqrt(1)) <class 'float'> ",
    "code": "",
    "answers": [
      {
        "text": "A. 0.5",
        "correct": false
      },
      {
        "text": "B. 1",
        "correct": false
      },
      {
        "text": "C. 1.0",
        "correct": false
      },
      {
        "text": "D. TypeError: type int doesn't define __sqrt__ metho d",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all option(s) which returns a random floatin g number between 0 and 1? Correct Answer: C Section: (none) https://docs.python.org/3/library/random.html#rando m.random ",
    "code": "",
    "answers": [
      {
        "text": "A. math.random()",
        "correct": false
      },
      {
        "text": "B. math.random(1.0)",
        "correct": false
      },
      {
        "text": "C. random.random()",
        "correct": false
      },
      {
        "text": "D. random.random(1.0)",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "Select all option(s) which returns a random number between 0 and 100? Correct Answer: C Section: (none) https://docs.python.org/3/library/random.html#rando m.random e.g. random.random()*(100-0)+0 == random number between 0 and 100 random.random()*(95-5)+5 == random number between 5  and 95 ",
    "code": "",
    "answers": [
      {
        "text": "A. random.random(100)",
        "correct": false
      },
      {
        "text": "B. random.random(0, 100)",
        "correct": false
      },
      {
        "text": "C. random.random()*100",
        "correct": false
      },
      {
        "text": "D. random.random(100.0)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What can be the possible output of the following co de? random.seed(10, 2) Correct Answer: B Section: (none) https://docs.python.org/3/library/random.html#rando m.seed ",
    "code": "print(random.random())\n",
    "answers": [
      {
        "text": "A. 3.6055512754639896",
        "correct": false
      },
      {
        "text": "B. 0.5714025946899135",
        "correct": false
      },
      {
        "text": "C. AttributeError: module 'random' has no attribute 'seed'",
        "correct": false
      },
      {
        "text": "D. TypeError: seed() takes 1 argument",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all option(s) to properly call the choice() and/or choices() function? E. random.choices([\"spam\", \"ham\", \"eggs\"], weights =  [10, 1, 1], k = 14) Correct Answer: BDE Section: (none) https://docs.python.org/3/library/random.html#rando m.choice ",
    "code": "",
    "answers": [
      {
        "text": "A. random.choice(\"spam\", \"ham\", \"eggs\")",
        "correct": false
      },
      {
        "text": "B. random.choice([\"spam\", \"ham\", \"eggs\"])",
        "correct": false
      },
      {
        "text": "C. random.choice({\"spam\", \"ham\", \"eggs\"})",
        "correct": false
      },
      {
        "text": "D. random.choices([\"spam\", \"ham\", \"eggs\"])",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What can be the possible output of the following co de? >>> random.sample([\"spam\", \"ham\", \"eggs\"], k = 1) Correct Answer: B Section: (none) https://docs.python.org/3/library/random.html#rando m.sample >>> import random >>> type(random.sample([\"spam\", \"ham\", \"eggs\"], k =  1)) <class 'list'> ",
    "code": "",
    "answers": [
      {
        "text": "A. spam",
        "correct": false
      },
      {
        "text": "B. ['spam']",
        "correct": false
      },
      {
        "text": "C. TypeError: sample() got an unexpected keyword arg ument 'k'",
        "correct": false
      },
      {
        "text": "D. TypeError: sample() takes 1 argument",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all option(s) to properly call the platform( ) function? E. platform.platform(aliased=0, terse=0) Correct Answer: BE Section: (none) https://docs.python.org/3/library/platform.html#pla tform.platform ",
    "code": "",
    "answers": [
      {
        "text": "A. system.platform()",
        "correct": false
      },
      {
        "text": "B. platform.platform()",
        "correct": false
      },
      {
        "text": "C. system.platform(aliased=0, terse=0)",
        "correct": false
      },
      {
        "text": "D. platform.platform(alias=0, version=0)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all option(s) to properly call the machine()  function? E. platform.machine (None) Correct Answer: B Section: (none) https://docs.python.org/3/library/platform.html#pla tform.machine ",
    "code": "",
    "answers": [
      {
        "text": "A. system.machine()",
        "correct": false
      },
      {
        "text": "B. platform.machine()",
        "correct": false
      },
      {
        "text": "C. system.machine(aliased=0)",
        "correct": false
      },
      {
        "text": "D. platform.machine (terse=0)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all option(s) to properly call the processor () function? E. platform.platform(None) Correct Answer: B Section: (none) https://docs.python.org/3/library/platform.html#pla tform.processor ",
    "code": "",
    "answers": [
      {
        "text": "A. system.processor()",
        "correct": false
      },
      {
        "text": "B. platform.processor()",
        "correct": false
      },
      {
        "text": "C. system.processor(aliased=0)",
        "correct": false
      },
      {
        "text": "D. platform.processor(terse=0)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all option(s) to properly call the system() function? E. platform.system(None) Correct Answer: B Section: (none) https://docs.python.org/3/library/platform.html#pla tform.system ",
    "code": "",
    "answers": [
      {
        "text": "A. system.system()",
        "correct": false
      },
      {
        "text": "B. platform.system()",
        "correct": false
      },
      {
        "text": "C. system.system(aliased=0)",
        "correct": false
      },
      {
        "text": "D. platform.system(terse=0)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all valid option(s) about system() function Correct Answer: AC Section: (none) https://docs.python.org/3/library/platform.html#pla tform.system ",
    "code": "",
    "answers": [
      {
        "text": "A. system() returns the OS hosting Python",
        "correct": false
      },
      {
        "text": "B. system() returns the execution environment of Pyt hon",
        "correct": false
      },
      {
        "text": "C. Possible return values are Linux, Darwin, Java, W indows or an empty string if it can't be determined .",
        "correct": false
      },
      {
        "text": "D. Possible return values are CPython, IronPython, J ython, PyPy",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all option(s) to properly call the version()  function? E. platform.version(None) Correct Answer: B Section: (none) https://docs.python.org/3/library/platform.html#pla tform.version ",
    "code": "",
    "answers": [
      {
        "text": "A. system.version()",
        "correct": false
      },
      {
        "text": "B. platform.version()",
        "correct": false
      },
      {
        "text": "C. system.version(aliased=0)",
        "correct": false
      },
      {
        "text": "D. platform.version(terse=0)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the datatype of the return value of the fun ction platform.version()? Correct Answer: C Section: (none) https://docs.python.org/3/library/platform.html#pla tform.version >>> from platform import version >>> type(version()) <class 'str'> ",
    "code": "",
    "answers": [
      {
        "text": "A. int",
        "correct": false
      },
      {
        "text": "B. float C. str",
        "correct": false
      },
      {
        "text": "D. array",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all option(s) to properly call the python_im plementation() function? E. platform.python_implementation(None) Correct Answer: B Section: (none) https://docs.python.org/3/library/platform.html#pla tform.python_implementation ",
    "code": "",
    "answers": [
      {
        "text": "A. system.python_implementation()",
        "correct": false
      },
      {
        "text": "B. platform.python_implementation()",
        "correct": false
      },
      {
        "text": "C. system.python_implementation(aliased=0)",
        "correct": false
      },
      {
        "text": "D. platform.python_implementation(terse=0)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all option(s) about the python_implementatio n() that is TRUE? Correct Answer: BD Section: (none) https://docs.python.org/3/library/platform.html#pla tform.python_implementation ",
    "code": "",
    "answers": [
      {
        "text": "A. python_implementation() returns the OS hosting Py thon",
        "correct": false
      },
      {
        "text": "B. python_implementation() returns the execution env ironment of Python",
        "correct": false
      },
      {
        "text": "C. Possible return values are Linux, Darwin, Java, W indows or an empty string if it can't be determined .",
        "correct": false
      },
      {
        "text": "D. Possible return values are CPython, IronPython, J ython, PyPy.",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all option(s) to properly call the python_ve rsion_tuple() function? E. platform.python_version_tuple(None) Correct Answer: B Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. system.python_version_tuple()",
        "correct": false
      },
      {
        "text": "B. platform.python_version_tuple()",
        "correct": false
      },
      {
        "text": "C. system.python_version_tuple(aliased=0)",
        "correct": false
      },
      {
        "text": "D. platform.python_version_tuple(terse=0)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference: https://docs.python.org/3/library/platform.html#pla tform.python_version_tuple"
  },
  {
    "question": "Which of the statements below is valid? E. Compiled Python files is stored inside the __cach e__ folder Correct Answer: BD Section: (none) Python caches the compiled version of each module i n the __pycache__  directory under the name module. version .pyc . ",
    "code": "",
    "answers": [
      {
        "text": "A. Python is interpreted therefore it never compiles  the py files.",
        "correct": false
      },
      {
        "text": "B. Python is interpreted however it compiles the py file into pyc file",
        "correct": false
      },
      {
        "text": "C. Compiled Python files is stored inside the __pyc_ _ folder",
        "correct": false
      },
      {
        "text": "D. Compiled Python files is stored inside the __pyca che__ folder",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "The extension of a compiled bytecode of the Python source file is Correct Answer: B Section: (none) Python caches the compiled version of each module i n the __pycache__  directory under the name module. version .pyc . ",
    "code": "",
    "answers": [
      {
        "text": "A. .py",
        "correct": false
      },
      {
        "text": "B. .pyc",
        "correct": false
      },
      {
        "text": "C. .__pycache__",
        "correct": false
      },
      {
        "text": "D. Python is an interpreted language hence it does n ot compile the source file",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all valid option(s) about __name__ E. If the file is imported from another module, __na me__ will be set with the module's name. Correct Answer: BDE Section: (none) https://docs.python.org/3/reference/import.html#__n ame__ ",
    "code": "",
    "answers": [
      {
        "text": "A. The __name__ is a built-in constant and can't be modified",
        "correct": false
      },
      {
        "text": "B. The __name__ is a built-in variable and can be mo dified",
        "correct": false
      },
      {
        "text": "C. The __name__ by default is None and must be set",
        "correct": false
      },
      {
        "text": "D. If the source is the main program, the interprete r sets __name__ to \"__main__\"",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "How should you write the variable spam to inform a module user that it should not be accessed directly ? Section: (none) https://docs.python.org/3/tutorial/classes.html#pri vate-variables ",
    "code": "",
    "answers": [
      {
        "text": "A. spam since all variables in modules are considere d private",
        "correct": false
      },
      {
        "text": "B. _spam",
        "correct": false
      },
      {
        "text": "C. __spam",
        "correct": false
      },
      {
        "text": "D. SPAM Correct Answer: BC",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all valid option(s) about __init__.py Correct Answer: AC Section: (none) https://docs.python.org/3/reference/import.html#reg ular-packages ",
    "code": "",
    "answers": [
      {
        "text": "A. __init__.py is contained in regular packages",
        "correct": false
      },
      {
        "text": "B. __init__.py is contained in namespace packages",
        "correct": false
      },
      {
        "text": "C. __init__.py is automatically executed when the regu lar package is imported.",
        "correct": false
      },
      {
        "text": "D. __init__.py is automatically executed when the name space package is imported",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What directories are searched by the interpreter fo r spam.py given the code below? import spam E. Python installation-dependent directories configu red during installation F. List of directories in sys.path Correct Answer: ABDEF Section: (none) When a module named spam is imported, the interpret er first searches for a built-in module with that name. If not found, it then searches for a file nam ed spam.py in a list of directories given by the va riable sys.path. sys.path is initialized from these locati ons: \u25cf The directory containing the input script (or the current directory when no file is specified). \u25cf PYTHONPATH (a list of directory names, with the sa me syntax as the shell variable PATH). \u25cf The installation-dependent default. ",
    "code": "print(spam.ham)\nprint(spam.eggs)\n",
    "answers": [
      {
        "text": "A. Directory where spam.py was run",
        "correct": false
      },
      {
        "text": "B. Current directory if the interpreter is run inter actively",
        "correct": false
      },
      {
        "text": "C. List of directories contained in PATH environment  variable",
        "correct": false
      },
      {
        "text": "D. List of directories contained in PYTHONPATH envir onment variable",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? try: abcd efgh except: pass Correct Answer: A Section: (none) try: abcd    #1 raises NameError efgh except:   #2 execute next line pass    #3 do nothing ",
    "code": "",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "C. NameError: name 'UndefinedException' is not definedD. Add () on Line 2 and 3 to fix the syntax error",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? try: raise OSError finally: pass Correct Answer: B Section: (none) ",
    "code": "https://docs.python.org/3/tutorial/errors.html?#def ining-clean-up-actions\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. OSError",
        "correct": false
      },
      {
        "text": "C. NameError: name 'OSError' is not defined",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? try: raise ValueError except TypeError, ValueError: raise Correct Answer: D Section: (none) The correct code specifies a tuple of exceptions. e.g. ... except (TypeError, ValueError): \u2026 ",
    "code": "",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. TypeError",
        "correct": false
      },
      {
        "text": "C. ValueError",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What will happen if spam.py is run? # spam.py try: except: Correct Answer: C Section: (none) try: except:                                        #2 e xecute next line ",
    "code": "print(x)\nprint(\"An exception occurred\")\nA. the script will run but will not print anything\nB. None  will be printed\nC. An exception occurred  will printed\nprint(x)                                     #1  raise NameError: name 'x' is not defined go to exc ept:\nprint(\"An exception occurred\")   #3 prints An exception occurred\n",
    "answers": [
      {
        "text": "D. Compile time error",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? x = 1/0 try: this_fails() except ZeroDivisionError: pass Correct Answer: A Section: (none) https://docs.python.org/3/tutorial/errors.html#hand ling-exceptions ",
    "code": "def this_fails():\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "C. ZeroDivisionError: division by zero",
        "correct": false
      },
      {
        "text": "D. NameError: name 'ZeroDivisionError' is not define d",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "try: <<< INSERT CODE HERE >>> except ZeroDivisionError: except TypeError: else: E. pass F. replace <<< INSERT CODE HERE >>> with blank Correct Answer: E Section: (none) in error because the try: block is not optional. ",
    "code": "Which option(s) will print ELSE given the following  code?\nprint('ZeroDivisionError')\nprint('TypeError')\nprint('ELSE')\nELSE will only be printed if raise is not called. R eplacing <<< INSERT CODE HERE >>> with blank result s\n",
    "answers": [
      {
        "text": "A. raise Exception",
        "correct": false
      },
      {
        "text": "B. raise ZeroDivisionError",
        "correct": false
      },
      {
        "text": "C. raise TypeError",
        "correct": false
      },
      {
        "text": "D. raise",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? try: raise Exception except BaseException: else: finally: E. 145 Correct Answer: D Section: (none) try: raise Exception           #2 raise Exception go  to except BaseException: except BaseException:    #3 execute next else: finally:                            #5 execute next ",
    "code": "print(\"1\", end='')\nprint(\"2\", end='')\nprint(\"3\", end='')\nprint(\"4\", end='')\nprint(\"5\")\nprint(\"1\", end='')           #1 Print 1\nprint(\"2\", end='')\nprint(\"3\", end='')           #4 Print 3 go to f inally:\nprint(\"4\", end='')\nprint(\"5\")                     #6 Print 5\n",
    "answers": [
      {
        "text": "A. NameError: name 'BaseException' is not defined",
        "correct": false
      },
      {
        "text": "B. 1235",
        "correct": false
      },
      {
        "text": "C. 1245",
        "correct": false
      },
      {
        "text": "D. 135",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class E(Exception): self.message = message return \"Surprise\" try: raise Exception(\"Stop\") except E as e: else: Correct Answer: A Section: (none) https://docs.python.org/3/tutorial/errors.html#hand ling-exceptions ",
    "code": "def __init__(self, message):\ndef __str__(self):\nprint(e)\nprint(\"Goodbye\") A. Unhandled Exception\n",
    "answers": [
      {
        "text": "B. Surprise",
        "correct": false
      },
      {
        "text": "C. Stop",
        "correct": false
      },
      {
        "text": "D. Goodbye",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? try: raise Exception except: except BaseException: except Exception: Correct Answer: D Section: (none) SyntaxError because default 'except:' clause must b e last defined. ",
    "code": "print(\"Spam\", end='')\nprint(\"Ham\", end='')\nprint(\"Eggs\")\n",
    "answers": [
      {
        "text": "A. Eggs",
        "correct": false
      },
      {
        "text": "B. Spam Eggs",
        "correct": false
      },
      {
        "text": "C. Spam Ham Eggs",
        "correct": false
      },
      {
        "text": "D. Syntax Error",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "If there are more than 1 except clause, what happen s after a try clause executes? Correct Answer: AC Section: (none) https://docs.python.org/3/tutorial/errors.html?#han dling-exceptions ",
    "code": "",
    "answers": [
      {
        "text": "A. None of the except is executed",
        "correct": false
      },
      {
        "text": "B. At least 1 except is executed",
        "correct": false
      },
      {
        "text": "C. Not more than 1 except is executed",
        "correct": false
      },
      {
        "text": "D. Exactly 1 of the except is executed",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the statements below is valid? E. The finally branch in a try block is required becau se it is always executed. Correct Answer: AD Section: (none) https://docs.python.org/3/reference/compound_stmts. html#finally ",
    "code": "",
    "answers": [
      {
        "text": "A. The finally branch in a try block is always execu ted.",
        "correct": false
      },
      {
        "text": "B. The finally branch in a try block will only be ex ecuted if an exception occurs.",
        "correct": false
      },
      {
        "text": "C. The finally branch in a try block will only be ex ecuted if the exception did not occur",
        "correct": false
      },
      {
        "text": "D. The finally branch in a try block is optional",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Spam(Exception): pass class Ham(Spam): pass for cls in [Spam, Ham]: try: raise cls() except Spam: except Ham: Correct Answer: B Section: (none) A class in the except clause is compatible with an exception if it is the same class or a base class t hereof. The raised Spam and Ham exceptions will both go to except Spam: since both classes are compatible with Spam. ",
    "code": "print(\"Spam\", end=\" \")\nprint(\"Ham\", end=\" \")\n",
    "answers": [
      {
        "text": "A. Spam Ham",
        "correct": false
      },
      {
        "text": "B. Spam Spam",
        "correct": false
      },
      {
        "text": "C. Spam Ham Spam Ham",
        "correct": false
      },
      {
        "text": "D. Invalid Syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option are valid replacements for the marker in the given code? try: x = 1/0 <<< INSERT CODE HERE >>> pass E. except ArithmeticError: F. except DivisionZeroError: G. except ZeroDivisionError: Correct Answer: ABEG Section: (none) https://docs.python.org/3/library/exceptions.html#e xception-hierarchy QUESTION 49 What is the output of the following code if spam.tx t does not exist? import sys try: f = open('spam.txt') s = f.readline() except: raise Correct Answer: C Section: (none) import sys try: f = open('spam.txt')    #1 raise FileNotFound g o to except: s = f.readline() except:                        #2 execute next raise                         #3 raise FileNotF ound ",
    "code": "A. the script will run but will not print anything\nB. \"None\" will be printed\n",
    "answers": [
      {
        "text": "A. except BaseException:",
        "correct": false
      },
      {
        "text": "B. except Exception:",
        "correct": false
      },
      {
        "text": "C. except MathError:",
        "correct": false
      },
      {
        "text": "D. except ArithmeticException:",
        "correct": false
      },
      {
        "text": "C. FileNotFoundError: [Errno 2] No such file or dire ctory: 'spam.txt'",
        "correct": false
      },
      {
        "text": "D. Compile time error",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:ExplanationExplanation/Reference:"
  },
  {
    "question": "Select which option will call the __init__ method o f Exception based on the code below. class SpamException(Exception): <<< INSERT CODE HERE >>> self.message = message raise SpamException(\"Spam\") Correct Answer: ABC Section: (none) https://docs.python.org/3/library/functions.html#su per ",
    "code": "def __init__(self, message):\n",
    "answers": [
      {
        "text": "A. super().__init__(message)",
        "correct": false
      },
      {
        "text": "B. Exception.__init__(self, message)",
        "correct": false
      },
      {
        "text": "C. super(SpamException, self).__init__(message)",
        "correct": false
      },
      {
        "text": "D. super.__init__(message)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? try: raise UndefinedException except: pass Section: (none) try: raise UndefinedException    #1 raise NameError:  name 'UndefinedException' is not defined except:                                  #2 execute  next pass                                  #3 do not hing ",
    "code": "",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "C. NameError: name 'UndefinedException' is not defin ed",
        "correct": false
      },
      {
        "text": "D. Add () on Line 2 to fix the syntax error Correct Answer: A",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? try: raise UndefinedException except NameError: except UndefinedException: except: pass Correct Answer: B Section: (none) try: raise UndefinedException    #1 raise NameError:  name 'UndefinedException' is not defined except NameError:                  #2 execute next except UndefinedException: except: pass ",
    "code": "print('NameError')\nprint('UndefinedException')\nprint('NameError')                #3 print Name Error\nprint('UndefinedException')\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. NameError",
        "correct": false
      },
      {
        "text": "C. UndefinedException",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? try: raise IOError except IOError: raise RuntimeError from None Correct Answer: C Section: (none) try: raise IOError                             #1 ra ise IOError except IOError:                             #2 exec ute next     raise RuntimeError from None    #3 raise Runtim eError https://docs.python.org/3/tutorial/errors.html?#exc eption-chaining ",
    "code": "",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. IOError",
        "correct": false
      },
      {
        "text": "C. RuntimeError",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? try: raise IOError except IOError as e: raise RuntimeError from e Correct Answer: C Section: (none) https://docs.python.org/3/tutorial/errors.html?#exc eption-chaining ",
    "code": "",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. TypeError",
        "correct": false
      },
      {
        "text": "C. RuntimeError",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the statements below is valid? spam = 0 assert spam == 0 Correct Answer: B Section: (none) AssertionError is raised when False not True ",
    "code": "D. The word True will be printed on screen\n",
    "answers": [
      {
        "text": "A. AssertionError will be triggered because the expr ession is True",
        "correct": false
      },
      {
        "text": "B. No AssertionError will be triggered since the exp ression is True",
        "correct": false
      },
      {
        "text": "C. Missing parentheses in call to assert error will be displayed",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the result of the following code? >>> assert (False, 'Trigger Assertion') Correct Answer: AD Section: (none) The assertion is always True because of the parenth eses. Python treats (False, 'Trigger Assertion') as  a non-empty tuple which it evaluates to True. ",
    "code": "",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. Trigger Assertion",
        "correct": false
      },
      {
        "text": "C. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "D. Assertion is always true",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "E. except (ZeroDivisionError as e): Correct Answer: AC Section: (none) https://docs.python.org/3/tutorial/errors.html#hand ling-exceptions ",
    "code": "",
    "answers": [
      {
        "text": "A. except ZeroDivisionError as e:",
        "correct": false
      },
      {
        "text": "B. except ZeroDivisionError(e):",
        "correct": false
      },
      {
        "text": "C. except (ZeroDivisionError) as e:",
        "correct": false
      },
      {
        "text": "D. except ZeroDivisionError e:",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? try: a = 1/'0' except (ZeroDivisionError, TypeError) as e: Correct Answer: C Section: (none) '0' is a string not a number. 1/'0' results TypeErr or ",
    "code": "print(type(e))\nA. The script will run but will not print anything\n",
    "answers": [
      {
        "text": "B. <class 'ZeroDivisionError'>",
        "correct": false
      },
      {
        "text": "C. <class 'TypeError'>",
        "correct": false
      },
      {
        "text": "D. Invalid Syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "try: raise Exception('spam', 'eggs') except Exception as exception: <<< INSERT CODE HERE >>> Correct Answer: BC Section: (none) https://docs.python.org/3/tutorial/errors.html#hand ling-exceptions ",
    "code": "Which option will print ('spam', 'eggs') based on t he following code?\nA. print(exception.params)\nB. print(exception)\nC. print(exception.args)\nD. print(exception.iterable[:])\nprint(exception)            # prints .args via __st r__() e.g. ('spam', 'eggs')\nprint(exception.args)     # prints .args e.g. ('spa m', 'eggs')\n",
    "answers": [],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> type(Exception().args) Correct Answer: C Section: (none) args is a tuple of arguments given to the exception  constructor. ",
    "code": "",
    "answers": [
      {
        "text": "A. <class 'str'>",
        "correct": false
      },
      {
        "text": "B. <class 'list'>",
        "correct": false
      },
      {
        "text": "C. <class 'tuple'>",
        "correct": false
      },
      {
        "text": "D. <class 'dict'>",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> try: ...       raise Exception('spam', 'eggs') ...    except Exception as inst: ...       x, y = inst.args >>> x, y Correct Answer: A Section: (none) https://docs.python.org/3/library/exceptions.html#B aseException.args ",
    "code": "",
    "answers": [
      {
        "text": "A. ('spam', 'eggs')",
        "correct": false
      },
      {
        "text": "B. ValueError: too many values to unpack (expected 2)",
        "correct": false
      },
      {
        "text": "C. TypeError: 'tuple' object does not support item a ssignment",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class AgeException(Exception): super(AgeException, self).__init__(\"AgeExce ption\") try: raise AgeException(16) except AgeException as e: Correct Answer: B Section: (none) class AgeException(Exception): super(AgeException, self).__init__(\"AgeExce ption\") try: raise AgeException(16)                                                 #1 raise AgeException except AgeException as e:                                                #3 execute next ",
    "code": "def __init__(self, age):\nprint(e)\nA. The script will run but will not print anything\nB. AgeException will be printed\ndef __init__(self, age):                                                  #2 initialize AgeExcepti on\nprint(e)                                                                         #4 print AgeExcep tion\n",
    "answers": [
      {
        "text": "C. TypeError: super() argument 1 must be type",
        "correct": false
      },
      {
        "text": "D. TypeError:__init__() argument 1 must be type",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class MyException(Exception): pass try: raise MyException(\"spam\", \"ham\", \"eggs\") except MyException as s: Correct Answer: C Section: (none) ",
    "code": "print(s)\nA. The script will run but will not print anything\nprint(s)   # prints .args via s.__str__() e.g. (\"sp am\", \"ham\", \"eggs\")\n",
    "answers": [
      {
        "text": "B. spam ham eggs",
        "correct": false
      },
      {
        "text": "C. ('spam', 'ham', 'eggs')",
        "correct": false
      },
      {
        "text": "D. TypeError: expected Exception not type",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all valid option(s) below about string E. string.ascii_uppercase contains 'ABCDEFGHIJKLMNOP QRSTUVWXYZ' Correct Answer: ADE Section: (none) https://docs.python.org/3/library/string.html#modul e-string ",
    "code": "C. string.ascii_letters are all printable characters  found in the keyboard\n",
    "answers": [
      {
        "text": "A. string.ascii_letters is a concatenation of ascii_ lowercase and ascii_uppercase",
        "correct": false
      },
      {
        "text": "B. string.ascii_letters is a concatenation of ascii_ lowercase, ascii_uppercase and digits",
        "correct": false
      },
      {
        "text": "D. string.ascii_lowercase contains 'abcdefghijklmnop qrstuvwxyz'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? E. \\ Correct Answer: D Section: (none) \"\\\\\" is 1 literal backslash and should come in pair s. e.g. \"\\\\\\\\\" are 2 literal backslashes ",
    "code": "print(\"\\\\\\\\\")\n",
    "answers": [
      {
        "text": "A. Syntax Error",
        "correct": false
      },
      {
        "text": "B. \\\\\\\\",
        "correct": false
      },
      {
        "text": "C. \\\\\\",
        "correct": false
      },
      {
        "text": "D. \\\\",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "What is the output of the following code? E. \\\\ F. \\ Correct Answer: A Section: (none) \"\\\\\" is 1 literal backslash and should come in pair s. e.g. \"\\\\\\\\\\\" have an excess backslash which do n ot have a matching pair ",
    "code": "print(\"\\\\\\\\\\\")\n",
    "answers": [
      {
        "text": "A. Syntax Error",
        "correct": false
      },
      {
        "text": "B. \\\\\\\\\\",
        "correct": false
      },
      {
        "text": "C. \\\\\\\\",
        "correct": false
      },
      {
        "text": "D. \\\\\\",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? Correct Answer: A Section: (none) The character \"\\\" inside a string is used to escape  special characters. The literal backslash should b e represented as \"\\\\\" ",
    "code": "print(\"C:\\Program Files\\Microsoft\\Windows NT\", end= \"\")\nprint(\"\\\")\n",
    "answers": [
      {
        "text": "A. Syntax Error",
        "correct": false
      },
      {
        "text": "B. C:\\Program Files\\Microsoft\\Windows NT\\",
        "correct": false
      },
      {
        "text": "C. Replace escaped characters with \"?\" e.g. C:?rogra m Files?icrosoft?indows NT?",
        "correct": false
      },
      {
        "text": "D. Ignore escaped characters e.g. C: rogram Filesicr osoftindows NT",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? E. Syntax Error Correct Answer: C Section: (none) The literal backslash is represented as \"\\\\\" and wi ll count as only 1 character. QUESTION 69 spam = \"\"\"\"\"\"       # 6 \" ham = \"\"\"            # 3 \" \"\"\"                      #3 \" Correct Answer: C Section: (none) String literals can span multiple lines. One way is  using triple-quotes: \"\"\"...\"\"\" or '''...'''. End o f lines are automatically included in the string ",
    "code": "print(\"\\\\//\\\\//\", len(\"\\\\//\\\\//\"))\nWhat will be printed in the following code?\nprint(spam, ham)\n",
    "answers": [
      {
        "text": "A. \\\\//\\\\// 8",
        "correct": false
      },
      {
        "text": "B. \\//\\// 8",
        "correct": false
      },
      {
        "text": "C. \\//\\// 6",
        "correct": false
      },
      {
        "text": "D. //// 4",
        "correct": false
      },
      {
        "text": "A. Syntax Error",
        "correct": false
      },
      {
        "text": "B. Two empty strings",
        "correct": false
      },
      {
        "text": "C. An empty string and a new line character",
        "correct": false
      },
      {
        "text": "D. Two new line character",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? spam = chr('a') ham = ord(spam) E. Syntax Error Correct Answer: B Section: (none) chr(i) Return the string representing a character w hose Unicode code point is the integer i. e.g. chr( 97) returns 'a'; chr('a') results TypeError ord(c) Given a string representing one Unicode char acter, return an integer representing the Unicode c ode point of that character. e.g. ord('a') returns 97; ord(97) results TypeError ",
    "code": "print(spam, ham)\n",
    "answers": [
      {
        "text": "A. 97 a",
        "correct": false
      },
      {
        "text": "B. TypeError: 'str' object cannot be interpreted as an integer",
        "correct": false
      },
      {
        "text": "C. TypeError: chr() takes exactly two arguments (1 g iven)",
        "correct": false
      },
      {
        "text": "D. TypeError: ord() takes exactly two arguments (1 g iven)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? \"spam\" \"ham\" \"eggs\" Correct Answer: B Section: (none) Literals without any associated actions are ignored . ",
    "code": "print(\"Hello World\")\n",
    "answers": [
      {
        "text": "A. spam ham eggs Hello World",
        "correct": false
      },
      {
        "text": "B. Hello World",
        "correct": false
      },
      {
        "text": "C. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "D. NameError: name 'spam' is not defined",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "John said: \"I'm fine!\" Correct Answer: ABE Section: (none) https://docs.python.org/3/tutorial/introduction.htm l#strings ",
    "code": "Which option will print the following output?\nA. print('John said: \"I\\'m fine!\"')\nB. print(\"John said: \\\"I'm fine!\\\"\")\nC. print(\"John said: \"\"I'm fine!\"\"\")\nD. print('John said: \"I''m fine!\"')\nE. print('John said: \\\"I\\'m fine!\\\"')\n",
    "answers": [],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option will return a different result given t he code below? s = 'Python' Correct Answer: C Section: (none) TIP: Once you have a different result no need to ch eck the remaining option(s) ",
    "code": "A. print(s[0] + s[-1])\nB. print(s[::5])\nC. print(s[::-5])\nD. print(s[::-1][::-5])\nAll options will result in Pn except for print(s[:: -5]) which results in nP.\n",
    "answers": [],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option will return True given the following c ode? spam = 'FuBar' ham = spam[:] E. spam.equals(ham) Correct Answer: ABCD Section: (none) spam == ham              # True id(spam) == id(ham)     # True spam.startswith(ham)   # True spam.endswith(ham)    # True spam.equals(ham)       # AttributeError: 'str' obje ct has no attribute 'equals' ",
    "code": "",
    "answers": [
      {
        "text": "A. spam == ham",
        "correct": false
      },
      {
        "text": "B. id(spam) == id(ham)",
        "correct": false
      },
      {
        "text": "C. spam.startswith(ham)",
        "correct": false
      },
      {
        "text": "D. spam.endswith(ham)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option(s) will return Ham E. 'Spam,Ham,Eggs'[-5:5] Correct Answer: ABC Section: (none) 'Spam,Ham,Eggs'[5:8]         # Ham 'Spam,Ham,Eggs'[-8:-5]       # Ham 'Spam,Ham,Eggs'[5:-5]        # Ham 'Spam,Ham,Eggs'[-5:-8]       # Empty string 'Spam,Ham,Eggs'[-5:5]        # Empty string ",
    "code": "",
    "answers": [
      {
        "text": "A. 'Spam,Ham,Eggs'[5:8]",
        "correct": false
      },
      {
        "text": "B. 'Spam,Ham,Eggs'[-8:-5]",
        "correct": false
      },
      {
        "text": "C. 'Spam,Ham,Eggs'[5:-5]",
        "correct": false
      },
      {
        "text": "D. 'Spam,Ham,Eggs'[-5:-8]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? spam = 'spam' spam[0]='x' Correct Answer: D Section: (none) Python strings cannot be changed \u2014 they are immutab le. Therefore, assigning to an indexed position in the string results in an error. ",
    "code": "print(spam[0], end=' ')\nprint(spam)\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. s xpam",
        "correct": false
      },
      {
        "text": "C. s spam",
        "correct": false
      },
      {
        "text": "D. s followed by TypeError: 'str' object does not su pport item assignment",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? s = 'Hello World' for i in len(s): s[i] = s[i].upper() Correct Answer: D Section: (none) https://docs.python.org/3/tutorial/controlflow.html ?#for-statements ",
    "code": "print(s)\n",
    "answers": [
      {
        "text": "A. Hello World",
        "correct": false
      },
      {
        "text": "B. HELLO WORLD",
        "correct": false
      },
      {
        "text": "C. TypeError: 'str' object does not support item ass ignment",
        "correct": false
      },
      {
        "text": "D. TypeError: 'int' object is not iterable",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "What is the output of the following code? s = '0123456789' E. SyntaxError: invalid syntax Correct Answer: C Section: (none) default start=0; default end=10 (length of the stri ng); default step=1 s[::2] # start=0, end=10, step=2 results 02468 s[:-2:2] # start=0, end=10-2=8, step=2 results 0246 s[2::2] # start=2, end=10, step=2 results 2468 ",
    "code": "print(s[::2], s[:-2:2], s[2::2])\n",
    "answers": [
      {
        "text": "A. 01 89 23",
        "correct": false
      },
      {
        "text": "B. 01 01 23",
        "correct": false
      },
      {
        "text": "C. 02468 0246 2468",
        "correct": false
      },
      {
        "text": "D. 02468 8 0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code if the use r enters 1 on the first prompt and 2 on the second prompt? a = input(\"Enter first number:\") b = input(\"Enter second number:\") Correct Answer: C Section: (none) '1' + '2' == '12' or the concatenation of the strin gs '1' and '2' ",
    "code": "print(a + b)\n",
    "answers": [
      {
        "text": "A. TypeError: input() takes 0 positional arguments b ut 1 was given",
        "correct": false
      },
      {
        "text": "B. 3",
        "correct": false
      },
      {
        "text": "C. 12",
        "correct": false
      },
      {
        "text": "D. TypeError: unsupported operand type(s) for +: 'st r' and 'str'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? foo = [ 'Spam', 'Ham' 'Eggs' ] Section: (none) https://docs.python.org/3/reference/lexical_analysi s.html#string-literal-concatenation ",
    "code": "print(foo)\n",
    "answers": [
      {
        "text": "A. ['Spam', 'Ham', 'Eggs']",
        "correct": false
      },
      {
        "text": "B. ['Spam', 'HamEggs']",
        "correct": false
      },
      {
        "text": "C. ['Spam']",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax Correct Answer: B",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> None * 2 Correct Answer: D Section: (none) The None object has no arithmetic operators defined . ",
    "code": "",
    "answers": [
      {
        "text": "A. 0",
        "correct": false
      },
      {
        "text": "B. None",
        "correct": false
      },
      {
        "text": "C. NoneNone",
        "correct": false
      },
      {
        "text": "D. TypeError: unsupported operand type(s) for *",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> spam, ham = 1, \"ham\" >>> spam *= 3 >>> ham *= 3 >>> spam, ham Correct Answer: B Section: (none) s * n or n * s is equivalent to adding s to itself n times >>> \"ham\" * 3 'hamhamham' ",
    "code": "",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. (3, 'hamhamham')",
        "correct": false
      },
      {
        "text": "C. (3, 0)",
        "correct": false
      },
      {
        "text": "D. TypeError: unsupported operand type(s) for *=: 's tr' and 'int'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> 2 * 'DUN-' + 'DUUUUN!!!' Correct Answer: B Section: (none) s * n or n * s is equivalent to adding s to itself n times. >>> 2 * 'DUN-' 'DUN-DUN-' >>> 'DUN-DUN-' + 'DUUUUN!!!' 'DUN-DUN-DUUUUN!!!' ",
    "code": "",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. 'DUN-DUN-DUUUUN!!!'",
        "correct": false
      },
      {
        "text": "C. 2",
        "correct": false
      },
      {
        "text": "D. TypeError: unsupported operand type(s) for * 'int ' and 'str'",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> 2 * ('Yes' + 3*'!') E. 'Yes!!!Yes!!!' Correct Answer: E Section: (none) >>> 3*'!' '!!!' >>> 'Yes' + '!!!' 'Yes!!!' >>> 2 * 'Yes!!!' 'Yes!!!Yes!!!' ",
    "code": "",
    "answers": [
      {
        "text": "A. 0",
        "correct": false
      },
      {
        "text": "B. 8",
        "correct": false
      },
      {
        "text": "C. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "D. TypeError: unsupported operand type(s) for *: 'in t' and 'str'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> sorted([5, \"1\", 100, \"34\"]) E. TypeError: '<' not supported between instances of  'str' and 'int' Correct Answer: E Section: (none) There are data types that can\u2019t be compared to each  other using just sorted() because they are too different. Python will return TypeError if you atte mpt to use sorted() on a list containing non-compar able data. ",
    "code": "",
    "answers": [
      {
        "text": "A. [\"1\", 5, \"34\", 100]",
        "correct": false
      },
      {
        "text": "B. [5, \"1\", \"34\", 100]",
        "correct": false
      },
      {
        "text": "C. [\"1\", \"100\", \"34\", \"5\"]",
        "correct": false
      },
      {
        "text": "D. [1, 5, 34, 100]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? x = \"0\" y = \"1\" z = \"2\" x = y < z Correct Answer: B Section: (none) y < z results in <class 'bool'> overrides content o f the variable x ",
    "code": "print(x == 1, type(x))\n",
    "answers": [
      {
        "text": "A. False <class 'bool'>",
        "correct": false
      },
      {
        "text": "B. True <class 'bool'> C. False <class 'str'>",
        "correct": false
      },
      {
        "text": "D. True <class 'str'>",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? spam.txt spam ham eggs spam.py f = open('spam.txt', 'r') if 'eggs' in f: else: Correct Answer: B Section: (none) open('spam.txt', 'r') opens the file and returns th e file object, not the file content. ",
    "code": "print('Eggs found')\nprint('Eggs not found')\n",
    "answers": [
      {
        "text": "A. Eggs found",
        "correct": false
      },
      {
        "text": "B. Eggs not found",
        "correct": false
      },
      {
        "text": "C. TypeError: argument type TextIOWrapper not iterab le",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the option(s) below are valid given the fo llowing code? >>> '' not in 'spam' Correct Answer: CD Section: (none) '' in s is true for every string s: n is zero, so w e are checking s[i:i]; and that is the empty string  itself for every valid index i: >>> s = 'spam' >>> s[0:0] '' >>> s[1:1] '' >>> s[2:2] '' >>> s[3:3] '' QUESTION 89 Which of the calls below are valid String function calls and will return True? E. '123'.isdigit() F. 'Abc'.istitle() Correct Answer: ABDEF Section: (none) https://docs.python.org/3/library/stdtypes.html?#st ring-methods >>> 'abc123'.isalnum() True >>> 'abc'.isalpha() True >>> '123abc'.isidentifier() False >>> '123abc'.islower() True >>> '123'.isdigit() True >>> 'Abc'.istitle() True ",
    "code": "",
    "answers": [
      {
        "text": "A. Prints True",
        "correct": false
      },
      {
        "text": "B. Empty string is not in the string 'spam'",
        "correct": false
      },
      {
        "text": "C. Prints False",
        "correct": false
      },
      {
        "text": "D. Empty string is always part of any string no exce ption",
        "correct": false
      },
      {
        "text": "A. 'abc123'.isalnum()",
        "correct": false
      },
      {
        "text": "B. 'abc'.isalpha()",
        "correct": false
      },
      {
        "text": "C. '123abc'.isidentifier()",
        "correct": false
      },
      {
        "text": "D. '123abc'.islower()",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> \"/\".join({\"Month\": \"12\", \"Day\": \"25\", \"Year\":\"2 021\"}) Correct Answer: B Section: (none) https://docs.python.org/3/library/stdtypes.html#str .join Iterating a dictionary calls __iter__() which itera tes over the keys of a dictionary. ",
    "code": "",
    "answers": [
      {
        "text": "A. 12/25/2021",
        "correct": false
      },
      {
        "text": "B. Month/Day/Year",
        "correct": false
      },
      {
        "text": "C. Month/12/Day/25/Year/2021",
        "correct": false
      },
      {
        "text": "D. TypeError: can only join an iterable",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> \"XYZ\".join(\"123\") E. TypeError: can only join an iterable Correct Answer: C Section: (none) https://docs.python.org/3/library/stdtypes.html#str .join Iterating a string calls __iter__() which iterates over each character of the string. ",
    "code": "",
    "answers": [
      {
        "text": "A. XYZ123",
        "correct": false
      },
      {
        "text": "B. 123XYZ",
        "correct": false
      },
      {
        "text": "C. 1XYZ2XYZ3",
        "correct": false
      },
      {
        "text": "D. X123Y123Z",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> \"/spam/ham/eggs/\".split(\"/\") Correct Answer: B Section: (none) https://docs.python.org/3/library/stdtypes.html#str .split >>> \"spam/ham/eggs\".split(\"/\") ['spam', 'ham', 'eggs'] >>> \"/spam\".split(\"/\") ['', 'spam'] >>> \"eggs/\".split(\"/\") ['eggs', ''] ",
    "code": "",
    "answers": [
      {
        "text": "A. ['spam', 'ham', 'eggs']",
        "correct": false
      },
      {
        "text": "B. ['', 'spam', 'ham', 'eggs', '']",
        "correct": false
      },
      {
        "text": "C. ( 'spam', 'ham', 'eggs')",
        "correct": false
      },
      {
        "text": "D.  ('', 'spam', 'ham', 'eggs', '')",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? spam = [4*(3+5), 4*3+5, 4+3*5, (4+3)*5] spam.sort(reverse=True) E. [35, 19, 17, 32] Correct Answer: D Section: (none) >>> [4*(3+5), 4*3+5, 4+3*5, (4+3)*5] [32, 17, 19, 35] >>> _.sort(reverse=True) >>> _ [35, 32, 19, 17] ",
    "code": "print(spam)\n",
    "answers": [
      {
        "text": "A. TypeError: 'reverse' is an invalid keyword argume nt for sort()",
        "correct": false
      },
      {
        "text": "B. [32, 17, 19, 35]",
        "correct": false
      },
      {
        "text": "C. [17, 19, 32, 35]",
        "correct": false
      },
      {
        "text": "D. [35, 32, 19, 17]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? d = { 'zero':0, 'one':1, 'three':3, 'two':2 } for k in sorted(d.keys()): E. one three two zero Correct Answer: C Section: (none) sorted(d.keys()) will sort the keys alphabetically or \"one\", \"three\", \"two\", \"zero\" ",
    "code": "print(d[k], end=' ')\n",
    "answers": [
      {
        "text": "A. TypeError: sorted expected 2 arguments, got 1",
        "correct": false
      },
      {
        "text": "B. 0 1 2 3",
        "correct": false
      },
      {
        "text": "C. 1 3 2 0",
        "correct": false
      },
      {
        "text": "D. zero one two three",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> sorted(['banana', 'pear', 'grapes', 'apple'], k ey=lambda x: x[::-1]) Correct Answer: B Section: (none) key=lambda x: x[::-1] reverses of the text or 'anan ab', 'elppa', 'raep', 'separg' to be used as keys f or sorting ",
    "code": "",
    "answers": [
      {
        "text": "A. ['apple', 'banana', 'grapes', 'pear']",
        "correct": false
      },
      {
        "text": "B. ['banana', 'apple', 'pear', 'grapes']",
        "correct": false
      },
      {
        "text": "C. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "D. TypeError: 'key' is an invalid keyword argument f or sorted()",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? return word[::-1] Correct Answer: B Section: (none) word[::-1] reverses the text or 'ananab', 'elppa', 'raep', 'separg' to be used as keys for sorting ",
    "code": "def reverse(word):\nprint(sorted(['banana', 'pear', 'grapes', 'apple'],  key=reverse))\n",
    "answers": [
      {
        "text": "A. ['pear', 'grapes', 'banana', 'apple']",
        "correct": false
      },
      {
        "text": "B. ['banana', 'apple', 'pear', 'grapes']",
        "correct": false
      },
      {
        "text": "C. ['grapes', 'pear', 'apple', 'banana']",
        "correct": false
      },
      {
        "text": "D. TypeError: 'key' is an invalid keyword argument f or sorted()",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? Correct Answer: B Section: (none) word[::-1] reverses the text or 'ananab', 'elppa', 'raep', 'separg' to be used as keys for sorting reverse=True reverses the order to descending or 's eparg', 'raep', 'elppa', 'ananab' ",
    "code": "def reverse(word):\nreturn word[::-1] print(sorted(['banana', 'pear', 'grapes', 'apple'],  key=reverse, reverse=True))\n",
    "answers": [
      {
        "text": "A. ['apple', 'banana', 'grapes', 'pear']",
        "correct": false
      },
      {
        "text": "B. ['grapes', 'pear', 'apple', 'banana']",
        "correct": false
      },
      {
        "text": "C. ['banana', 'apple', 'pear', 'grapes']",
        "correct": false
      },
      {
        "text": "D. TypeError: 'key' is an invalid keyword argument f or sorted()",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> \"Spam Ham Eggs\".index('Spam', 1) E. TypeError: index() takes 1 argument (2 given) Correct Answer: D Section: (none) index('Spam', 1) searches for 'Spam' beginning at 2 nd character or index 1 (1st character is index 0). Substring not found and throws ValueError ",
    "code": "",
    "answers": [
      {
        "text": "A. Spam",
        "correct": false
      },
      {
        "text": "B. 0",
        "correct": false
      },
      {
        "text": "C. 1",
        "correct": false
      },
      {
        "text": "D. ValueError: substring not found",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? t = \"Spam Ham\" Correct Answer: C Section: (none) https://docs.python.org/3/library/stdtypes.html#str .find https://docs.python.org/3/library/stdtypes.html#str .index >>> t = \"Spam Ham\" >>> t.find(\"Ham\", 0) 5 >>> t.index(\"Ham\", 0) 5>>> t.find(\"Eggs\", 0) -1 >>> t.index(\"Eggs\", 0) ValueError: substring not found ",
    "code": "print(t.find(\"Ham\", 0) == t.index(\"Ham\", 0))\nprint(t.find(\"Eggs\", 0) == t.index(\"Eggs\", 0))\nC. True will be printed followed by ValueError: subs tring not found\nD. True will be printed followed by TypeError: find( ) takes 1 argument (2 given)\n",
    "answers": [
      {
        "text": "A. True True",
        "correct": false
      },
      {
        "text": "B. True False",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? t = \"Spam Ham\" Correct Answer: B Section: (none) https://docs.python.org/3/library/stdtypes.html#str .rfind https://docs.python.org/3/library/stdtypes.html#str .find >>> t = \"Spam Ham\" >>> t.rfind(\"am\"), t.find(\"am\") # Spam Ham, Spam Ha m (6, 2) >>> t.rfind(\"am\", 3), t.find(\"am\", 3) # Spam Ham, S pam Ham (6, 6) >>> t.rfind(\"am\", -3), t.find(\"am\", -3) # Spam Ham,  Spam Ham (6, 6) ",
    "code": "print(t.rfind(\"am\") == t.find(\"am\"))\nprint(t.rfind(\"am\", 3) == t.find(\"am\", 3))\nprint(t.rfind(\"am\", -3) == t.find(\"am\", -3))\nD. True will be printed followed by TypeError: rfind  takes 1 argument (2 given)\n",
    "answers": [
      {
        "text": "A. False False False",
        "correct": false
      },
      {
        "text": "B. False True True",
        "correct": false
      },
      {
        "text": "C. True True True",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the option(s) is valid given the code belo w? class Spam: ''' This is class Spam ''' pass Correct Answer: A Section: (none) This is a minimal class declaration. The triple-quo ted string functions as a comment. ",
    "code": "B. This is class Spam will be printed\n",
    "answers": [
      {
        "text": "A. The code compiles but will not output anything",
        "correct": false
      },
      {
        "text": "C. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "D. The file should be saved as Spam.py",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Ham: return Ham() spam().eggs() Correct Answer: B Section: (none) ",
    "code": "def spam():\ndef eggs(self):\nprint('Hello World')\nclass can be declared inside function definitions ( def statements)\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. Hello World",
        "correct": false
      },
      {
        "text": "C. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "D. AttributeError: spam() has no attribute 'eggs'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? h = Ham() h.eggs() class Ham: return spam() Correct Answer: D Section: (none) ",
    "code": "def spam():\ndef eggs(self):\nprint('Hello World')\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. Hello World",
        "correct": false
      },
      {
        "text": "C. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "D. UnboundLocalError: cannot access local variable ' Ham' where it is not associated with a value",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Foo: bar = 'spam' f1 = Foo() f2 = Foo() f2.bar = 'ham' Foo.bar = 'eggs' Correct Answer: B Section: (none) class Foo: bar = 'spam' f1 = Foo() f2 = Foo() >>> id(f1.bar),id(f2.bar),id(Foo.bar) # initial ref erences are the same (58327552, 58327552, 58327552) f2.bar = 'ham' # updating the instance variable upd ates the instance variable reference >>> id(f1.bar),id(f2.bar),id(Foo.bar) (58327552, 58329472, 58327552) Foo.bar = 'eggs' # updating the class variable upda tes all variable references not updated >>> id(f1.bar),id(f2.bar),id(Foo.bar) (52210080, 58329472, 52210080) >>> f1.bar, f2.bar, Foo.bar ('eggs', 'ham', 'eggs') ",
    "code": "print(f1.bar, f2.bar, Foo.bar)\n",
    "answers": [
      {
        "text": "A. spam ham eggs",
        "correct": false
      },
      {
        "text": "B. eggs ham eggs",
        "correct": false
      },
      {
        "text": "C. eggs eggs eggs",
        "correct": false
      },
      {
        "text": "D. AttributeError: type object 'Foo' has no attribut e 'bar'",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Spam: HAM = 1 self.v = v + Spam.HAM Spam.HAM += 1 a = Spam() b = Spam(3) Correct Answer: D Section: (none) >>> Spam() self.v=3    v=2    Spam.HAM=1 >>> # Spam.HAM += 1 accessed as class var and carri ed over next >>> Spam(3) self.v=5    v=3    Spam.HAM=2 ",
    "code": "def __init__(self, v=2):\nprint(a.v, b.v)\n",
    "answers": [
      {
        "text": "A. TypeError: __init__() missing 1 required position al argument: 'v'",
        "correct": false
      },
      {
        "text": "B. 3 3",
        "correct": false
      },
      {
        "text": "C. 3 4",
        "correct": false
      },
      {
        "text": "D. 3 5",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Ham: self.v1 = 1 class Spam(Ham): self.v2 = 2 s = Spam() Correct Answer: D Section: (none) The parent's __init__ was never called hence v1 was  never initialized and will not be visible. ",
    "code": "def __init__(self):\ndef __init__(self):\nprint(s.v1,s.v2)\n",
    "answers": [
      {
        "text": "A. 0 2",
        "correct": false
      },
      {
        "text": "B. 1 2",
        "correct": false
      },
      {
        "text": "C. Invalid Syntax D. AttributeError: 'Spam' object has no attribute 'v1'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Ham: v = 1 return self.v class Spam(Ham): v = 2 s = Spam() h = Ham() Correct Answer: B Section: (none) >>> class Ham: ... v = 1 ... return self.v >>> class Spam(Ham): ... v = 2 >>> s = Spam() >>> h = Ham() >>> Spam.__mro__ # method resolution order (<class '__main__.Spam'>, <class '__main__.Ham'>, < class 'object'>) >>> Ham.__mro__ # method resolution order (<class '__main__.Ham'>, <class 'object'>) >>> s.v0() # returns 2 based on Spam.__mro__ 2 >>> h.v0() # returns 1 based on Ham.__mro__ 1 ",
    "code": "def v0(self):\nprint(s.v0(), h.v0())\n... def v0(self):\n",
    "answers": [
      {
        "text": "A. 1 1",
        "correct": false
      },
      {
        "text": "B. 2 1",
        "correct": false
      },
      {
        "text": "C. 2 2",
        "correct": false
      },
      {
        "text": "D. AttributeError: 'Spam' object has no attribute 'v 0'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Spam: bar = foo s = Spam() s.bar('World') A. No output Correct Answer: B Section: (none) Any function object that is a class attribute defin es a method for instances of that class. It is not necessary that the function definition is textually enclosed in the class definition: assigning a function objec t to a local variable in the class is also ok. ",
    "code": "def foo(self, p):\nprint('Hello',p)\n",
    "answers": [
      {
        "text": "B. Hello World",
        "correct": false
      },
      {
        "text": "C. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "D. NameError: name 'foo' is not defined",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Spam:                                # 1 self.ham = v                         # 3 self.__ham = self. ham + 1    # 4 s = Spam(100)                             # 5 E. Error in Line 6 Correct Answer: E Section: (none) https://docs.python.org/3/tutorial/classes.html#pri vate-variables ",
    "code": "def __init__(self, v):                    # 2\nprint(s.ham ,s.__ham)                   # 6\n",
    "answers": [
      {
        "text": "A. 100 101",
        "correct": false
      },
      {
        "text": "B. Error in Line 3",
        "correct": false
      },
      {
        "text": "C. Error in Line 4",
        "correct": false
      },
      {
        "text": "D. Error in Line 5",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class A: return 'A.spam' return self.spam() class B: return 'B.spam' class C(B, A): pass c = C() Section: (none) https://docs.python.org/3/library/stdtypes.html#cla ss.__mro__ >>> class A: ...          return 'A.spam' ...          return self.spam() >>> class B: ...          return 'B.spam' >>> class C(B, A): ...       pass >>> c = C() >>> C.__mro__ # method resolution order for functio n execution (<class '__main__.C'>, <class '__main__.B'>, <class  '__main__.A'>, <class 'object'>) 'B.spam' 'A.ham' ",
    "code": "def spam(self):\ndef ham(self):\ndef spam(self):\nprint(c.spam(), c.ham())\n...       def spam(self):\n...       def ham(self):\n...       def spam(self):\n>>> c.spam.__qualname__ # calls spam of B based on __mro__ prints B.spam\n>>> c.ham.__qualname__ # calls ham of A based on __ mro__ prints A.ham\n",
    "answers": [
      {
        "text": "A. TypeError: Cannot create a consistent method reso lution",
        "correct": false
      },
      {
        "text": "B. B.spam B.spam",
        "correct": false
      },
      {
        "text": "C. B.spam A.spam",
        "correct": false
      },
      {
        "text": "D. A.spam A.spam Correct Answer: B",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Spam: class Ham: class Eggs(Spam, Ham): super().foo() e = Eggs() e.foo() E. Super Ham Super Spam Correct Answer: B Section: (none) Search for attributes inherited from a parent class  are depth-first, left-to-right. Attribute is searc hed in Eggs, if not found, it is searched in Spam, then (recursi vely) in the base classes of Spam, if not found, it  is searched in Ham, and so on. ",
    "code": "def foo(self):\nprint('Super Spam')\ndef foo(self):\nprint('Super Ham')\ndef foo(self):\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. Super Spam",
        "correct": false
      },
      {
        "text": "C. Super Ham",
        "correct": false
      },
      {
        "text": "D. Super Spam Super Ham",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option(s) are valid replacements for the mark ed section below. class Bar: self.x = 1 class Foo(Bar): <<< INSERT CODE HERE >>> self.y = 2 f = Foo() Correct Answer: BC Section: (none) The Bar's __init__ was never called hence x was nev er initialized and will not be visible. ",
    "code": "def __init__(self):\ndef __init__(self):\nprint(f.x, f.y)\nprint(f.x, f.y) results in AttributeError: 'Foo' ob ject has no attribute 'x'\n",
    "answers": [
      {
        "text": "A. Blank. Code will work without replacement",
        "correct": false
      },
      {
        "text": "B. super(Foo, self).__init__ ()",
        "correct": false
      },
      {
        "text": "C. Bar.__init__ (self)",
        "correct": false
      },
      {
        "text": "D. None. All results in AttributeError: 'Foo' object  has no attribute 'x'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select the choices which will return TRUE? class X: pass class Y: pass class Z(X, Y): pass Correct Answer: BC Section: (none) https://docs.python.org/3/library/functions.html#is subclass ",
    "code": "",
    "answers": [
      {
        "text": "A. issubclass(X, Z) and issubclass(Y, Z)",
        "correct": false
      },
      {
        "text": "B. issubclass(Z, X) and issubclass(Z, Y)",
        "correct": false
      },
      {
        "text": "C. issubclass(Z, (list, X, Y))",
        "correct": false
      },
      {
        "text": "D. issubclass(Z, X, Y))",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class A(object): pass class C(A,A): pass Correct Answer: CSection: (none) Duplicate base class not allowed. ",
    "code": "",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "C. TypeError: duplicate base class A",
        "correct": false
      },
      {
        "text": "D. NameError: name 'object' is not defined",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class MyClass: FOO = 100 self.bar = [] self.bar.append(p) d, e = MyClass(), MyClass() d.add('spam') e.add('ham') e.FOO = 200 MyClass.FOO = 300 Correct Answer: B Section: (none) >>> class MyClass: ...        FOO = 100 ...            self.bar = [] ...            self.bar.append(p) >>> d, e = MyClass(), MyClass() >>> id(d.bar), id(e.bar) (49644232, 6296232) >>> d.add('spam') >>> e.add('ham') >>> e.FOO = 200 >>> id(d.FOO), id(e.FOO), id(MyClass.FOO) (1736748512, 1736750112, 1736748512) >>> MyClass.FOO = 300 >>> d.bar, d.FOO, e.bar, e.FOO (['spam'], 300, ['ham'], 200) ",
    "code": "def __init__(self):\ndef add(self, p):\nprint(d.bar, d.FOO, e.bar, e.FOO)\n...        def __init__(self):\n...        def add(self, p):\n",
    "answers": [
      {
        "text": "A. ['spam'] 300 ['ham'] 300",
        "correct": false
      },
      {
        "text": "B. ['spam'] 300 ['ham'] 200",
        "correct": false
      },
      {
        "text": "C. ['spam'] 100 ['ham'] 200",
        "correct": false
      },
      {
        "text": "D. ['spam'] 100 ['ham'] 300",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following option(s) is valid given the  code below? class Spam:                    # 1 HAM = 100                  # 2 self.eggs = []           # 4 self.eggs.append(p)  # 6 E. Error in LINE 4 Correct Answer: BC Section: (none) ",
    "code": "def __init__(self):          # 3\ndef add(self, p):            # 5\n",
    "answers": [
      {
        "text": "A. HAM is an instance variable",
        "correct": false
      },
      {
        "text": "B. eggs is an instance variable C. HAM is a class variable",
        "correct": false
      },
      {
        "text": "D. eggs is a class variable",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Spam:                     # 1 ham = 0                       # 2 ham = 100                # 4 s, t = Spam(), Spam()       # 6 s.ham, t.ham = 200, 300   # 7 Spam.ham = 500              # 8 E. Error in Line 8 Correct Answer: B Section: (none) >>> class Spam: ...       ham = 0 ...           ham = 100 >>> s, t = Spam(), Spam() >>> s.ham, t.ham = 200, 300 >>> id(s.ham), id(t.ham), id(Spam.ham) (1642116128, 52376480, 1642112928) >>> Spam.ham = 500 >>> id(s.ham), id(t.ham), id(Spam.ham) (1642116128, 52376480, 52379568) >>> s.ham, t.ham (200, 300) ",
    "code": "def __init__(self):           # 3\n# 5\nprint(s.ham, t.ham)           # 9\n...       def __init__(self):\n",
    "answers": [
      {
        "text": "A. 500 500",
        "correct": false
      },
      {
        "text": "B. 200 300",
        "correct": false
      },
      {
        "text": "C. Error in Line 2",
        "correct": false
      },
      {
        "text": "D. Error in Line 4",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select the option(s) which will return the dictiona ry or other mapping object used to store an object' s (writable) attributes of the following code class Person: name = \"John\" age = 36 country = \"USA\" p = Person() Correct Answer: AC Section: (none) https://docs.python.org/3/library/functions.html?#v ars ",
    "code": "",
    "answers": [
      {
        "text": "A. vars(Person)",
        "correct": false
      },
      {
        "text": "B. vars(p) C. Person.__dict__",
        "correct": false
      },
      {
        "text": "D. p.__dict__",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Ham: self.__update() __update = update Ham() Correct Answer: C Section: (none) >>> class Ham: ...           self.__update()                                                   #4 call __update ...       __update = update                                                 #5 save reference to __upd ate >>> Ham()                                                                      #1 call initialize Ham ",
    "code": "def __init__(self):\nprint(type(self).__name__ + '.__init__()', end=' ')\ndef update(self):\nprint(type(self).__name__ + '.update()')\n...       def __init__(self):                                                   #2 initialize Ham\n...           print(type(self).__name__ + '.__init_ _()', end=' ')    #3 print Ham.__init()\n...       def update(self):                                                     #6 execute update via reference __update\n...           print(type(self).__name__ + '.update( )')                 #7 print Ham.update()\n",
    "answers": [
      {
        "text": "A. The script will run but will not output anything",
        "correct": false
      },
      {
        "text": "B. Ham.__init__()",
        "correct": false
      },
      {
        "text": "C. Ham.__init__() Ham.update()",
        "correct": false
      },
      {
        "text": "D. AttributeError: 'Ham' object has no attribute '_H am__update'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the option(s) below are valid calls given the code below? class Spam: __ham = 0 __ham = 100 return __ham eggs = __eggs s = Spam() <<< INSERT CODE HERE >>> E. s._Spam__ham Correct Answer: ACE Section: (none) >>> class Spam: ...        __ham = 0 ...           __ham = 100 ...           return __ham ...        eggs = __eggs >>> s = Spam() >>> s.eggs() 100 >>> s.__eggs() AttributeError: 'Spam' object has no attribute '__e ggs' >>> s._Spam__eggs() 100 >>> s.__ham AttributeError: 'Spam' object has no attribute '__h am' >>> s._Spam__ham 0 ",
    "code": "def __eggs(self):\n...        def __eggs(self):\n",
    "answers": [
      {
        "text": "A. s.eggs()",
        "correct": false
      },
      {
        "text": "B. s.__eggs()",
        "correct": false
      },
      {
        "text": "C. s._Spam__eggs()",
        "correct": false
      },
      {
        "text": "D. s.__ham",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Ham: self.update() Ham() Correct Answer: D Section: (none) Python will disregard all except the last defined f unction with the same name within the same class. >>> help(Ham.update) Help on function update in module __main__: update(self, param) ",
    "code": "def __init__(self):\nprint(type(self).__name__ + '.__init__()', end=' ')\ndef update(self):\nprint(type(self).__name__ + '.update()', en d=' ')\ndef update(self, param):\nprint(type(self).__name__ + '.update(param) ', end=' ')\n",
    "answers": [
      {
        "text": "A. Ham.__init__() Ham.update()",
        "correct": false
      },
      {
        "text": "B. Ham.__init__() Ham.update(param)",
        "correct": false
      },
      {
        "text": "C. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "D. TypeError: update() missing 1 required positional  argument: 'param'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Ham: self.__update() __update = update class Spam(Ham): Ham() Spam() Correct Answer: B Section: (none) Ham will save the reference of the function update to __update. __update() will reference the update defined in Ham  for both Ham and Spam. ",
    "code": "def __init__(self):\nprint(type(self).__name__ + '.__init__()', end=' ')\ndef update(self):\nprint(type(self).__name__ + '.update()', en d=' ')\ndef update(self, param):\nprint(type(self).__name__ + '.update(param) ', end=' ')\n",
    "answers": [
      {
        "text": "A. Ham.__init__() Ham.update() Ham.__init__() Ham.up date()",
        "correct": false
      },
      {
        "text": "B. Ham.__init__() Ham.update() Spam.__init__() Spam. update()",
        "correct": false
      },
      {
        "text": "C. Ham.__init__() Ham.update() Spam.__init__() Spam. update(param)",
        "correct": false
      },
      {
        "text": "D. TypeError: update() missing 1 required positional  argument: 'param'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Ham: self.update() class Spam(Ham): Ham() Spam() Correct Answer: D Section: (none) >>> Ham.__mro__ (<class '__main__.Ham'>, <class 'object'>) >>> Spam.__mro__ (<class '__main__.Spam'>, <class '__main__.Ham'>, < class 'object'>) __init__ for both Ham and Spam will call the update  without the parameter. Using __mro__, it will fail on Spam because the upd ate defined in Spam has 1 required positional argument param. ",
    "code": "def __init__(self):\nprint(type(self).__name__ + '.__init__()', end=' ')\ndef update(self):\nprint(type(self).__name__ + '.update()', en d=' ')\ndef update(self, param):\nprint(type(self).__name__ + '.update(param) ', end=' ')\n",
    "answers": [
      {
        "text": "A. Ham.__init__() Ham.update() Ham.__init__() Ham.up date()",
        "correct": false
      },
      {
        "text": "B. Ham.__init__() Ham.update() Spam.__init__() Spam. update()",
        "correct": false
      },
      {
        "text": "C. Ham.__init__() Ham.update() Spam.__init__() Spam. update(param)",
        "correct": false
      },
      {
        "text": "D. TypeError: update() missing 1 required positional  argument: 'param'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the statements below is valid? class A: pass return <CALL spam> a = A() <CALL ham> Correct Answer: AC Section: (none) Often, the first argument of a method is called sel f. This is nothing more than a convention: the name  self has absolutely no special meaning to Python. Note, also, there is no need to supply the self argument with a parameter. ",
    "code": "def __init__(self):\ndef spam(self):         pass\ndef ham(self):\n",
    "answers": [
      {
        "text": "A. Replace <CALL spam> with self.spam()",
        "correct": false
      },
      {
        "text": "B. Replace <CALL spam> with self.spam(self)",
        "correct": false
      },
      {
        "text": "C. Replace <CALL ham> with a.ham()",
        "correct": false
      },
      {
        "text": "D. Replace <CALL ham> with a.ham(a)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": ">>> class Spam: pass >>> hasattr(Spam(), 'ham') E.  SyntaxError: invalid syntax Correct Answer: A Section: (none) https://docs.python.org/3/library/functions.html#ha sattr ",
    "code": "",
    "answers": [
      {
        "text": "A. False",
        "correct": false
      },
      {
        "text": "B. AttributeError: 'Spam' object has no attribute 'h am'",
        "correct": false
      },
      {
        "text": "C. TypeError: hasattr(): attribute must be type",
        "correct": false
      },
      {
        "text": "D. NameError: name 'hasattr' is not defined",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select the choices which will return TRUE? class Spam: ham = 36 spam = Spam() E. spam.hasattr('ham') Correct Answer: AB Section: (none) >>> class Spam: ...        ham = 36 >>> spam = Spam() >>> hasattr(spam, 'ham') True >>> hasattr(Spam, 'ham') True >>> hasattr('Spam', 'ham') False >>> hasattr('spam', 'ham') False >>> spam.hasattr('ham') AttributeError: 'Spam' object has no attribute 'has attr' ",
    "code": "",
    "answers": [
      {
        "text": "A. hasattr(spam, 'ham')",
        "correct": false
      },
      {
        "text": "B. hasattr(Spam, 'ham')",
        "correct": false
      },
      {
        "text": "C. hasattr('Spam', 'ham')",
        "correct": false
      },
      {
        "text": "D. hasattr('spam', 'ham')",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the option(s) below is/are valid given the  following code? class Spam: __ham, ham = '__ham', 'ham' pass eggs = __eggs s = Spam() <<< INSERT CODE HERE >>> Correct Answer: ACE Section: (none) >>> class Spam: ...      __ham, ham = '__ham', 'ham' ...           pass ...      eggs = __eggs >>> s = Spam() Spam AttributeError: 'Spam' object has no attribute '__n ame__' __eggs AttributeError: 'str' object has no attribute '__na me__' __eggs AttributeError: 'str' object has no attribute '__na me__' ",
    "code": "def __eggs(self):\nA. print(Spam.__name__)\nB. print(s.__name__)\nC. print(s._Spam__eggs.__name__)\nD. print(s._Spam__ham.__name__)\nE. print(s.eggs.__name__)\nF. print(s.ham.__name__)\n...      def __eggs(self):\n>>> print(Spam.__name__)\n>>> print(s.__name__)\n>>> print(s._Spam__eggs.__name__)\n>>> print(s._Spam__ham.__name__)\n>>> print(s.eggs.__name__)\n>>> print(s.ham.__name__)\n",
    "answers": [],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the option(s) below are valid given the fo llowing code? class Spam: __ham, ham = '__ham', 'ham' pass eggs = __eggs s = Spam() <<< INSERT CODE HERE >>> Correct Answer: BCDE Section: (none) >>> class Spam: ...        __ham, ham = '__ham', 'ham' ...          pass ...       eggs = __eggs >>> s = Spam() >>> __module__ NameError: name '__module__' is not defined >>> Spam.__module__ '__main__' >>> s._Spam__eggs.__module__ '__main__' >>> s.eggs.__module__ '__main__' >>> s.__module__ '__main__' >>> s.ham.__module__ AttributeError: 'str' object has no attribute '__mo dule__' ",
    "code": "def __eggs(self):\nA. print(__module__)\nB. print(Spam.__module__)\nC. print(s._Spam__eggs.__module__)\nD. print(s.eggs.__module__)\nE. print(s.__module__)\nF. print(s.ham.__module__)\n...       def __eggs(self):\n",
    "answers": [],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the option(s) below are valid given the fo llowing code? class Spam: __ham, ham = '__ham', 'ham' pass eggs = __eggs s = Spam() <<< INSERT CODE HERE >>> Correct Answer: BDE Section: (none) >>> class Spam: ...       __ham, ham = '__ham', 'ham' ...       eggs = __eggs >>> s = Spam() >>> __bases__ NameError: name '__bases__' is not defined >>> Spam.__bases__ (<class 'object'>,) >>> s._Spam__eggs.__bases__ AttributeError: 'function' object has no attribute '__bases__' >>> type(s.eggs).__bases__ (<class 'object'>,) >>> type(s).__bases__ (<class 'object'>,) >>> s.ham.__bases__ AttributeError: 'str' object has no attribute '__ba ses__' ",
    "code": "def __eggs(self):\nA. print(__bases__)\nB. print(Spam.__bases__)\nC. print(s._Spam__eggs.__bases__)\nD. print(type(s.eggs).__bases__)\nE. print(type(s).__bases__)\nF. print(s.ham.__bases__)\n...       def __eggs(self): ...           pass\n",
    "answers": [],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Eggs: class Ham(Eggs): class Spam(Ham): pass s = Spam() E. TypeError: __init__() takes 1 positional argument  but 0 were given Correct Answer: B Section: (none) Spam() will executes the first __init__() it finds in the class method resolution order. >>> class Eggs: >>> class Ham(Eggs): >>> class Spam(Ham): ...         pass >>> s = Spam() Ham >>> Spam.__mro__ # method resolution order (<class '__main__.Spam'>, <class '__main__.Ham'>, < class '__main__.Eggs'>, <class 'object'>) >>> s.__init__.__qualname__        # __init__ assoc iated with Spam 'Ham.__init__' ",
    "code": "def __init__(self):\nprint('Eggs', end=' ')\ndef __init__(self):\nprint('Ham', end=' ')\n...         def __init__(self):\n...                print('Eggs', end=' ')\n...         def __init__(self):\n...                print('Ham', end=' ')\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. Ham",
        "correct": false
      },
      {
        "text": "C. Eggs",
        "correct": false
      },
      {
        "text": "D. Ham Eggs",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Eggs: class Spam(Ham, Eggs): pass s = Spam() E. TypeError: __init__ takes 1 positional argument b ut 0 were given Correct Answer: B Section: (none) Spam() will executes the first __init__() it finds in the class method resolution order. >>> class Ham: >>> class Eggs: >>> class Spam(Ham, Eggs): ...        pass >>> s = Spam() Ham >>> Spam.__mro__ # method resolution order (<class '__main__.Spam'>, <class '__main__.Ham'>, < class '__main__.Eggs'>, <class 'object'>) >>> s.__init__.__qualname__          # __init__ ass ociated with Spam 'Ham.__init__' ",
    "code": "class Ham:     def __init__(self):\nprint('Ham', end=' ')\ndef __init__(self, end=' '):\nprint('Eggs')\n...        def __init__(self):\n...            print('Ham', end=' ')\n...        def __init__(self, end=' '):\n...            print('Eggs')\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. Ham",
        "correct": false
      },
      {
        "text": "C. Eggs",
        "correct": false
      },
      {
        "text": "D. Ham Eggs",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select the choices which will return TRUE? class X: pass class Y: pass class Z(X, Y): pass x, y, z = X(), Y(), Z() E. isinstance(z, X, Y) Correct Answer: BC Section: (none) https://docs.python.org/3/library/functions.html#is instance ",
    "code": "",
    "answers": [
      {
        "text": "A. isinstance(X, z) and isinstance(Y, z)",
        "correct": false
      },
      {
        "text": "B. isinstance(z, X) and isinstance(z, Y)",
        "correct": false
      },
      {
        "text": "C. isinstance(z, (list, X, Y))",
        "correct": false
      },
      {
        "text": "D. isinstance((list, X, Y), z)",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "Which option will return True given the following c ode? >>> class A(object): pass >>> class B(object): pass >>> class C(object): pass >>> class D(object): pass >>> class E(object): pass >>> class K1(A,B,C): pass >>> class K2(D,B,E): pass >>> class K3(D,A): pass >>> k = K3() E. isinstance(k, (list, A, B, C, D, E)) Correct Answer: ABCE Section: (none) >>> isinstance(k, K3) True >>> isinstance(k, D) True >>> isinstance(k, (list, K2, K3)) True >>> isinstance(k, (list, K1, K2)) False >>> isinstance(k, (list, A, B, C, D, E)) True ",
    "code": "",
    "answers": [
      {
        "text": "A. isinstance(k, K3)",
        "correct": false
      },
      {
        "text": "B. isinstance(k, D)",
        "correct": false
      },
      {
        "text": "C. isinstance(k, (list, K2, K3))",
        "correct": false
      },
      {
        "text": "D. isinstance(k, (list, K1, K2))",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select which option contains the correct function n ame for the following generator? class Spam: self.s = p self.i = 0 return self if self.i == len(self.s): raise StopIteration v = self.s[self.i] self.i += 1 return v E. 1=__init__, 2=__generator__, 3=__next__ Correct Answer: A Section: (none) https://docs.python.org/3/library/stdtypes.html#gen erator-types ",
    "code": "def <<Replace 1>>(self, p=\"\"):\ndef <<Replace 2>>(self):\ndef <<Replace 3>>(self):\n",
    "answers": [
      {
        "text": "A. 1=__init__, 2=__iter__, 3=__next__",
        "correct": false
      },
      {
        "text": "B. 1=__init__, 2=__iterator__, 3=__next__",
        "correct": false
      },
      {
        "text": "C. 1=__init__, 2=__iterate__, 3=__next__",
        "correct": false
      },
      {
        "text": "D. 1=__init__, 2=__pop__, 3=__push__",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select the choices to invoke the constructor of Spa m and assign the instance to s class Spam: self.ham = v + 1 E. AttributeError: 'Spam' object has no attribute 'h am' Correct Answer: AB Section: (none) >>> class Spam: ...           self.ham = v + 1 >>> s = Spam()                 # valid >>> s = Spam(10)              # valid >>> del s                           # unset previou s assignment >>> s = Spam(s, 10) NameError: name 's' is not defined >>> del s                           # unset previou s assignment >>> s = Spam.__init__(s) NameError: name 's' is not defined ",
    "code": "def __init__(self, v=0):\n...        def __init__(self, v=0):\n",
    "answers": [
      {
        "text": "A. s = Spam()",
        "correct": false
      },
      {
        "text": "B. s = Spam(10)",
        "correct": false
      },
      {
        "text": "C. s = Spam(s, 10)",
        "correct": false
      },
      {
        "text": "D.  s = Spam.__init__(s)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "How do you instantiate class Spam of the code below ? class Spam: self.bar = 0 Correct Answer: B Section: (none) Often, the first argument of a method is called sel f. This is nothing more than a convention: the name  self has absolutely no special meaning to Python. Note, also, there is no need to supply the self argument with a parameter. ",
    "code": "def __init__(self):\n",
    "answers": [
      {
        "text": "A. You can't because there's an AttributeError in th e code",
        "correct": false
      },
      {
        "text": "B. spam = Spam()",
        "correct": false
      },
      {
        "text": "C. spam = Spam(None)",
        "correct": false
      },
      {
        "text": "D. spam = Spam(Spam)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? self.ham = v + 1 spam = Spam(1) Correct Answer: D Section: (none) Often, the first argument of a method is called sel f. This is nothing more than a convention: the name  self has absolutely no special meaning to Python. Note, also, there is no need to supply the self argument with a parameter. ",
    "code": "class Spam:     def __init__(self, v):\nprint(spam.ham)\n",
    "answers": [
      {
        "text": "A. AttributeError: 'Spam' object has no attribute 'h am'",
        "correct": false
      },
      {
        "text": "B. TypeError: __init__() takes 2 positional argument s but 1 were given",
        "correct": false
      },
      {
        "text": "C. 1",
        "correct": false
      },
      {
        "text": "D. 2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "class Spam:                          # 1 s = Spam()                             # 5 s.v0()                                     # 6 E. Line 9 Correct Answer: CD Section: (none) >>> class Spam: __main__ >>> s = Spam() >>> s.v0() __main__ Spam Spam AttributeError: 'Spam' object has no attribute '__n ame__' ",
    "code": "Select the line number from the options(s) which wi ll print Spam\ndef v0(self):                        # 2\nprint(__name__)             # 3\nprint(__name__)                      # 4\nprint(s.__class__.__name__)   # 7\nprint(Spam.__name__)            # 8\nprint(s.__name__)                   # 9\n...        def v0(self):\n...           print(__name__)\n>>> print(__name__)\n>>> print(s.__class__.__name__)\n>>> print(Spam.__name__)\n>>> print(s.__name__)\n",
    "answers": [
      {
        "text": "A. Line 3",
        "correct": false
      },
      {
        "text": "B. Line 4",
        "correct": false
      },
      {
        "text": "C. Line 7",
        "correct": false
      },
      {
        "text": "D. Line 8",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class X: ham = X.spam Correct Answer: C Section: (none) >>> class X: >>> ham = X.spam >>> ham.__qualname__ 'X.spam' >>> ham.__name__ 'spam' ",
    "code": "def spam(): pass\nprint(ham.__name__)\nhttps://docs.python.org/3/library/stdtypes.html#def inition.__name__\n...        def spam(): pass\n",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. X.spam",
        "correct": false
      },
      {
        "text": "C. spam",
        "correct": false
      },
      {
        "text": "D. ham",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? F=type('Food',(),{'remember2buy':'spam'}) E=type('Eggs',(F,),{'remember2buy':'eggs'}) G=type('GoodFood',(E,F),{}) E. AttributeError: type object 'Food' has no attribu te '__name__' Correct Answer: D Section: (none) https://www.python.org/download/releases/2.3/mro/ ",
    "code": "print(F.__name__, E.__name__, G.__name__)\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "C. F E G",
        "correct": false
      },
      {
        "text": "D. Food Eggs GoodFood",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? class Ham: class Spam(Ham): pass Correct Answer: C Section: (none) https://docs.python.org/3/reference/datamodel.html? #object.__str__ ",
    "code": "def __str__(self): return \"Ham\"\nprint(Spam())\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. <__main__.Spam object at 0x03100FD0> C. Ham",
        "correct": false
      },
      {
        "text": "D. TypeError: __str__() missing 1 required positiona l argument",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": ">>> class Spam: >>> s = Spam() E. >>> s.__repr__() Correct Answer: BD Section: (none) >>> s <__main__.Spam object at 0x03AB3F88> Spam >>> Spam() <__main__.Spam object at 0x03AB3FD0> >>> s.__str__() 'Spam' >>> s.__repr__() '<__main__.Spam object at 0x03AB3F88>' ",
    "code": "Which option will print Spam given the following co de?\n...        def __str__(self): return \"Spam\"\nB. >>> print(s)\n>>> print(s)\n",
    "answers": [
      {
        "text": "A. >>> s",
        "correct": false
      },
      {
        "text": "C. >>> Spam()",
        "correct": false
      },
      {
        "text": "D. >>> s.__str__()",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:Explanation:"
  },
  {
    "question": "What is the output of the following code? F=type('Food',(),{'remember2buy':'spam'}) E=type('Eggs',(F,),{'remember2buy':'eggs'}) G=type('GoodFood',(E,F),{}) Correct Answer: D Section: (none) https://www.python.org/download/releases/2.3/mro/ ",
    "code": "print(F.remember2buy, E.remember2buy, G.remember2bu y)\n",
    "answers": [
      {
        "text": "A. No Output",
        "correct": false
      },
      {
        "text": "B. Food Eggs GoodFood",
        "correct": false
      },
      {
        "text": "C. spam eggs",
        "correct": false
      },
      {
        "text": "D. spam eggs eggs",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "O = object class X(O): pass class Y(O): pass class A(X,Y): pass class B(Y,X): pass E. class Foo(B, Y): pass F. class Foo(Y, B): pass Correct Answer: CE Section: (none) https://www.python.org/download/releases/2.3/mro/ ",
    "code": "",
    "answers": [
      {
        "text": "A. class Foo(A, B): pass",
        "correct": false
      },
      {
        "text": "B. class Foo(B, A): pass",
        "correct": false
      },
      {
        "text": "C. class Foo(A, X): pass",
        "correct": false
      },
      {
        "text": "D. class Foo(X, A): pass",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the option(s) below are valid given the fo llowing code? O = object class F(O): pass class E(O): pass class D(O): pass class C(D,F): pass class B(D,E): pass class A(B,C): pass <<< INSERT CODE HERE >>> E. class Foo(B, C): pass F. class Foo(C, B): pass G. class Foo(C, B, E): pass H. class Foo(E, B, C): pass Correct Answer: ACEFG Section: (none) https://www.python.org/download/releases/2.3/mro/ ",
    "code": "",
    "answers": [
      {
        "text": "A. class Foo(A, B): pass",
        "correct": false
      },
      {
        "text": "B. class Foo(B, A): pass",
        "correct": false
      },
      {
        "text": "C. class Foo(A, C): pass",
        "correct": false
      },
      {
        "text": "D. class Foo(C, A): pass",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the options below are valid given the foll owing code? class A(object): pass class B(object): pass class C(object): pass class D(object): pass class E(object): pass class K1(A,B,C): pass class K2(D,B,E): pass class K3(D,A): pass <<< INSERT CODE HERE >>> E. class Foo(K3,K1,K2): pass F. class Foo(K3,K2,K1): pass Correct Answer: ABCDEF Section: (none) https://www.python.org/download/releases/2.3/mro/ ",
    "code": "",
    "answers": [
      {
        "text": "A. class Foo(K1,K2,K3): pass",
        "correct": false
      },
      {
        "text": "B. class Foo(K1,K3,K2): pass",
        "correct": false
      },
      {
        "text": "C. class Foo(K2,K1,K3): pass",
        "correct": false
      },
      {
        "text": "D. class Foo(K2,K3,K1): pass",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> [[c for c in range(r)] for r in range(3) if r ! = 0] E. SyntaxError: invalid syntax Correct Answer: A Section: (none) >>> [[c for c in range(r)] for r in range(3) if r ! = 0] [[0], [0, 1]] >>> [[c for c in range(r)] for r in [0, 1, 2] if r != 0] [[0], [0, 1]] >>> [[c for c in range(r)] for r in [1, 2]] [[0], [0, 1]] >>> [[c for c in range(1)], [c for c in range(2)]] [[0], [0, 1]] ",
    "code": "",
    "answers": [
      {
        "text": "A. [[0], [0, 1]]",
        "correct": false
      },
      {
        "text": "B. [[1], [1, 2]]",
        "correct": false
      },
      {
        "text": "C. [[0], [1]]",
        "correct": false
      },
      {
        "text": "D. [[1], [2]]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> [_ for _ in range(10) if not _%2 ] E. SyntaxError: invalid syntax Correct Answer: A Section: (none) >>> [_ for _ in range(10) if not _%2 ] [0, 2, 4, 6, 8] >>> # odd numbers are removed. not _%2 are numbers without remainder when divided by 2 >>> [_ for _ in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] if n ot _%2] [0, 2, 4, 6, 8] >>> [_ for _ in [0, 2, 4, 6, 8]] [0, 2, 4, 6, 8] ",
    "code": "",
    "answers": [
      {
        "text": "A. [0, 2, 4, 6, 8]",
        "correct": false
      },
      {
        "text": "B. [2, 4, 6, 8, 10]",
        "correct": false
      },
      {
        "text": "C. [1, 3, 5, 7, 9]",
        "correct": false
      },
      {
        "text": "D. [0, 1, 3, 4, 5, 6, 7, 8, 9]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> [False for i in range(3)] E. SyntaxError: invalid syntax Correct Answer: D Section: (none) Same as add False 3 times in the list ",
    "code": "",
    "answers": [
      {
        "text": "A. []",
        "correct": false
      },
      {
        "text": "B. [False]",
        "correct": false
      },
      {
        "text": "C. [0, 1, 2]",
        "correct": false
      },
      {
        "text": "D. [False, False, False]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> [i for i in range(1)][-1] E. None Correct Answer: D Section: (none) >>> [i for i in range(1)] [0] >>> [0][-1] 0 ",
    "code": "",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. []",
        "correct": false
      },
      {
        "text": "C. [0]",
        "correct": false
      },
      {
        "text": "D. 0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> len([[c for c in range(r)] for r in range(3)]) Correct Answer: B Section: (none) [[], [0], [0, 1]] >>> [[c for c in range(r)] for r in [0, 1, 2]] [[], [0], [0, 1]] >>> [[c for c in range(0)], [c for c in range(1)], [c for c in range(2)]] [[], [0], [0, 1]] ",
    "code": "",
    "answers": [
      {
        "text": "A. 2",
        "correct": false
      },
      {
        "text": "B. 3",
        "correct": false
      },
      {
        "text": "C. TypeError: len() takes exactly one argument (2 gi ven)",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference: >>> [[c for c in range(r)] for r in range(3)]"
  },
  {
    "question": "Which option will produce a non-empty list? E. lst = [i for i in range(0, -5)] Correct Answer: AD Section: (none) Which option will produce a non-empty list? [X] lst = [i for i in range(1, 5)] [ ] lst = [i for i in range(5, 1)] [ ] lst = [i for i in range(-1, -5)] [X] lst = [i for i in range(-5, -1)] [ ] lst = [i for i in range(0, -5)] >>> [i for i in range(1, 5)] [1, 2, 3, 4] >>> [i for i in range(5, 1)] [] >>> [i for i in range(-1, -5)] [] >>> [i for i in range(-5, -1)] [-5, -4, -3, -2] >>> [i for i in range(0, -5)] [] ",
    "code": "",
    "answers": [
      {
        "text": "A. lst = [i for i in range(1, 5)]",
        "correct": false
      },
      {
        "text": "B. lst = [i for i in range(5, 1)]",
        "correct": false
      },
      {
        "text": "C. lst = [i for i in range(-1, -5)]",
        "correct": false
      },
      {
        "text": "D. lst = [i for i in range(-5, -1)]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:Explanation:"
  },
  {
    "question": "What is the output of the following code? spam = [x * x for x in range(5)] del spam[spam[2]] Correct Answer: A Section: (none) >>> spam = [x * x for x in range(5)] >>> spam                      # [0*0, 1*1, 2*2, 3*3 , 4*4] [0, 1, 4, 9, 16] >>> spam[spam[2]]        # spam[spam[2] = 4] == spa m[4] 16 >>> del spam[spam[2]]   # removes [0, 1, 4, 9, (16)  <- remove] QUESTION 154 What is the output of the following code? x = [_ for _ in range(10)] del x[0:-2] E. [2, 3, 4, 5, 6, 7, 8, 9] F. [9, 8, 7, 6, 5, 4, 3, 2] Correct Answer: A Section: (none) >>> x = [_ for _ in range(10)] >>> x [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] >>> x[0:-2] [0, 1, 2, 3, 4, 5, 6, 7] >>> del x[0:-2]            # [(0, 1, 2, 3, 4, 5, 6,  7) <- remove, 8, 9] ",
    "code": "print(spam)\nprint(x)\n",
    "answers": [
      {
        "text": "A. [0, 1, 4, 9]",
        "correct": false
      },
      {
        "text": "B. IndexError: list index out of range",
        "correct": false
      },
      {
        "text": "C. TypeError: range() takes exactly 2 arguments (1 g iven)",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "A. [8, 9]",
        "correct": false
      },
      {
        "text": "B. [9, 8]",
        "correct": false
      },
      {
        "text": "C. [0, 1, 2, 3, 4, 5, 6, 7]",
        "correct": false
      },
      {
        "text": "D. [7, 6, 5, 4, 3, 2, 1, 0]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> [i // i for i in range(0,3)] Correct Answer: D Section: (none) >>> [i for i in range(0,3)] [0, 1, 2] >>> [i // i for i in range(0,3)] # [0//0 <- Error, 1//1, 2//2] ZeroDivisionError: integer division or modulo by ze ro ",
    "code": "",
    "answers": [
      {
        "text": "A. [0, 1, 1]",
        "correct": false
      },
      {
        "text": "B. [1, 1]",
        "correct": false
      },
      {
        "text": "C. [0, 1, 2]",
        "correct": false
      },
      {
        "text": "D. ZeroDivisionError: integer division or modulo by zero",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> [2 ** x for x in range(5)] Correct Answer: B Section: (none) >>> [x for x in range(5)] [0, 1, 2, 3, 4] >>> [2 ** x for x in range(5)] # [2**0, 2**1, 2**2,  2**3, 2**4] [1, 2, 4, 8, 16] ",
    "code": "",
    "answers": [
      {
        "text": "A. [0, 2, 4, 6, 8]",
        "correct": false
      },
      {
        "text": "B. [1, 2, 4, 8, 16]",
        "correct": false
      },
      {
        "text": "C. [2, 4, 6, 8, 10]",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "What is the output of the following code? spam = [[x for x in range(4)] for y in range(4)] for r in range(4): for c in range(4): spam[r][c] += 5 Correct Answer: B Section: (none) >>> spam = [[x for x in range(4)] for y in range(4) ] >>> spam [[0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2 , 3]] >>> for r in range(4):           # This loops itera tes over the elements ...        for c in range(4):      # and adds 5 to all values ...            spam[r][c] += 5 >>> spam [[5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7 , 8]] ",
    "code": "print(spam)\n",
    "answers": [
      {
        "text": "A. [[5, 6, 7, 8], [5, 6, 7, 8]]",
        "correct": false
      },
      {
        "text": "B. [[5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8], [5, 6,  7, 8]]",
        "correct": false
      },
      {
        "text": "C. Invalid Syntax",
        "correct": false
      },
      {
        "text": "D. TypeError: 'list' object does not support item as signment",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "l = [[i for i in range(2)] for i in range(2)] for i in range(2): if l[0][i] % l[1][i] == 0: Correct Answer: A Section: (none) >>> [[i for i in range(2)] for i in range(2)] [[0, 1], [0, 1]] ZeroDivisionError: integer division or modulo by ze ro ",
    "code": "How many stars will the following code print?\nprint('*')\n>>> l[0][0] % l[1][0] # 0 % 0 results ZeroDivisionE rror no stars printed\n",
    "answers": [
      {
        "text": "A. 0",
        "correct": false
      },
      {
        "text": "B. 1",
        "correct": false
      },
      {
        "text": "C. 2",
        "correct": false
      },
      {
        "text": "D. 4",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option is a valid definition of a lambda assi gned to f that adds the parameter x and y? Correct Answer: AD Section: (none) https://docs.python.org/3/reference/expressions.htm l#lambda >>> (lambda x, y : x + y)(10, 20) 30 >>> (lambda (x, y):(x + y))(10, 20) SyntaxError: invalid syntax >>> (lambda (x, y): x + y)(10, 20) SyntaxError: invalid syntax >>> (lambda x, y : (x + y))(10, 20) 30 ",
    "code": "",
    "answers": [
      {
        "text": "A. f = lambda x, y : x + y B. f = lambda (x, y):(x + y)",
        "correct": false
      },
      {
        "text": "C. f = lambda (x, y): x + y",
        "correct": false
      },
      {
        "text": "D. f = lambda x, y : (x + y)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? f = lambda x: 10 Correct Answer: B Section: (none) Lambda expression returns 10 no matter what paramet er is passed ",
    "code": "print(f(20))\n",
    "answers": [
      {
        "text": "A. 0",
        "correct": false
      },
      {
        "text": "B. 10",
        "correct": false
      },
      {
        "text": "C. 20",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? func = lambda x: return x Correct Answer: D Section: (none) Lambda expects an expression after the parameter li st. return is a statement not an expression. ",
    "code": "print(func(10))\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. 10",
        "correct": false
      },
      {
        "text": "C. NameError: name 'x' is not defined",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> (lambda x: assert x != 2)(2) A. No output Correct Answer: D Section: (none) Lambda expects an expression after the parameter li st. assert is a statement not an expression. ",
    "code": "",
    "answers": [
      {
        "text": "B. AssertionError",
        "correct": false
      },
      {
        "text": "C. NameError: name 'x' is not defined",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? a, b = 10, 20 (lambda: b, lambda: a)[a < b]() Correct Answer: A Section: (none) (lambda: b, lambda: a) or (20, 10) is a tuple. The first item can be accessed by index 0 or False and the 2nd item with 1 or True. >>> a, b = 10, 20 >>> (lambda: b)(),(lambda: a)() (20, 10) >>> (20, 10)[False] 20 >>> (20, 10)[True] 10 >>> (20, 10)[a < b] 10 ",
    "code": "",
    "answers": [
      {
        "text": "A. 10",
        "correct": false
      },
      {
        "text": "B. 20",
        "correct": false
      },
      {
        "text": "C. TypeError: tuple indices must be integers or slic es",
        "correct": false
      },
      {
        "text": "D. Invalid Syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? spam = lambda x, f: x + f(x) Correct Answer: B Section: (none) >>> (lambda x: x * x)(2)    # ( x=2 ) * ( x=2 ) = 4 4 >>> (lambda x: x + 3)(2)   # ( x=2 ) + 3 = 5 5>>> 2 + 4, 2 + 5               # x=2 +( f(2)=4 ) ==  6, x=2 + ( f(2)=5 ) == 7 6  7 ",
    "code": "print(spam(2, lambda x: x * x), end=' ')\nprint(spam(2, lambda x: x + 3))\n",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. 6 7",
        "correct": false
      },
      {
        "text": "C. 4 5",
        "correct": false
      },
      {
        "text": "D. 6 10",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> list(map(lambda x: x*2, range(3))) Correct Answer: B Section: (none) https://docs.python.org/3/library/functions.html#ma p >>> list(map(lambda x: x*2, range(3))) # range(3) =  [0, 1, 2] [0, 2, 4] >>> # map lambda x*2 to every item in the iterable = [0*2, 1*2, 2*2] >>> list(map(lambda x: x*2, [0, 1, 2])) [0, 2, 4] >>> list([0, 2, 4]) [0, 2, 4] ",
    "code": "",
    "answers": [
      {
        "text": "A. [0, 1, 2]",
        "correct": false
      },
      {
        "text": "B. [0, 2, 4]",
        "correct": false
      },
      {
        "text": "C. [[0,0], [1,2], [2,4]]",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> list(map(lambda x: x+10, [1, 2, 3])) E. [{11:[1, 2, 3]},{12:[1, 2, 3]},{13:[1, 2, 3]}] F. Invalid Syntax Correct Answer: A Section: (none) https://docs.python.org/3/library/functions.html#ma p >>> # map lambda x+10 to every item in the iterable  = [1+10, 2+10, 3+10] >>> list(map(lambda x: x+10, [1, 2, 3])) [11, 12, 13] >>> list([11, 12, 13]) [11, 12, 13] ",
    "code": "",
    "answers": [
      {
        "text": "A. [11, 12, 13]",
        "correct": false
      },
      {
        "text": "B. [11, 12, 13, 1, 2, 3]",
        "correct": false
      },
      {
        "text": "C. [[11, 12, 13],[1, 2, 3]]",
        "correct": false
      },
      {
        "text": "D. [{11:1},{12:2},{13:3}]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> list(filter(lambda x: x%2, [1, 2, 3, 4, 5, 6, 7 , 8, 9])) E. [0, 1, 0, 1, 0, 1, 0, 1, 0] Correct Answer: B Section: (none) https://docs.python.org/3/library/functions.html#fi lter >>> # check lambda x%2 to every item in the iterabl e >>> # [1%2, 2%2, 3%2, 4%2, 5%2, 6%2, 7%2, 8%2, 9%2] >>> # remove items the evaluates to False or 0 >>> # [1, 0, 1, 0, 1, 0, 1, 0, 1] >>> list(filter(lambda x: x%2, [1, 2, 3, 4, 5, 6, 7 , 8, 9])) [1, 3, 5, 7, 9] ",
    "code": "",
    "answers": [
      {
        "text": "A. [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "correct": false
      },
      {
        "text": "B. [1, 3, 5, 7, 9]",
        "correct": false
      },
      {
        "text": "C. [2, 4, 6, 8] D. [1, 0, 1, 0, 1, 0, 1, 0, 1]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option is True about closures? E. closures have access to global variables F. closures can define and modify nonlocal variables G. closures are not allowed to define nonlocal varia bles Correct Answer: ACEF Section: (none) A closure is a nested function which has access to a free variable from an enclosing function that has finished its execution. Three characteristics of a Python closure are: \u25cf it is a nested function \u25cf it has access to a free variable in outer scope \u25cf it is returned from the enclosing function A free variable is a variable that is not bound in the local scope. In order for closures to work with immutable variables such as numbers and strings, we  have to use the nonlocal keyword. Python closures help avoiding the usage of global v alues and provide some form of data hiding but can access them. They are used in Python decorators. ",
    "code": "",
    "answers": [
      {
        "text": "A. closures is always nested inside a function",
        "correct": false
      },
      {
        "text": "B. closures can be defined outside a function",
        "correct": false
      },
      {
        "text": "C. closures have access to a free variable in outer scope",
        "correct": false
      },
      {
        "text": "D. closures have no access to variables in outer sco pe",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? x = 'x' y = 'y' return spam() z = 'z' if __name__ == \"__main__\": main() Correct Answer: B Section: (none) >>> x = 'x'                                     #1 x = 'x' ...        y = 'y'                                 #6 y = 'y' ...            return                              #10 return ...        spam()                                #7  execute spam() >>> z = 'z'                                     #2 z = 'z' >>> if __name__ == \"__main__\":    #3 evaluates to T rue ...        main()                                #4  execute main() ",
    "code": "def main():\ndef spam():\nprint(x, y, z)\n>>> def main():                              #5 mai n()\n...        def spam():                         #8 s pam()\n...            print(x, y, z)                    #9  print x, y, z\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. x y z C. NameError: name 'z' is not defined",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? return x * y return ham f = spam(2) Correct Answer: C Section: (none) 5 | f = spam(2) >>> Call to spam, line 1 .......... x = 2 4 | return ham <<< Return value from spam: ham 5 | f = spam(2) .......... f = ham >>> Call to ham in line 5 .............. y = 3 .............. x = 2 3 | return x * y <<< Return value from ham: 6 6 ",
    "code": "def spam(x):\ndef ham(y):\nprint(f(3))\n1 | def spam(x):\n1 | def spam(x):\n2 | def ham(y):\n6 | print(f(3))\n2 | def ham(y):\n",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. 0",
        "correct": false
      },
      {
        "text": "C. 6",
        "correct": false
      },
      {
        "text": "D. NameError: name 'y' is not defined",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? return x + y + z return ham for i in range(3): eggs = spam(i) E. NameError: name z is not defined Correct Answer: A Section: (none) ",
    "code": "def spam(x):     y = 2\ndef ham(z):\nprint(eggs(i+3), end=' ')\n",
    "answers": [
      {
        "text": "A. 5 7 9",
        "correct": false
      },
      {
        "text": "B. 6 8 10",
        "correct": false
      },
      {
        "text": "C. 5 6 7",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? y = 2 return lambda z: x + y + z for i in range(3): eggs = spam(i) E. NameError: name z is not defined Correct Answer: A Section: (none) ",
    "code": "def spam(x):\nprint(eggs(i+3), end=' ')\n",
    "answers": [
      {
        "text": "A. 5 7 9",
        "correct": false
      },
      {
        "text": "B. 6 8 10",
        "correct": false
      },
      {
        "text": "C. 5 6 7",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? x = 100 a = [x, 200, 300] x = 500 a[0] = x return spam() if __name__ == \"__main__\": main() A. 100 [100, 200, 300] E. NameError: name x is not defined Correct Answer: B Section: (none) 2 | x = 100 3 | a = [x, 200, 300] .......... a = [100, 200, 300] .......... len(a) = 3 8 | spam() >>> Call to spam, line 4 .......... a = [100, 200, 300] .......... len(a) = 3 5 | x = 500 6 | a[0] = x .............. a = [500, 200, 300] 7 | return <<< Return value from spam: None 8 | spam() .......... a = [500, 200, 300] 100 [500, 200, 300] ",
    "code": "def main():\ndef spam():\nprint(x, a)\n1 | def main():\n4 | def spam():\n4 | def spam():\n9 | print(x, a)\n",
    "answers": [
      {
        "text": "B. 100 [500, 200, 300]",
        "correct": false
      },
      {
        "text": "C. 500 [500, 200, 300]",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select the choice(s) which is TRUE? import sys                                  # 1 temp = sys.stdout                       # 2 sys.stdout = open('spam.txt', 'w')  # 3 sys.stdout.close()                        # 5 sys.stdout = temp                       # 6 World\" and \"Good Bye\" E. io.UnsupportedOperation in line 3 Correct Answer: B Section: (none) >>> import sys >>> temp = sys.stdout >>> sys.stdout.close() ",
    "code": "print(\"Hello World\")                      # 4\nprint(\"Good Bye\")                        # 7\n>>> sys.stdout = open('spam.txt', 'w') # assign ALL  print to write on spam.txt\n>>> print(\"Hello World\")                     # writ e Hello World on spam.txt\n>>> sys.stdout = temp                      # revert  ALL print back to screen >>> print(\"Good Bye\")                       # print  Good Bye on screen\n",
    "answers": [
      {
        "text": "A. An empty file 'spam.txt' will be created and the screen will display the text \"Hello World\" and \"Goo d Bye\"",
        "correct": false
      },
      {
        "text": "B. A file 'spam.txt' containing \"Hello World\" will b e created and the screen will display the text \"Goo d Bye\"",
        "correct": false
      },
      {
        "text": "C. A file 'spam.txt' containing \"Hello World\" will b e created and the screen will display the text \"Hel lo",
        "correct": false
      },
      {
        "text": "D. No file will be created and the screen will displ ay the text \"Hello World\" and \"Good Bye\"",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What will open(\"spam.txt\", \"rt\") return? E. TypeError: open() argument 2 must be int, not str Correct Answer: D Section: (none) https://docs.python.org/3/library/functions.html?#o pen ",
    "code": "",
    "answers": [
      {
        "text": "A. Numeric status code",
        "correct": false
      },
      {
        "text": "B. The entire content of 'spam.txt'",
        "correct": false
      },
      {
        "text": "C. String filename",
        "correct": false
      },
      {
        "text": "D. File object",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "How do you use the BytesIO class in the io package imported on the following code? import io E. spam = io::BytesIO() Correct Answer: B Section: (none) https://docs.python.org/3/library/io.html#io.BytesI O ",
    "code": "",
    "answers": [
      {
        "text": "A. spam = BytesIO()",
        "correct": false
      },
      {
        "text": "B. spam = io.BytesIO()",
        "correct": false
      },
      {
        "text": "C. spam = io->BytesIO()",
        "correct": false
      },
      {
        "text": "D. spam = io:BytesIO()",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What functions can you call to read the Buffered St ream on the following code? import io spam = io.BytesIO() spam.write(\"Hello, world!\".encode('ascii')) ham = spam.getbuffer() spam.seek(0) E. spam.read(ham) Correct Answer: ABCD Section: (none) https://docs.python.org/3/library/io.html#buffered- streams ",
    "code": "",
    "answers": [
      {
        "text": "A. spam.read()",
        "correct": false
      },
      {
        "text": "B. spam.read1()",
        "correct": false
      },
      {
        "text": "C. spam.readinto(ham)",
        "correct": false
      },
      {
        "text": "D. spam.readinto1(ham)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Choose all correct ways to create a bytearray bar? A. bar = b'confuse the cat' E. bar = bytearray(b'confuse the cat') Correct Answer: BCE Section: (none) https://docs.python.org/3/library/stdtypes.html#byt earray ",
    "code": "",
    "answers": [
      {
        "text": "B. bar = bytearray()",
        "correct": false
      },
      {
        "text": "C. bar = bytearray(range(10))",
        "correct": false
      },
      {
        "text": "D. bar = bytearray('confuse the cat')",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the code? for spam in open('spam.txt', 'rt'): given spam.txt This is LINE 1 This is LINE 2 E. TypeError: 'TextIOWrapper' object is not iterable Correct Answer: D Section: (none) Prints This is LINE 1 and This is LINE 2 in separat e lines because there is a newline character that w as read in the file. ",
    "code": "print(spam, end='')\nA. Nothing is printed\nB. This is LINE 1 is printed in an infinite loop\nC. This is LINE 1 This is LINE 2 is printed in a sin gle line\nD. This is LINE 1 and This is LINE 2 is printed in s eparate lines\n",
    "answers": [],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What are the valid access modes available for the o pen() function? E. br, bw, ba F. br+, bw+, ba+ G. r+b, w+b, a+b Correct Answer: ABCDG Section: (none) https://docs.python.org/3/library/functions.html?#o pen ",
    "code": "",
    "answers": [
      {
        "text": "A. r, w, a",
        "correct": false
      },
      {
        "text": "B. rb, wb, ab",
        "correct": false
      },
      {
        "text": "C. r+, w+, a+",
        "correct": false
      },
      {
        "text": "D. rb+, wb+, ab+",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option(s) are valid results of the following code if spam.txt does not exist? import sys, errno try: open(\"spam.txt\", \"r\") except: if sys.exc_info()[1].errno == errno.ENOENT: E. Error Line 3 F. Error Line 5 G. Error Line 6 Correct Answer: C Section: (none) 'r' open for reading (default), will raise errno.EN OENT or No such file or directory if the file does not exist. ",
    "code": "print(errno.errorcode[sys.exc_info()[1].err no])\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. 2",
        "correct": false
      },
      {
        "text": "C. ENOENT",
        "correct": false
      },
      {
        "text": "D. No such file or directory",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option(s) are valid results of the following code if spam.txt does not exist? import sys, errno try: open(\"spam.txt\", \"x\") except: if sys.exc_info()[1].errno == errno.ENOENT: E. Error Line 3 F. Error Line 5 G. Error Line 6 Correct Answer: A Section: (none) 'x' open for exclusive creation, will not fail sinc e spam.txt does not exist. ",
    "code": "print(errno.errorcode[sys.exc_info()[1].err no])\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. 2",
        "correct": false
      },
      {
        "text": "C. ENOENT",
        "correct": false
      },
      {
        "text": "D. No such file or directory",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option(s) are valid results of the following code if spam.txt exist? import sys try: open(\"spam.txt\", \"x\") except: E. Error Line 5 Correct Answer: C Section: (none) 'x' open for exclusive creation, failing if the fil e already exists EEXIST - code 17 ENOENT (2): No such file or directory EIO (5): Input/output error EACCES (13): Permission denied EINVAL (22): Invalid argument ENOSPC (28): No space left on device EEXIST (17): File exists EAGAIN (11): Resource temporarily unavailable (ofte n used with non-blocking operations) EBADF (9): Bad file descriptor ",
    "code": "print(sys.exc_info()[1].errno)\n",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. invalid mode: 'x'",
        "correct": false
      },
      {
        "text": "C. 17 D. Error Line 3",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the option(s) below are valid calls given the code below? file = open('spam.txt', 'r+') file.close() <<< INSERT CODE HERE >>> E. file.write() Correct Answer: B Section: (none) >>> file = open('spam.txt', 'r+') >>> file.close() >>> file.close() >>> file.read() ValueError: I/O operation on closed file. >>> file.readline() ValueError: I/O operation on closed file. >>> file.write('X') ValueError: I/O operation on closed file. ",
    "code": "",
    "answers": [
      {
        "text": "A. No file operations are allowed after close()",
        "correct": false
      },
      {
        "text": "B. file.close()",
        "correct": false
      },
      {
        "text": "C. file.read()",
        "correct": false
      },
      {
        "text": "D. file.readline()",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the code? spam = open(\"spam.txt\", \"r\") given spam.txt This is LINE 1 This is LINE 2 This is LINE 3 Correct Answer: A Section: (none) https://docs.python.org/3/library/io.html#io.RawIOB ase.read ",
    "code": "print(spam.read(2))\nA. The first 2 characters Th is printed\nB. The first 2 lines This is LINE 1 and This is LINE  2 is printed\nC. The first 2 characters Th is skipped is is LINE 1 i s printed D. The 2nd line This is LINE 2 is printed\n",
    "answers": [],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option(s) will write \"Hello World\" on an open  file f? E. f.writelines([\"Hello World\"]) Correct Answer: ADE Section: (none) https://docs.python.org/3/library/io.html#i-o-base- classes ",
    "code": "F. f.print(\"Hello World\")\n",
    "answers": [
      {
        "text": "A. f.write(\"Hello World\")",
        "correct": false
      },
      {
        "text": "B. f.writeln(\"Hello World\")",
        "correct": false
      },
      {
        "text": "C. f.writeline(\"Hello World\")",
        "correct": false
      },
      {
        "text": "D. f.writelines(\"Hello World\")",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the result of the following code? with open('spam.txt', 'r+') as file: line = file.read() file.write(line) given spam.txt 12345 E. ValueError: I/O operation on closed file. Correct Answer: AE Section: (none) https://docs.python.org/3/tutorial/inputoutput.html #reading-and-writing-files ",
    "code": "",
    "answers": [
      {
        "text": "A. spam.txt will still contain 12345",
        "correct": false
      },
      {
        "text": "B. spam.txt will now contain 123451",
        "correct": false
      },
      {
        "text": "C. spam.txt will now contain 1234512345",
        "correct": false
      },
      {
        "text": "D. NameError: name 'line' is not defined",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option(s) are valid read on an open file f? E. f.readlines() F. f.readlines(1) Correct Answer: ABDEF Section: (none) https://docs.python.org/3/library/io.html#i-o-base- classes ",
    "code": "",
    "answers": [
      {
        "text": "A. f.read()",
        "correct": false
      },
      {
        "text": "B. f.read(1)",
        "correct": false
      },
      {
        "text": "C. f.readln()",
        "correct": false
      },
      {
        "text": "D. f.readline()",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the code? spam = open(\"spam.txt\", \"r\") given spam.txt This is LINE 1 This is LINE 2 This is LINE 3 Correct Answer: A Section: (none) https://docs.python.org/3/library/io.html#io.IOBase .readline ",
    "code": "print(spam.readline(2))\nA. The first 2 characters Th is printed\nB. The first 2 lines This is LINE 1 and This is LINE  2 is printed\nC. The first 2 characters Th is skipped is is LINE 1  is printed\nD. The 2nd line This is LINE 2 is printed\n",
    "answers": [],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> b'the quick brown fox'.translate(None, b'aeiou' ) E. the quick brown fox Correct Answer: B Section: (none) https://docs.python.org/3/library/stdtypes.html#byt earray.translate bytearray.translate(table, /, delete=b'') Return a copy of the bytes or bytearray object wher e all bytes occurring in the optional argument dele te are removed, and the remaining bytes have been mapped t hrough the given translation table, which must be a bytes object of length 256. You can use the bytes.maketrans() method to create a translation table. Set the table argument to None for translations tha t only delete characters ",
    "code": "",
    "answers": [
      {
        "text": "A. b'aeiou'",
        "correct": false
      },
      {
        "text": "B. b'th qck brwn fx'",
        "correct": false
      },
      {
        "text": "C. aeiou",
        "correct": false
      },
      {
        "text": "D. th qck brwn fx",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Python 3.11.4 REPL can be launched by which of the following option given the output of py -0? A. py E. py -3.11.4 F. py -3.11.4-64 Correct Answer: ABCD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "B. py -3",
        "correct": false
      },
      {
        "text": "C. py -3.11",
        "correct": false
      },
      {
        "text": "D. py -3.11-64",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? a, b = 10, 20 Correct Answer: A Section: (none) https://docs.python.org/3/reference/expressions.htm l#operator-precedence >>> a, b = 10, 20 >>> a < b and a or b 10 >>> # 10 < 20 and 10 or 20 >>> # True and 10 or 20 >>> # 10 or 20 ",
    "code": "print(a < b and a or b)\n",
    "answers": [
      {
        "text": "A. 10",
        "correct": false
      },
      {
        "text": "B. 20",
        "correct": false
      },
      {
        "text": "C. True",
        "correct": false
      },
      {
        "text": "D. Invalid Syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all valid variable names E. catch F. exception Correct Answer: BEF Section: (none) Keywords not allowed to be used as variable names >>> keyword.kwlist ['False', 'None', 'True', '__peg_parser__', 'and', 'as', 'assert', 'async', 'await', 'break', 'class',  'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lamb da', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] ",
    "code": "",
    "answers": [
      {
        "text": "A. is",
        "correct": false
      },
      {
        "text": "B. then",
        "correct": false
      },
      {
        "text": "C. elif",
        "correct": false
      },
      {
        "text": "D. pass",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "Select the values considered false. E. class with a __nonzero__() definition F. class with __len__() that returns integer 0 Correct Answer: ABCDEF Section: (none) https://docs.python.org/3/library/stdtypes.html#tru th-value-testing https://docs.python.org/2/reference/datamodel.html# object.__nonzero__ https://docs.python.org/2/reference/datamodel.html# object.__len__ ",
    "code": "",
    "answers": [
      {
        "text": "A. None",
        "correct": false
      },
      {
        "text": "B. False",
        "correct": false
      },
      {
        "text": "C. zero of any numeric type (0, 0L, 0.0, 0j)",
        "correct": false
      },
      {
        "text": "D. empty sequence ('', (), [])",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all valid bitwise operators E. ~ F. ^ Correct Answer: ABCDEF Section: (none) https://wiki.python.org/moin/BitwiseOperators ",
    "code": "",
    "answers": [
      {
        "text": "A. <<",
        "correct": false
      },
      {
        "text": "B. >>",
        "correct": false
      },
      {
        "text": "C. &",
        "correct": false
      },
      {
        "text": "D. |",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option(s) results in 12.34? E. None Correct Answer: BC Section: (none) 123400.0 >>> 1234e-2 12.34 >>> .1234e2 12.34 >>> .1234e-2 0.001234 ",
    "code": "",
    "answers": [
      {
        "text": "A. >>> 1234e2",
        "correct": false
      },
      {
        "text": "B. >>> 1234e-2",
        "correct": false
      },
      {
        "text": "C. >>> .1234e2",
        "correct": false
      },
      {
        "text": "D. >>> .1234e-2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference: >>> 1234e2"
  },
  {
    "question": "Select valid integer assignment for the variable sp am? E. spam = \\u0031 #The Unicode of 1 is U+0031 Correct Answer: BCD Section: (none) >>> type(1e0) <class 'float'> >>> type(0b1) <class 'int'> >>> type(0o1) <class 'int'> >>> type(0x1) <class 'int'> >>> type(\\u0031) SyntaxError: unexpected character after line contin uation character ",
    "code": "",
    "answers": [
      {
        "text": "A. spam = 1e0",
        "correct": false
      },
      {
        "text": "B. spam = 0b1",
        "correct": false
      },
      {
        "text": "C. spam = 0o1",
        "correct": false
      },
      {
        "text": "D. spam = 0x1",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> ['spam', 'ham'] * 2 Correct Answer: D Section: (none) List multiplication will duplicate the content by n  times. >>> ['spam'] * 2 ['spam', 'spam'] >>> ['spam', 'ham'] * 2 ['spam', 'ham', 'spam', 'ham'] ",
    "code": "",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. TypeError: unsupported operand type(s) for *: 'li st' and 'int'",
        "correct": false
      },
      {
        "text": "C. ['spamspam', 'hamham']",
        "correct": false
      },
      {
        "text": "D. ['spam', 'ham', 'spam', 'ham']",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> ('spam', ) * 2 E. ('spam', 'spam') Correct Answer: E Section: (none) Tuple multiplication will duplicate the content by n times. >>> ('spam',) * 2 ('spam', 'spam') >>> ('spam', 'ham') * 2 ('spam', 'ham', 'spam', 'ham') ",
    "code": "",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax B. TypeError: unsupported operand type(s) for *: 'tupl e' and 'int'",
        "correct": false
      },
      {
        "text": "C. 'spamspam'",
        "correct": false
      },
      {
        "text": "D. ('spamspam')",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> 1 - 2 / 3 // 4 + 5 Correct Answer: C Section: (none) https://docs.python.org/3/reference/expressions.htm l#operator-precedence >>> 1 - 2 / 3 // 4 + 5   #1  2 / 3=0.67 6.0 >>> 1 - 0.67 // 4 + 5   #2  0.67 // 4=0.0 6.0 >>> 1 - 0.0 + 5 6.0 ",
    "code": "",
    "answers": [
      {
        "text": "A. 4.0",
        "correct": false
      },
      {
        "text": "B. 5.0",
        "correct": false
      },
      {
        "text": "C. 6.0",
        "correct": false
      },
      {
        "text": "D. 7.0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> 1 // 2 + 1 / 2 Correct Answer: B Section: (none) https://docs.python.org/3/reference/expressions.htm l#operator-precedence >>> 1 // 2 + 1 / 2    #1 1//2=0 0.5 >>> 0 + 1 / 2          #2 1/2=0.5 0.5 >>> 0 + 0.5 0.5 ",
    "code": "",
    "answers": [
      {
        "text": "A. 0.0",
        "correct": false
      },
      {
        "text": "B. 0.5",
        "correct": false
      },
      {
        "text": "C. 0.75",
        "correct": false
      },
      {
        "text": "D. 1.0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> 1. /( 4. % 2.) Correct Answer: D Section: (none) https://docs.python.org/3/reference/expressions.htm l#operator-precedence >>> 1. /( 4. % 2.)   #1  4.%2.=0.0 ZeroDivisionError: float division by zero >>> 1. / (0.0) ZeroDivisionError: float division by zero ",
    "code": "",
    "answers": [
      {
        "text": "A. 0.5",
        "correct": false
      },
      {
        "text": "B. 0.0",
        "correct": false
      },
      {
        "text": "C. Syntax Error",
        "correct": false
      },
      {
        "text": "D. ZeroDivisionError",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? x = 3 while x > 0: x //= 2 Correct Answer: B Section: (none) 1 | x = 3 2 | while x > 0: 3 4 | x //= 2 .............. x = 1 2 | while x > 0: 1 4 | x //= 2 .............. x = 0 2 | while x > 0 ",
    "code": "print(x, end='')\n3 | print(x, end='')\n3 | print(x, end='')\n",
    "answers": [
      {
        "text": "A. 3",
        "correct": false
      },
      {
        "text": "B. 31",
        "correct": false
      },
      {
        "text": "C. 31.50",
        "correct": false
      },
      {
        "text": "D. Infinite Loop",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> -1 // 2 E. 0.5 F. 1.0 G. 1 Correct Answer: A Section: (none) // (floor division) operators yield the quotient of  their arguments. The numeric arguments are first c onverted to a common type. floor division of integers result s in an integer; the result is that of mathematical  division with the \u2018floor\u2019 function applied to the result. Di vision by zero raises the ZeroDivisionError excepti on. ",
    "code": "",
    "answers": [
      {
        "text": "A. -1 B. -1.0",
        "correct": false
      },
      {
        "text": "C. -0.5",
        "correct": false
      },
      {
        "text": "D. 0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? a, b = 0, 1 Correct Answer: B Section: (none) The ^ operator yields the bitwise XOR (exclusive OR ) of its arguments, which must be integers. Results  1 if arguments are not both 0 or not both 1. ",
    "code": "print(a ^ a, a ^ b, b ^ a, b ^ b)\n",
    "answers": [
      {
        "text": "A. 0 1 1 1",
        "correct": false
      },
      {
        "text": "B. 0 1 1 0",
        "correct": false
      },
      {
        "text": "C. 1 0 0 1",
        "correct": false
      },
      {
        "text": "D. 1 0 0 0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? t = True f = not t t = t or f f = t and f t, f = f, t E. Syntax Error Correct Answer: B Section: (none) t = True     #1 t=True f=NA f = not t     #2 t=True f=False t = t or f     #3  t=True f=False f = t and f   #4 t=True f=False t, f = f, t     #5 t=False t=True ",
    "code": "print(t, f)\nprint(t, f)    #6 prints False True\n",
    "answers": [
      {
        "text": "A. False False",
        "correct": false
      },
      {
        "text": "B. False True",
        "correct": false
      },
      {
        "text": "C. True False",
        "correct": false
      },
      {
        "text": "D. True True",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "spam = True Correct Answer: BD Section: (none) >>> spam = True True SyntaxError: invalid syntax True ",
    "code": "Select options which will print True based on the f ollowing code?\nA. print(spam = True)\nB. print(spam == True)\nC. print(spam === True)\nD. print(spam is True)\n>>> print(spam = True)\nTypeError: 'spam' is an invalid keyword argument fo r print()\n>>> print(spam == True)\n>>> print(spam === True)\n>>> print(spam is True)\n",
    "answers": [],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "spam = 1 Correct Answer: AE Section: (none) >>> spam = 1 True SyntaxError: invalid syntax SyntaxError: invalid syntax SyntaxError: invalid syntax True ",
    "code": "Select options which will print True based on the f ollowing code?\nA. print(spam != 0)\nB. print(spam !== 0)\nC. print(spam !=== 0)\nD. print(spam <> 0)\nE. print(spam is not 0)\n>>> print(spam != 0)\n>>> print(spam !== 0)\n>>> print(spam !=== 0)\n>>> print(spam <> 0)\n>>> print(spam is not 0)\n",
    "answers": [],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? a = 10 b = 20 E. 0 Correct Answer: B Section: (none) https://docs.python.org/3/reference/expressions.htm l#operator-precedence >>> a, b = 10, 20 >>> b < a > 0 or a > b and b > a or a < b True >>> # (20 < 10 > 0) or ( (10 > 20) and (20 > 10)) o r (10 < 20) >>> #      False       or (   False    and    True   )    or    True >>> # False or False or True ",
    "code": "c = b < a > 0 or a > b and b > a or a < b print(c)\n",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. True",
        "correct": false
      },
      {
        "text": "C. False",
        "correct": false
      },
      {
        "text": "D. 1",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "E. format Correct Answer: ABCD Section: (none) https://docs.python.org/3/library/functions.html#pr int ",
    "code": "Select all keyword argument of print()\n",
    "answers": [
      {
        "text": "A. sep",
        "correct": false
      },
      {
        "text": "B. end",
        "correct": false
      },
      {
        "text": "C. file",
        "correct": false
      },
      {
        "text": "D. flush",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? Correct Answer: A Section: (none) https://docs.python.org/3/library/functions.html#in t >>> int(10.10) 10 >>> int(\"10\", 10) 10 >>> int(\"10\", base=10) 10 >>> int(0o12) 10 >>> int(10) 10 ",
    "code": "1 print(int(10.10), end= \" \")\n2 print(int(\"10\", 10), end= \" \")\n3 print(int(\"10\", base=10), end= \" \")\n4 print(int(0o12), end= \" \")\n5 print(int(10))\n",
    "answers": [
      {
        "text": "A. 10 10 10 10 10",
        "correct": false
      },
      {
        "text": "B. TypeError: int() takes at most 1 argument (2 give n)",
        "correct": false
      },
      {
        "text": "C. TypeError: 'base' is an invalid keyword argument for int()",
        "correct": false
      },
      {
        "text": "D. Invalid syntax on Line 4 (0o12)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the code? E. ValueError: could not convert string to float in Li ne 4 F. ValueError: could not convert string to float in Li ne 5 Correct Answer: A Section: (none) https://docs.python.org/3/library/functions.html#fl oat >>> float('+1.23') 1.23 >>> float(' -12345\\n') -12345.0 >>> float('1e-003') 0.001 >>> float('+1E6') 1000000.0 >>> float('-Infinity') -inf ",
    "code": "1 print(float('+1.23'), end=\" \")\n2 print(float(' -12345\\n'), end=\" \")\n3 print(float('1e-003'), end=\" \")\n4 print(float('+1E6'), end=\" \")\n5 print(float('-Infinity'))\n",
    "answers": [
      {
        "text": "A. 1.23 -12345.0 0.001 1000000.0 -inf",
        "correct": false
      },
      {
        "text": "B. ValueError: could not convert string to float in Li ne 1",
        "correct": false
      },
      {
        "text": "C. ValueError: could not convert string to float in Li ne 2",
        "correct": false
      },
      {
        "text": "D. ValueError: could not convert string to float in Li ne 3",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What will call to output x/y/z*? x, y, z = \"x\", \"y\", \"z\" s = [x, y, z] t = x, y, z E. Syntax Error Correct Answer: AD Section: (none) x/y/z* ['x', 'y', 'z']* ('x', 'y', 'z')* x/y/z* ",
    "code": "A. print(x, y, z, sep='/', end=\"*\\n\")\nB. print(s, sep='/', end=\"*\\n\")\nC. print(t, sep='/', end=\"*\\n\")\nD. print('/'.join(s) + '*\\n')\n>>> print(x, y, z, sep='/', end=\"*\\n\")\n>>> print(s, sep='/', end=\"*\\n\")\n>>> print(t, sep='/', end=\"*\\n\")\n>>> print('/'.join(s) + '*\\n')\n",
    "answers": [],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> spam = ('S', 'P', 'A', 'M') >>> s, p, _, _ = spam >>> s 'S' >>> p 'P' >>> _ Correct Answer: C Section: (none) \"_\" is a special variable in most Python REPLs that  represents the result of the last expression evalu ated by the interpreter. e.g. >>> _, _ = ('A', 'M') >>> _ 'M' ",
    "code": "",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B.  'A'",
        "correct": false
      },
      {
        "text": "C. 'M'",
        "correct": false
      },
      {
        "text": "D. 'AM'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> for i in range(10): ...       pass >>> i Correct Answer: C Section: (none) https://docs.python.org/3/library/stdtypes.html#ran ge ",
    "code": "",
    "answers": [
      {
        "text": "A. NameError: name 'i' is not defined",
        "correct": false
      },
      {
        "text": "B. 0",
        "correct": false
      },
      {
        "text": "C. 9",
        "correct": false
      },
      {
        "text": "D. 10",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? total = 0 for i in range(1, 4) :     i += 2 total += i else: total += 100 E. SyntaxError: invalid syntax Correct Answer: A Section: (none) 1 | total = 0 2 | for i in range(1, 4) : .......... i = 1 3 | i += 2 .............. i = 3 4 | total += i .............. total = 3 2 | for i in range(1, 4) : .......... i = 2 3 | i += 2 .............. i = 4 4 | total += i .............. total = 7 2 | for i in range(1, 4) : .......... i = 3 3 | i += 2 .............. i = 5 4 | total += i .............. total = 12 2 | for i in range(1, 4) : 6 | total += 100 .............. total = 112 112 ",
    "code": "print(total)\n7 | print(total)\n",
    "answers": [
      {
        "text": "A. 112",
        "correct": false
      },
      {
        "text": "B. 12",
        "correct": false
      },
      {
        "text": "C. 108",
        "correct": false
      },
      {
        "text": "D. 8",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? for i in range(1, 4, 2): Correct Answer: B Section: (none) https://docs.python.org/3/library/stdtypes.html#ran ge 1 | for i in range(1, 4, 2): 1 1 | for i in range(1, 4, 2): .......... i = 3 3 ",
    "code": "print(i, end=' ')\n.......... i = 1 2 | print(i, end=' ')\n2 | print(i, end=' ')\n",
    "answers": [
      {
        "text": "A. TypeError: range expected at most 2 arguments, go t 3",
        "correct": false
      },
      {
        "text": "B. 1 3",
        "correct": false
      },
      {
        "text": "C. 1, 4, 2",
        "correct": false
      },
      {
        "text": "D. 1 2 3 4",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? x = { 'x': 1, 'y': 2} for e in x: Correct Answer: A Section: (none) Iterating a dictionary calls __iter__() which itera tes over the keys of a dictionary. e.g. Dictionary x contains the keys 'x' and 'y' that are both <class 'str'> ",
    "code": "print(e, type(e), end=' ')\n",
    "answers": [
      {
        "text": "A. x <class 'str'> y <class 'str'>",
        "correct": false
      },
      {
        "text": "B. 1 <class 'int'> 2 <class 'int'>",
        "correct": false
      },
      {
        "text": "C. ('x', 1) <class 'tuple'> ('y', 2) <class 'tuple'>",
        "correct": false
      },
      {
        "text": "D. 'x':1 <class 'iterable'> 'y':2 <class 'iterable'>",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? i = 0 total = 0 while i < 4 : i += 2 total += i else: total += 100 E. Syntax Error: invalid syntax Correct Answer: D Section: (none) 1 | i = 0 2 | total = 0 3 | while i < 4 : 4 | i += 2 .............. i = 2 4 | total += i .............. total = 2 3 | while i < 4 : 4 | i += 2 ............. i = 4 5 | total += i ............. total = 6 3 | while i < 4 : 7 | total += 100 .............. total = 106 106 ",
    "code": "print(total)\n8 | print(total)\n",
    "answers": [
      {
        "text": "A. 4",
        "correct": false
      },
      {
        "text": "B. 6",
        "correct": false
      },
      {
        "text": "C. 104",
        "correct": false
      },
      {
        "text": "D. 106",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? spam = [1, 2] for i in range(2): spam.insert(-1, spam[i]) E. [1, -1, 2] [1, -1, -1, 2] Correct Answer: A Section: (none) https://docs.python.org/3/tutorial/datastructures.h tml?highlight=dictionary#more-on-lists list.insert(i, x) Insert an item at a given position. The first argum ent is the index of the element before which to ins ert, so a.insert(0, x) inserts at the front of the list, an d a.insert(len(a), x) is equivalent to a.append(x). ",
    "code": "print(spam, end=' ')\n",
    "answers": [
      {
        "text": "A. [1, 1, 2] [1, 1, 1, 2]",
        "correct": false
      },
      {
        "text": "B. [1, 1, 2] [1, 1, 2, 2]",
        "correct": false
      },
      {
        "text": "C. [-1, 1, 2] [-1, -1, 1, 2]",
        "correct": false
      },
      {
        "text": "D. [1, 2, -1] [ 1, 2, -1, -1]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which statement is CORRECT about the code below? class Spam: pass del Spam ham = \"Fubar\" del ham ham = 'FuBar' del ham[0] ham = [\"spam\", \"ham\"] del ham[1] E. del ham[1] is an error Correct Answer: D Section: (none) Strings are immutable sequences of Unicode code poi nts. Modification in any of its parts is not allowe d. >>> del Spam >>> ham = \"Fubar\" >>> del ham >>> ham = 'FuBar' >>> del ham[0] TypeError: 'str' object doesn't support item deleti on >>> ham = [\"spam\", \"ham\"] >>> del ham[1] ",
    "code": "",
    "answers": [
      {
        "text": "A. No error",
        "correct": false
      },
      {
        "text": "B. del Spam is an error",
        "correct": false
      },
      {
        "text": "C. del ham is an error",
        "correct": false
      },
      {
        "text": "D. del ham[0] is an error",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? spam = [1, 2, 3] ham = spam del ham[:] Correct Answer: B Section: (none) >>> spam = [1, 2, 3] >>> ham = spam >>> ham[:] [1, 2, 3] >>> del ham[:] # same as del ham[0:3] >>> ham [] >>> spam [] ",
    "code": "print(spam)\n",
    "answers": [
      {
        "text": "A. [1, 2, 3]",
        "correct": false
      },
      {
        "text": "B. []",
        "correct": false
      },
      {
        "text": "C. Can't delete list",
        "correct": false
      },
      {
        "text": "D. SyntaxError: invalid syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option will result in the output [1, 2, 3] [1 , 2, 3] False? ham = [1, 2, 3] <<< INSERT CODE HERE >>> Correct Answer: BCD Section: (none) >>> spam = ham; spam, ham, id(spam)==id(ham) ([1, 2, 3], [1, 2, 3], True) >>> spam = ham.copy(); spam, ham, id(spam)==id(ham) ([1, 2, 3], [1, 2, 3], False) >>> spam = ham[:]; spam, ham, id(spam)==id(ham) ([1, 2, 3], [1, 2, 3], False) >>> spam = list(ham); spam, ham, id(spam)==id(ham) ([1, 2, 3], [1, 2, 3], False) ",
    "code": "print(spam, ham, id(spam)==id(ham))\n",
    "answers": [
      {
        "text": "A. spam = ham",
        "correct": false
      },
      {
        "text": "B. spam = ham.copy()",
        "correct": false
      },
      {
        "text": "C. spam = ham[:]",
        "correct": false
      },
      {
        "text": "D. spam = list(ham)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Correct Answer: AD Section: (none) >>> spam = (\"the\", \"quick\", \"brown\", \"fox\") the quick brown fox IndexError: tuple index out of range the fox brown quick the quick brown fox ",
    "code": "Which option will print \"the quick brown fox\" given  the code below?\nspam = (\"the\", \"quick\", \"brown\", \"fox\") A. print(spam[0],spam[1],spam[2],spam[3])\nB. print(spam[1],spam[2],spam[3],spam[4])\nC. print(spam[0],spam[-1],spam[-2],spam[-3])\nD. print(spam[-4],spam[-3],spam[-2],spam[-1])\n>>> print(spam[0],spam[1],spam[2],spam[3])\n>>> print(spam[1],spam[2],spam[3],spam[4])\n>>> print(spam[0],spam[-1],spam[-2],spam[-3])\n>>> print(spam[-4],spam[-3],spam[-2],spam[-1])\n",
    "answers": [],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? a, b = 10, 20 Correct Answer: A Section: (none) (b, a) or (20, 10) is a tuple. The first item can b e accessed by index 0 or False and the 2nd item wit h 1 or True. >>> a, b = 10, 20 >>> t = (b, a) >>> t[False] 20 >>> t[True] 10 >>> t[a < b] 10 ",
    "code": "print((b, a) [a < b])\n",
    "answers": [
      {
        "text": "A. 10",
        "correct": false
      },
      {
        "text": "B. 20",
        "correct": false
      },
      {
        "text": "C. TypeError: tuple indices must be integers or slic es",
        "correct": false
      },
      {
        "text": "D. Invalid Syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option will create a tuple ham equal to (\"bro wn\", \"fox\") using the code below? spam = (\"the\", \"quick\", \"brown\", \"fox\") E. ham = spam[-2:-1] Correct Answer: ABC >>> spam = (\"the\", \"quick\", \"brown\", \"fox\") >>> ham = spam[2:]; ham ('brown', 'fox') >>> ham = spam[2:4]; ham ('brown', 'fox') >>> ham = spam[-2:]; ham ('brown', 'fox') >>> ham = spam[-2:0]; ham () >>> ham = spam[-2:-1]; ham ('brown',) ",
    "code": "",
    "answers": [
      {
        "text": "A. ham = spam[2:]",
        "correct": false
      },
      {
        "text": "B. ham = spam[2:4]",
        "correct": false
      },
      {
        "text": "C. ham = spam[-2:]",
        "correct": false
      },
      {
        "text": "D. ham = spam[-2:0]",
        "correct": false
      }
    ],
    "explanation": "Section: (none) ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option will create a tuple ham equal to (0, 3 , 6, 9) using the code below? spam = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) E. ham = spam[0:10:3] Correct Answer: ACE Section: (none) >>> spam = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9) >>> ham = spam[::3]; ham (0, 3, 6, 9) >>> ham = spam[0:3:9]; ham (0,) >>> ham = spam[0::3]; ham (0, 3, 6, 9) >>> ham = spam[0:9:3]; ham (0, 3, 6) >>> ham = spam[0:10:3]; ham (0, 3, 6, 9) ",
    "code": "",
    "answers": [
      {
        "text": "A. ham = spam[::3]",
        "correct": false
      },
      {
        "text": "B. ham = spam[0:3:9]",
        "correct": false
      },
      {
        "text": "C. ham = spam[0::3]",
        "correct": false
      },
      {
        "text": "D. ham = spam[0:9:3]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option is a valid way to create a tuple named  spam? Correct Answer: ACD Section: (none) >>> type(()) <class 'tuple'> >>> type((\"the\")) <class 'str'> >>> type((\"the\",)) <class 'tuple'> >>> type((\"the\", \"quick\", \"brown\", \"fox\")) <class 'tuple'> ",
    "code": "",
    "answers": [
      {
        "text": "A. spam = ()",
        "correct": false
      },
      {
        "text": "B. spam = (\"the\")",
        "correct": false
      },
      {
        "text": "C. spam = (\"the\",)",
        "correct": false
      },
      {
        "text": "D. spam = (\"the\", \"quick\", \"brown\", \"fox\")",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? 1 spam = ('0', 1, 2, 3, 4, 5, 6, 7, 8, 9) 2 spam[0] = 0 E. Error in Line 3 Correct Answer: D Section: (none) TypeError: 'tuple' object does not support item ass ignment ",
    "code": "3 print(spam)\n",
    "answers": [
      {
        "text": "A. ('0', 1, 2, 3, 4, 5, 6, 7, 8, 9)",
        "correct": false
      },
      {
        "text": "B. (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)",
        "correct": false
      },
      {
        "text": "C. Error in Line 1",
        "correct": false
      },
      {
        "text": "D. Error in Line 2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? spam = {} spam[1] = [1, 2] spam[2] = [3, 4] Correct Answer: D Section: (none) https://docs.python.org/3/library/stdtypes.html#map ping-types-dict ",
    "code": "print(type(spam))\n",
    "answers": [
      {
        "text": "A. <class 'list'>",
        "correct": false
      },
      {
        "text": "B. <class 'tuple'>",
        "correct": false
      },
      {
        "text": "C. <class 'set'>",
        "correct": false
      },
      {
        "text": "D. <class 'dict'>",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? a, b = 10, 20 Correct Answer: A Section: (none) {True: a, False: b} is a dictionary with True, Fals e keys with corresponding a=10 and b=20 values. >>> a, b = 10, 20 >>> d = {True: a, False: b} >>> d[True] 10 >>> d[False] 20 >>> d[a < b] # a < b == True 10 ",
    "code": "print({True: a, False: b} [a < b])\n",
    "answers": [
      {
        "text": "A. 10",
        "correct": false
      },
      {
        "text": "B. 20",
        "correct": false
      },
      {
        "text": "C. KeyError: True",
        "correct": false
      },
      {
        "text": "D. Invalid Syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? spam = { 'z':'x', 'x':'y', 'y':'z' } ham = 'x' for x in range(len(spam)): ham = spam[ham] E. KeyError Correct Answer: C Section: (none) 1 | spam = { 'z':'x', 'x':'y', 'y':'z' } .......... spam = {'z': 'x', 'x': 'y', 'y': 'z'} .......... len(spam) = 3 2 | ham = 'x' 3 | for x in range(len(spam)): .......... x = 0 4 | ham = spam[ham] .............. ham = 'y' y 3 | for x in range(len(spam)): .......... x = 1 4 | ham = spam[ham] .............. ham = 'z' z 3 | for x in range(len(spam)): .......... x = 2 4 | ham = spam[ham] .............. ham = 'x' x ",
    "code": "print(ham, end=\"\")\n5 | print(ham, end=\"\")\n5 | print(ham, end=\"\")\n5 | print(ham, end=\"\")\n",
    "answers": [
      {
        "text": "A. xyz",
        "correct": false
      },
      {
        "text": "B. yz",
        "correct": false
      },
      {
        "text": "C. yzx",
        "correct": false
      },
      {
        "text": "D. zxy",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select all options which will return False given th e code below? tel = {'rick': 123, 'morty': 456} Correct Answer: AC Section: (none) >>> tel = {'rick': 123, 'morty': 456} >>> 'spam' in tel False >>> tel['spam'] is not None KeyError: 'spam' >>> tel.get('spam') is not None False >>> tel.get('spam', True) is not None True >>> tel.key('spam') is not None AttributeError: 'dict' object has no attribute 'key ' ",
    "code": "",
    "answers": [
      {
        "text": "A. 'spam' in tel",
        "correct": false
      },
      {
        "text": "B. tel['spam'] is not None",
        "correct": false
      },
      {
        "text": "C.  tel.get('spam') is not None",
        "correct": false
      },
      {
        "text": "D. tel.get('spam', True) is not None E. tel.key('spam') is not None",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? spam = {} spam['f1'] = {'b1':11, 'b2':12} spam['f2'] = {'b1':21, 'b2':22} for ham in spam.keys(): E. TypeError: keys() takes exactly 1 argument (0 giv en) Correct Answer: A Section: (none) https://docs.python.org/3/library/stdtypes.html#dic t.keys >>> spam = {} >>> spam['f1'] = {'b1':11, 'b2':12} # add f1 key >>> spam.keys() dict_keys(['f1']) >>> spam['f2'] = {'b1':21, 'b2':22} # add f2 key >>> spam.keys() dict_keys(['f1', 'f2']) ",
    "code": "print(ham, end=' ')\n",
    "answers": [
      {
        "text": "A. f1 f2",
        "correct": false
      },
      {
        "text": "B. b1 b2",
        "correct": false
      },
      {
        "text": "C. f1 b1 b2 f2 b1 b2",
        "correct": false
      },
      {
        "text": "D. f1 f2 b1 b2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "spam = {'b1':11, 'b2':12} Correct Answer: AB Section: (none) >>> spam = {'b1':11, 'b2':12} b1 11 b2 12 b1 11 b2 12 TypeError: 'int' object is not subscriptable TypeError: cannot unpack non-iterable int object b 1 b 2 ",
    "code": "Select all options that will print the key and valu e pair of the spam of the following code?\nprint(x[0], x[1])\nprint(x, y)\nprint(x[0], x[1])\nprint(x, y) E. for x in spam:\nprint(x[0], x[1])\n>>> for x in spam.items():print(x[0], x[1])\n>>> for x, y in spam.items():print(x, y)\n>>> for x in spam.values():print(x[0], x[1])\n>>> for x, y in spam.values():print(x, y)\n>>> for x in spam:print(x[0], x[1])\n",
    "answers": [
      {
        "text": "A. for x in spam.items():",
        "correct": false
      },
      {
        "text": "B. for x, y in spam.items():",
        "correct": false
      },
      {
        "text": "C. for x in spam.values():",
        "correct": false
      },
      {
        "text": "D. for x, y in spam.values():",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> {False: 'No', 0: 'Nay', 0.0: 'Nope'} E. {False: 'No', 0: 'Nay'} F. {0.0: 'No'} G. {0.0: 'Nope'} Correct Answer: C Section: (none) Python treats False, 0, and 0.0 as the same keys an d retains the key as False succeeding value overrid es the previous one. ",
    "code": "",
    "answers": [
      {
        "text": "A. {False: 'No', 0: 'Nay', 0.0: 'Nope'}",
        "correct": false
      },
      {
        "text": "B. {False: 'No'}",
        "correct": false
      },
      {
        "text": "C. {False: 'Nope'}",
        "correct": false
      },
      {
        "text": "D. {False: 'No', 0: 'Nope'}",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "How will you call the functions spam(), ham(), and eggs() so you will output spam ham eggs? return None return eggs return ham Correct Answer: BC Section: (none) ... return None ... return eggs ... return ham >>> spam(); ham(); eggs() NameError: name 'ham' is not defined >>> spam()()() spam ham eggs >>> x = spam(); y = x(); z = y() spam ham eggs >>> spam().ham().eggs() AttributeError: 'function' object has no attribute 'ham' ",
    "code": "def spam():\nprint(\"spam\", end=\" \")\ndef ham():\nprint(\"ham\", end=\" \")\ndef eggs():\nprint(\"eggs\")\n>>> def spam():\n... print(\"spam\", end=\" \")\n... def ham():\n... print(\"ham\", end=\" \")\n... def eggs():\n... print(\"eggs\")\n",
    "answers": [
      {
        "text": "A. spam(); ham(); eggs()",
        "correct": false
      },
      {
        "text": "B. spam()()()",
        "correct": false
      },
      {
        "text": "C. x = spam(); y = x(); z = y()",
        "correct": false
      },
      {
        "text": "D. spam().ham().eggs() E. Invalid Syntax",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "result = 'b' for i in range(n): result += result yield result for s in spam(2): E. 6 Correct Answer: E Section: (none) 6 | for s in spam(2): >>> Start generator spam, line 1 .......... n = 2 2 | result = 'b' 3 | for i in range(n): .............. i = 0 4 | result += result .................. result = 'bb' 5 | yield result <<< Yield value from spam: 'bb' 6 | for s in spam(2): .......... s = 'bb' bb 6 | for s in spam(2): >>> Re-enter generator spam, line 5 .................. n = 2 .................. result = 'bb' .................. i = 0 5 | yield result 3 | for i in range(n): .............. i = 1 4 | result += result .................. result = 'bbbb' 5 | yield result <<< Yield value from spam: 'bbbb' 6 | for s in spam(2): bbbb 6 | for s in spam(2): >>> Re-enter generator spam, line 5 .................. n = 2 .................. result = 'bbbb' .................. i = 1 5 | yield result 3 | for i in range(n): ",
    "code": "How many 'b's will be printed based on the output o f the following code?\ndef spam(n):\nprint(s, end=\"\")\nTotal of 6 b or bbbbbb printed. bb is printed in th e first iteration and bbbb is\nprinted in the 2nd iteration.\n1 | def spam(n):\n1 | def spam(n):\n7 | print(s, end=\"\")\n7 | print(s, end=\"\")\n",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. 0",
        "correct": false
      },
      {
        "text": "C. 2",
        "correct": false
      },
      {
        "text": "D. 4",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? for x in range(5): yield x*x for x in foo(): Correct Answer: C Section: (none) 4 | for x in foo(): >>> Start generator foo 2 | for x in range(5): .............. x = 0 3 | yield x*x <<< Yield value from foo: 0 4 | for x in foo(): .......... x = 0 0 4 | for x in foo(): >>> Re-enter generator foo .................. x = 0 3 | yield x*x 2 | for x in range(5): .............. x = 1 3 | yield x*x <<< Yield value from foo: 1 4 | for x in foo(): .......... x = 1 1 4 | for x in foo(): >>> Re-enter generator foo .................. x = 1 3 | yield x*x 2 | for x in range(5): .............. x = 2 3 | yield x*x <<< Yield value from foo: 4 4 | for x in foo(): .......... x = 4 4 4 | for x in foo(): >>> Re-enter generator foo .................. x = 2 3 | yield x*x 2 | for x in range(5): .............. x = 3 3 | yield x*x <<< Yield value from foo: 9 4 | for x in foo(): .......... x = 9 9 4 | for x in foo(): >>> Re-enter generator foo .................. x = 3 3 | yield x*x 2 | for x in range(5): .............. x = 4 3 | yield x*x <<< Yield value from foo: 16 4 | for x in foo(): .......... x = 16 16 ",
    "code": "def foo():\nprint(x, end=\" \")\n1 | def foo():\n5 | print(x, end=\" \")\n5 | print(x, end=\" \")\n5 | print(x, end=\" \")\n5 | print(x, end=\" \")\n5 | print(x, end=\" \")\n",
    "answers": [
      {
        "text": "A. 0",
        "correct": false
      },
      {
        "text": "B. 0 1 2 3 4",
        "correct": false
      },
      {
        "text": "C. 0 1 4 9 16",
        "correct": false
      },
      {
        "text": "D. TypeError: 'int' object is not iterable",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? d[k]=v E. SyntaxError: dynamic constant assignment error Correct Answer: D Section: (none) >>> d, k, v = {}, '0', 'value' >>> d[k] = v >>> d ",
    "code": "def spam(d, k, v):\nprint(d, end=' ')\nprint(spam({}, '0', 'value'))\n{'0': 'value'} None will be printed as well b becau se spam(d, k, v) does not return anything.\n",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. {}",
        "correct": false
      },
      {
        "text": "C. {'0': 'value'}",
        "correct": false
      },
      {
        "text": "D. {'0': 'value'} None",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference: https://docs.python.org/3/library/stdtypes.html#map ping-types-dict"
  },
  {
    "question": "What is the output of the following code? return sum if x == 0 else sum + spam(x-1, sum) Correct Answer: B Section: (none) >>> Call to spam ...... x = 3 ...... sum = 0 2 | return sum if x == 0 else sum + spam(x-1, sum) >>> Call to spam ...... x = 2 ...... sum = 0 2 | return sum if x == 0 else sum + spam(x-1, sum) >>> Call to spam ...... x = 1 ...... sum = 0 2 | return sum if x == 0 else sum + spam(x-1, sum) >>> Call to spam ...... x = 0 ...... sum = 0 2 | return sum if x == 0 else sum + spam(x-1, sum) <<< Return value from spam: 0 2 | return sum if x == 0 else sum + spam(x-1, sum) <<< Return value from spam: 0 2 | return sum if x == 0 else sum + spam(x-1, sum) <<< Return value from spam: 0 2 | return sum if x == 0 else sum + spam(x-1, sum) <<< Return value from spam: 0 ",
    "code": "def spam(x, sum):\nprint(spam(3, 0))\n1 | def spam(x, sum):\n1 | def spam(x, sum):\n1 | def spam(x, sum):\n1 | def spam(x, sum):\n",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. 0",
        "correct": false
      },
      {
        "text": "C. 6",
        "correct": false
      },
      {
        "text": "D. RecursionError: maximum recursion depth exceeded in comparison",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Section: (none) keyword argument: an argument preceded by an identi fier (e.g. name=) in a function call or passed as a value in a dictionary preceded by **. For example, 3 and 5 are both keyword arguments in the following calls to complex(): complex(real=3, imag=5) complex(**{'real': 3, 'imag': 5}) ",
    "code": "What do you call end in the print function call bel ow?\nprint(x, end='')\n",
    "answers": [
      {
        "text": "A. named argument",
        "correct": false
      },
      {
        "text": "B. positional argument",
        "correct": false
      },
      {
        "text": "C. keyword argument",
        "correct": false
      },
      {
        "text": "D. arbitrary argument Correct Answer: C",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "How will you call the code below if you want to pri nt 1, 2, 3? E. spam(a=1,2,3) Correct Answer: ABC Section: (none) >>> spam(1,2) 1 2 3 >>> spam(1,2,3) 1 2 3 >>> spam(b=2,a=1) 1 2 3 >>> spam(a=1,2,c=3) SyntaxError: positional argument follows keyword ar gument >>> spam(a=1,2,3) SyntaxError: positional argument follows keyword ar gument ",
    "code": "def spam(a, b, c=3):\nprint(a, b, c)\n",
    "answers": [
      {
        "text": "A. spam(1,2)",
        "correct": false
      },
      {
        "text": "B. spam(1,2,3)",
        "correct": false
      },
      {
        "text": "C. spam(b=2,a=1)",
        "correct": false
      },
      {
        "text": "D. spam(a=1,2,c=3)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the option(s) is valid based on the follow ing code? 3 spam(1, 2, c=3,) E. Invalid Syntax on Line 3 Correct Answer: BC Section: (none) positional argument: an argument that is not a keyw ord argument. Positional arguments can appear at th e beginning of an argument list and/or be passed as e lements of an iterable preceded by *. For example, 3 and 5 are both positional arguments in the followin g calls: complex(3, 5) complex(*(3, 5)) ",
    "code": "1 def spam(a, b, c=3):\n2 print(a, b, c)\nC. 1 2 3 will be printed\n",
    "answers": [
      {
        "text": "A. a, b are positional arguments",
        "correct": false
      },
      {
        "text": "B. 1, 2 are positional arguments",
        "correct": false
      },
      {
        "text": "D. 3 is a positional argument",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? 123 456 789 Correct Answer: A Section: (none) No output. No error. 123, 456, 789 are valid intege rs that have not been assigned to a variable. ",
    "code": "",
    "answers": [
      {
        "text": "A. No output",
        "correct": false
      },
      {
        "text": "B. 123456789",
        "correct": false
      },
      {
        "text": "C. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "D. NameError: name 123 is not defined",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> 2 ** 3 ** 2 E. 256 F. 512 Correct Answer: F Section: (none) >>> 2 ** 3 ** 2    #1 3**2=9 512 >>> 2 ** 9 512 ",
    "code": "",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. 12",
        "correct": false
      },
      {
        "text": "C. 64",
        "correct": false
      },
      {
        "text": "D. 128",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> 5 ** 0 ** 0 Correct Answer: C Section: (none) >>> 5 ** 0 ** 0     #1 0**0=1 5>>> 5 ** 1 5 ",
    "code": "",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. 1",
        "correct": false
      },
      {
        "text": "C. 5",
        "correct": false
      },
      {
        "text": "D. 0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? i = 10 while len(str(i)) > 5: i-=1 else: i+=1 Correct Answer: C Section: (none) >>> i = 10                     #1 i == 10 >>> while len(str(i)) > 5: #2 len(str(10)) == len(' 10') == 2 > 5 is false ... i-=1 >>> else:                      #3 proceed next ... i+=1                         #4 i = i=10 + 1 = 11 ",
    "code": "print(i, end='')\nprint(i, end='')\nD. 11 .. 99999 will be printed\n... print(i, end='')\n... print(i, end='')            #5 print 11\n",
    "answers": [
      {
        "text": "A. 98765",
        "correct": false
      },
      {
        "text": "B. 987656",
        "correct": false
      },
      {
        "text": "C. 11",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? >>> i = 0 >>> while i != 0: i -= 1 ... else: i += 1 >>> i Correct Answer: C Section: (none) >>> i = 0                       #1 i == 0 >>> while i != 0: i -= 1    #2 while i=0 != 0 is fa lse ... else: i += 1                #3 i = i=0 + 1 >>> i ",
    "code": "",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. 0",
        "correct": false
      },
      {
        "text": "C. 1",
        "correct": false
      },
      {
        "text": "D. 2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? i = 30 while i > 0 : i -= 10 break else: Correct Answer: A Section: (none) 1 | i = 30 2 | while i > 0 : 3 | i -= 10 .............. i = 20 loop 5 | if i <= 10: 2 | while i > 0 : 3 | i -= 10 .............. i = 10 loop 5 | if i <= 10: break 7 | break ",
    "code": "print('loop', end=' ')     if i <= 10:\nprint('break', end=' ')\nprint(\"else\", end=' ')\n4 | print('loop', end=' ')\n4 | print('loop', end=' ')\n6 | print('break', end=' ')\n",
    "answers": [
      {
        "text": "A. loop loop break",
        "correct": false
      },
      {
        "text": "B. loop loop loop break",
        "correct": false
      },
      {
        "text": "C. loop loop break else",
        "correct": false
      },
      {
        "text": "D. loop loop loop break else",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option(s) below will output Hello World! given the following code? <<< INSERT CODE HERE >>> Correct Answer: D Section: (none) https://docs.python.org/3/library/functions.html#pr int Hello World Hello World Hello Hello World ",
    "code": "print('World!')\nA. print('Hello')\nB. print('Hello', ' ')\nC. print('Hello', sep=' ')\nD. print('Hello', end=' ')\n>>> print('Hello'); print('World')\n>>> print('Hello', ' '); print('World')\n>>> print('Hello', sep=' '); print('World')\nWorld >>> print('Hello', end=' '); print('World')\n",
    "answers": [],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which option(s) will result in the output 0 1 2 Given the following code c, b, a = 2, 1, 0 a, c = c, b b = b - c <<< INSERT CODE HERE >>> Correct Answer: AB Section: (none) >>> c, b, a = 2, 1, 0 >>> a, c = c, b >>> b = b - c >>> a, b, c # checkpoint value (2, 0, 1) >>> a, b, c = b, c, a # correct >>> a, b, c (0, 1, 2) >>> a, b, c = 2, 0, 1 # revert checkpoint >>> c, b, a = a, c, b # correct >>> a, b, c (0, 1, 2) >>> a, b, c = 2, 0, 1 # revert checkpoint >>> b, c, a = a, b, c # incorrect >>> a, b, c (1, 2, 0) >>> a, b, c = 2, 0, 1 # revert checkpoint >>> a, c, b = c, b, a # incorrect >>> a, b, c (1, 2, 0) ",
    "code": "print(a, b, c)\n",
    "answers": [
      {
        "text": "A. a, b, c = b, c, a",
        "correct": false
      },
      {
        "text": "B. c, b, a = a, c, b",
        "correct": false
      },
      {
        "text": "C. b, c, a = a, b, c",
        "correct": false
      },
      {
        "text": "D. a, c, b = c, b, a",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following code? return text.upper() x = upcase f = [str.lower, x, str.capitalize] message = f('Hello') dofunc(x) E. AttributeError: type object 'str' has no attribut e 'capitalize' Correct Answer: D Section: (none) >>> x = upcase                                    # 1 x == upcase == text.upper >>> f = [str.lower, x, str.capitalize]          # i gnore line no effect on result ... message = f('Hello')                            #4 f == x == upcase == text.upper(Hello') >>> dofunc(x)                                       #2 calls dofunc pass x == upcase == text.upper ",
    "code": "def upcase(text):\ndef dofunc(f):\nprint(message)\n>>> def upcase(text): return text.upper()\n>>> def dofunc(f):                                 #3 f == x == upcase == text.upper\n... print(message)                                  #5 print HELLO\n",
    "answers": [
      {
        "text": "A. SyntaxError: invalid syntax",
        "correct": false
      },
      {
        "text": "B. Hello",
        "correct": false
      },
      {
        "text": "C. hello D. HELLO",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "...        return upcase if b else lowcase Correct Answer: BCD Section: (none) ... return upcase if b else lowcase >>> dofunc('Hello World', True) <function dofunc.<locals>.upcase at 0x0000029E6351A 700> >>> dofunc('Hello World', True)() 'HELLO WORLD' >>> dofunc('Hello World', (True))() 'HELLO WORLD' >>> dofunc('Hello World', (False,))() 'HELLO WORLD' ",
    "code": "Which option prints HELLO WORLD given the following  code?\n>>> def dofunc(text, b):\n...        def lowcase(): return text.lower()\n...        def upcase(): return text.upper()\n>>> def dofunc(text, b):\n... def lowcase(): return text.lower()\n... def upcase(): return text.upper()\n",
    "answers": [
      {
        "text": "A. >>> dofunc('Hello World', True)",
        "correct": false
      },
      {
        "text": "B. >>> dofunc('Hello World', True)()",
        "correct": false
      },
      {
        "text": "C. >>> dofunc('Hello World', (True))()",
        "correct": false
      },
      {
        "text": "D. >>> dofunc('Hello World', (False,))()",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What will be the value of the i variable when the w hile loop finishes its execution? i = 0 while i != 0: i = i - 1 else: i = i + 1 Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. 1",
        "correct": false
      },
      {
        "text": "B. 0",
        "correct": false
      },
      {
        "text": "C. 2",
        "correct": false
      },
      {
        "text": "D. the variable becomes unavailable Correct Answer: A",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Operator able to perform bitwise shifts is coded as  (Choose two.) Correct Answer: CD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. --",
        "correct": false
      },
      {
        "text": "B. ++",
        "correct": false
      },
      {
        "text": "C. <<",
        "correct": false
      },
      {
        "text": "D. >>",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What will the value of the i variable be when the f ollowing loop finishes its execution? for i in range(10): pass Correct Answer: D Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. 10",
        "correct": false
      },
      {
        "text": "B. the variable becomes unavailable",
        "correct": false
      },
      {
        "text": "C. 11",
        "correct": false
      },
      {
        "text": "D. 9",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "The following expression - 1+-2 is: Correct Answer: D Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. equal to 1",
        "correct": false
      },
      {
        "text": "B. invalid",
        "correct": false
      },
      {
        "text": "C. equal to 2",
        "correct": false
      },
      {
        "text": "D. equal to -1",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "A compiler is a program designed to (Choose two.) A. rearrange the source code to make it clearer Correct Answer: BD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "B. check the source code in order to see of it's cor rect",
        "correct": false
      },
      {
        "text": "C. execute the source code",
        "correct": false
      },
      {
        "text": "D. translate the source code into machine code",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the output of the following piece of code? a = 'ant' b = \"bat\" c = 'camel' Correct Answer: B Section: (none) ",
    "code": "print(a, b, c, sep='\"')    #  '+\"+ '\nD. print(a, b, c, sep= '\"')\n",
    "answers": [
      {
        "text": "A. ant'bat'camel",
        "correct": false
      },
      {
        "text": "B. ant\"bat\"camel",
        "correct": false
      },
      {
        "text": "C. antbatcamel",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following snippe t? i = 5 while i > 0: i = i // 2 if i % 2 = 0: break else: i += 1 Correct Answer: A Section: (none) ",
    "code": "print(i)\n",
    "answers": [
      {
        "text": "A. the code is erroneous",
        "correct": false
      },
      {
        "text": "B. 3",
        "correct": false
      },
      {
        "text": "C. 7",
        "correct": false
      },
      {
        "text": "D. 15",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "How many lines does the following snippet output? for i in range(1, 3): Correct Answer: B Section: (none) ",
    "code": "print(\"*\", end=\"\") else:\nprint(\"*\")\n",
    "answers": [
      {
        "text": "A. three",
        "correct": false
      },
      {
        "text": "B. one",
        "correct": false
      },
      {
        "text": "C. two",
        "correct": false
      },
      {
        "text": "D. four",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following literals reflect the value g iven as 34.23? (Choose two.) Correct Answer: AB Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A.   .3423e2",
        "correct": false
      },
      {
        "text": "B.   3423e-2",
        "correct": false
      },
      {
        "text": "C.   .3423e-2",
        "correct": false
      },
      {
        "text": "D.   3423e2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following snippe t? a = 2 if a > 0: a += 1 else: a -= 1 Correct Answer: D Section: (none) ",
    "code": "print(a)\n",
    "answers": [
      {
        "text": "A. 3",
        "correct": false
      },
      {
        "text": "B. 1",
        "correct": false
      },
      {
        "text": "C. 2",
        "correct": false
      },
      {
        "text": "D. the code is erroneous",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the following snippet has been succes sfully executed, which of the equations are True? (Choose two.) a = [1] b = a a[0] = 0 A. len(a) == len(b) Correct Answer: AC Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "B. b[0] +1 == a[0]",
        "correct": false
      },
      {
        "text": "C. a[0] == b[0]",
        "correct": false
      },
      {
        "text": "D. a[0] + 1 == b[0]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the following snippet has been succes sfully executed, which of the equations are False? (Choose two.) a = [0] b = a[:] a[0] = 1 Correct Answer: CD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. len(a) == len(b)",
        "correct": false
      },
      {
        "text": "B. a[0] - 1 == b[0]",
        "correct": false
      },
      {
        "text": "C. a[0] == b[0]",
        "correct": false
      },
      {
        "text": "D. b[0] - 1 == a[0]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following statements are true? (Choose  two.) Correct Answer: BC Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. Python strings are actually lists",
        "correct": false
      },
      {
        "text": "B. Python strings can be concatenated",
        "correct": false
      },
      {
        "text": "C. Python strings can be sliced like lists",
        "correct": false
      },
      {
        "text": "D. Python strings are mutable",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following sentences are true? (Choose two.) Correct Answer: BD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. Lists may not be stored inside tuples",
        "correct": false
      },
      {
        "text": "B. Tuples may be stored inside lists",
        "correct": false
      },
      {
        "text": "C. Tuples may not be stored inside tuples",
        "correct": false
      },
      {
        "text": "D. Lists may be stored inside lists",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "Assuming that String is six or more letters long, t he following slice string[1:-2] is shorter than the original string by: Correct Answer: B Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. four chars",
        "correct": false
      },
      {
        "text": "B. three chars",
        "correct": false
      },
      {
        "text": "C. one char",
        "correct": false
      },
      {
        "text": "D. two chars",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following snippe t? lst = [1, 2, 3, 4] lst = lst[-3:-2] lst = lst[-1] Correct Answer: C Section: (none) ",
    "code": "print(lst)\n",
    "answers": [
      {
        "text": "A. 1",
        "correct": false
      },
      {
        "text": "B. 4",
        "correct": false
      },
      {
        "text": "C. 2",
        "correct": false
      },
      {
        "text": "D. 3",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following snippe t? s = 'abc' for i in len(s): s[i] = s[i].upper() Correct Answer: B Section: (none) ",
    "code": "print(s)\n",
    "answers": [
      {
        "text": "A. abc",
        "correct": false
      },
      {
        "text": "B. The code will cause a runtime exception",
        "correct": false
      },
      {
        "text": "C. ABC",
        "correct": false
      },
      {
        "text": "D. 123",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "list1 = [False for i in range(1, 10)] list2 = list1[-1:1:-1] Correct Answer: C Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. zero",
        "correct": false
      },
      {
        "text": "B. five",
        "correct": false
      },
      {
        "text": "C. seven",
        "correct": false
      },
      {
        "text": "D. three",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What would you used instead of XXX if you want to c heck weather a certain 'key' exists in a dictionary called dict? (Choose two.) if XXX: Correct Answer: AD Section: (none) ",
    "code": "print(\"Key exists\")\n",
    "answers": [
      {
        "text": "A. 'key' in dict",
        "correct": false
      },
      {
        "text": "B. dict['key'] != None",
        "correct": false
      },
      {
        "text": "C. dict.exists('key')",
        "correct": false
      },
      {
        "text": "D. 'key' in dict.keys( )",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "You need data which can act as a simple telephone d irectory. You can obtain it with the following clau ses (Choose two.) (assume that no other items have been  created before) Correct Answer: AB Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. dir={'Mom': 5551234567, 'Dad': 5557654321}",
        "correct": false
      },
      {
        "text": "B. dir= {'Mom': '5551234567', 'Dad': '5557654321'}",
        "correct": false
      },
      {
        "text": "C. dir= {Mom: 5551234567, Dad: 5557654321}",
        "correct": false
      },
      {
        "text": "D. dir= {Mom: '5551234567', Dad: '5557654321'}",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Can a module run like regular code? Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. yes, and it can differentiate its behavior betwee n the regular launch and import",
        "correct": false
      },
      {
        "text": "B. it depends on the Python version",
        "correct": false
      },
      {
        "text": "C. yes, but in cannot differentiate its behavior bet ween the regular launch and import",
        "correct": false
      },
      {
        "text": "D. no, it is not possible; a module can be imported,  not run Correct Answer: A",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Select the valid fun () invocations: (Choose two.) return a * b Correct Answer: BD Section: (none) ",
    "code": "def fun(a, b=0):\n",
    "answers": [
      {
        "text": "A. fun(b=1)",
        "correct": false
      },
      {
        "text": "B. fun(a=0)",
        "correct": false
      },
      {
        "text": "C. fun(b=1, 0)",
        "correct": false
      },
      {
        "text": "D. fun(1)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "A file name like this one below says that: (Choose three.) services.cpython-36.pyc Correct Answer: ABD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. the interpreter used to generate the file is vers ion 3.6",
        "correct": false
      },
      {
        "text": "B. it has been produced by CPython",
        "correct": false
      },
      {
        "text": "C. it is the 36 version of the file",
        "correct": false
      },
      {
        "text": "D. the file comes from the services.py source file",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following snip pet? return x[y] Correct Answer: A Section: (none) ",
    "code": "def a(x, y):\nprint(a(0, [1]))\nB. print 1\nC. print 0,[1]\nD. print [1]\n",
    "answers": [
      {
        "text": "A. cause a runtime exception",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "What can you do if you don't like a long package pa th like this one? import alpha.beta.gamma.delta.epsilon.zeta Correct Answer: D Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. you can make an alias for the name using the alia s keyword",
        "correct": false
      },
      {
        "text": "B. nothing, you need to come to terms with it",
        "correct": false
      },
      {
        "text": "C. you can shorten it to alpha . zeta and Python wil l find the proper connection",
        "correct": false
      },
      {
        "text": "D. you can make an alias for the name using the as k eyword",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code? str = 'abcdef' del s[2] return s Correct Answer: B Section: (none) ",
    "code": "def fun(s):\nprint(fun(str))\n",
    "answers": [
      {
        "text": "A. abcef",
        "correct": false
      },
      {
        "text": "B. The program will cause a runtime exception/error",
        "correct": false
      },
      {
        "text": "C. acdef",
        "correct": false
      },
      {
        "text": "D. abdef",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code? if n == 1: return '1' return str(n) + f(n - 1) Correct Answer: A Section: (none) ",
    "code": "def f(n):\nprint(f(2))\n",
    "answers": [
      {
        "text": "A. 21",
        "correct": false
      },
      {
        "text": "B. 2",
        "correct": false
      },
      {
        "text": "C. 3",
        "correct": false
      },
      {
        "text": "D. 12",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following snip pet? return 2   # line 02 x = 1 + x()    # line 03 Correct Answer: D Section: (none) ",
    "code": "def x():       # line 01\nprint(x)       # line 04\nD. print 3\n",
    "answers": [
      {
        "text": "A. cause a runtime exception on line 02",
        "correct": false
      },
      {
        "text": "B. cause a runtime exception on line 01",
        "correct": false
      },
      {
        "text": "C. cause a runtime exception on line 03",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? for i in range(1, n + 1): yield i Correct Answer: B Section: (none) ",
    "code": "def f(n):\nprint(f(2))\nA. print 4321\nB. print <generator object f at (some hex digits)>\nD. print 1234\n",
    "answers": [
      {
        "text": "C. cause a runtime exception",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "If you need a function that does nothing, what woul d you use instead of XXX? (Choose two.) XXXX Correct Answer: AB Section: (none) https://www.examtopics.com//discussions/python-inst itute/view/70358-exam-pcap-topic-1-question-30- discussion/ ",
    "code": "def idler():\n",
    "answers": [
      {
        "text": "A. pass",
        "correct": false
      },
      {
        "text": "B. return",
        "correct": false
      },
      {
        "text": "C. exit",
        "correct": false
      },
      {
        "text": "D. None",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "Is it possible to safely check if a class/object ha s a certain attribute? Correct Answer: C Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. yes, by using the hasattr attribute",
        "correct": false
      },
      {
        "text": "B. yes, by using the hasattr( ) method",
        "correct": false
      },
      {
        "text": "C. yes, by using the hasattr( ) function",
        "correct": false
      },
      {
        "text": "D. no, it is not possible",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "The first parameter of each method: Correct Answer: A Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. holds a reference to the currently processed obje ct",
        "correct": false
      },
      {
        "text": "B. is always set to None",
        "correct": false
      },
      {
        "text": "C. is set to a unique random value",
        "correct": false
      },
      {
        "text": "D. is set by the first argument's value",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "The simplest possible class definition in Python ca n be expressed as: Correct Answer: B Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. class X:",
        "correct": false
      },
      {
        "text": "B. class X: pass",
        "correct": false
      },
      {
        "text": "C. class X: return",
        "correct": false
      },
      {
        "text": "D. class X: { }",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "If you want to access an exception object's compone nts and store them in an object called e, you have to use the following form of exception statement: Correct Answer: CSection: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. except Exception(e):",
        "correct": false
      },
      {
        "text": "B. except e = Exception:",
        "correct": false
      },
      {
        "text": "C. except Exception as e:",
        "correct": false
      },
      {
        "text": "D. such an action is not possible in Python",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "A variable stored separately in every object is cal led: Correct Answer: D Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. there are no such variables, all variables are sh ared among objects",
        "correct": false
      },
      {
        "text": "B. a class variable",
        "correct": false
      },
      {
        "text": "C. an object variable",
        "correct": false
      },
      {
        "text": "D. an instance variable",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "There is a stream named s open for writing. What op tion will you select to write a line to the stream? Correct Answer: A Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. s.write(\"Hello\\n\")",
        "correct": false
      },
      {
        "text": "B. write(s, \"Hello\")",
        "correct": false
      },
      {
        "text": "C. s.writeln(\"Hello\")",
        "correct": false
      },
      {
        "text": "D. s.writeline(\"Hello\")",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "You are going to read just one character from a str eam called s. Which statement would you use? Correct Answer: D Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. ch = read(s, 1)",
        "correct": false
      },
      {
        "text": "B. ch = s.input(1)",
        "correct": false
      },
      {
        "text": "C. ch = input(s, 1)",
        "correct": false
      },
      {
        "text": "D. ch = s.read(1)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What can you deduce from the following statement? ( Choose two.) str = open('file.txt', 'rt') Correct Answer: BD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. str is a string read in from the file named file. txt",
        "correct": false
      },
      {
        "text": "B. a newline character translation will be performed  during the reads",
        "correct": false
      },
      {
        "text": "C. if file. txt does not exist, it will be created D. the opened file cannot be written with the use of t he str variable",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "The following class hierarchy is given. What is the  expected out of the code? class A: self.a() class B(A): self.b() class C(A): self.b() B().do() C().do() Correct Answer: D Section: (none) ",
    "code": "def a(self):\nprint(\"A\", end=' ')\ndef b(self):\ndef a(self):\nprint(\"B\", end=' ')\ndef do(self):\ndef a(self):\nprint(\"C\", end=' ')\ndef do(self):\n",
    "answers": [
      {
        "text": "A. B B",
        "correct": false
      },
      {
        "text": "B. C C",
        "correct": false
      },
      {
        "text": "C. A A",
        "correct": false
      },
      {
        "text": "D. B C",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Python's built in function named open() tries to op en a file and returns: Correct Answer: C Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. an integer value identifying an opened file",
        "correct": false
      },
      {
        "text": "B. an error code (0 means success)",
        "correct": false
      },
      {
        "text": "C. a stream object",
        "correct": false
      },
      {
        "text": "D. always None",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following words can be used as a varia ble name? (Choose two.) A. for Correct Answer: CD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "B. True",
        "correct": false
      },
      {
        "text": "C. true",
        "correct": false
      },
      {
        "text": "D. For",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Python strings can be `glued` together using the op erator: Correct Answer: D Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. .",
        "correct": false
      },
      {
        "text": "B. &",
        "correct": false
      },
      {
        "text": "C. _",
        "correct": false
      },
      {
        "text": "D. +",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "A keyword (Choose two.) Correct Answer: BC Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. can be used as an identifier",
        "correct": false
      },
      {
        "text": "B. is defined by Python's lexis",
        "correct": false
      },
      {
        "text": "C. is also known as a reserved word",
        "correct": false
      },
      {
        "text": "D. cannot be used in the user's code",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "s = '*****' s = s - s[2] Correct Answer: A Section: (none) ",
    "code": "How many stars (*) does the snippet print?\nprint(s)\n",
    "answers": [
      {
        "text": "A. the code is erroneous",
        "correct": false
      },
      {
        "text": "B. five",
        "correct": false
      },
      {
        "text": "C. four",
        "correct": false
      },
      {
        "text": "D. two",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "Which line can be used instead of the comment to ca use the snippet to produce the following expected output? (Choose two.) Expected output: 1 2 3 Code: c, b, a = 1, 3, 2 Correct Answer: AC Section: (none) ",
    "code": "# put line here\nprint(a, b, c)\n",
    "answers": [
      {
        "text": "A. c, b, a = b, a, c",
        "correct": false
      },
      {
        "text": "B. c, b, a = a, c, b",
        "correct": false
      },
      {
        "text": "C. a, b, c = c, a, b",
        "correct": false
      },
      {
        "text": "D. a, b, c = a, b, c",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the V variable holds an integer value  to 2, which of the following operators should be u sed instead of OPER to make the expression equal to 1? V OPER 1 Correct Answer: C Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. <<<",
        "correct": false
      },
      {
        "text": "B. >>>",
        "correct": false
      },
      {
        "text": "C. >>",
        "correct": false
      },
      {
        "text": "D. <<",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "i = 3 while i > 0: i -= 1 else: Correct Answer: D ",
    "code": "How many stars (*) does the following snippet print ?\nprint(\"*\")\nprint(\"*\")\n",
    "answers": [
      {
        "text": "A. the code is erroneous",
        "correct": false
      },
      {
        "text": "B. five",
        "correct": false
      },
      {
        "text": "C. three",
        "correct": false
      },
      {
        "text": "D. four",
        "correct": false
      }
    ],
    "explanation": "Section: (none) ExplanationExplanation/Reference:"
  },
  {
    "question": "UNICODE is: Correct Answer: B Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. the name of an operating system",
        "correct": false
      },
      {
        "text": "B. a standard for encoding and handling texts",
        "correct": false
      },
      {
        "text": "C. the name of a programming language",
        "correct": false
      },
      {
        "text": "D. the name of a text processor",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following snippe t? s = '*-*' s = 2 * s + s * 2 Correct Answer: A Section: (none) ",
    "code": "print(s)\n",
    "answers": [
      {
        "text": "A. *-**-**-**-*",
        "correct": false
      },
      {
        "text": "B. *-**-**-**-**-**-**-**-*",
        "correct": false
      },
      {
        "text": "C. *-*",
        "correct": false
      },
      {
        "text": "D. *-**-*",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the listed actions can be applied to the f ollowing tuple? (Choose two.) tup = () Correct Answer: AD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. tup[:]",
        "correct": false
      },
      {
        "text": "B. tup.append(0)",
        "correct": false
      },
      {
        "text": "C. tup[0]",
        "correct": false
      },
      {
        "text": "D. del tup",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Executing the following snippet - dct = {'pi': 3.14} dct['pi'] = 3.1415 Correct Answer: C Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. to hold two keys named 'pi' linked to 3.14 and 3. 1415 respectively",
        "correct": false
      },
      {
        "text": "B. to hold two key named 'pi' linked to 3.14 and 3.1 415",
        "correct": false
      },
      {
        "text": "C. to hold one key named 'pi' linked to 3.1415",
        "correct": false
      },
      {
        "text": "D. to hold two keys named 'pi' linked to 3.1415",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "How many elements will the list1 list contain after  execution of the following snippet? list1 = \"don't think twice, do it!\".split(',') Correct Answer: A Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. two",
        "correct": false
      },
      {
        "text": "B. zero",
        "correct": false
      },
      {
        "text": "C. one",
        "correct": false
      },
      {
        "text": "D. three",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the equations are True? (Choose two.) Correct Answer: AD Section: (none) https://www.examtopics.com//discussions/python-inst itute/view/65147-exam-pcap-topic-1-question-53- discussion/ https://www.examtopics.com//discussions/python-inst itute/view/17141-exam-pcap-topic-1-question-53- discussion/ ",
    "code": "",
    "answers": [
      {
        "text": "A. chr(ord(x)) == x",
        "correct": false
      },
      {
        "text": "B. ord(ord(x)) == x",
        "correct": false
      },
      {
        "text": "C. chr(chr(x)) == x",
        "correct": false
      },
      {
        "text": "D. ord(chr(x)) == x",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "If you want to transform a string into a list of wo rds, what invocation would you use? (Choose two.) Expected output: The, Catcher, in, the, Rye, Code: s = \"The Catcher in the Rye\" l = # put a proper invocation here for w in l: Correct Answer: AC Section: (none) ",
    "code": "print(w, end=', ') # outputs: The, Catcher, in,  the, Rye, A. s.split()\n",
    "answers": [
      {
        "text": "B. split(s, ' ')",
        "correct": false
      },
      {
        "text": "C. s.split(' ')",
        "correct": false
      },
      {
        "text": "D. split(s)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that lst - is a four-element list. Is ther e any difference between these two statements? del lst # the first line del lst[:] # the second line the first one Correct Answer: B Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. yes, there is, the first line empties the list, t he second line deletes the list as a whole",
        "correct": false
      },
      {
        "text": "B. yes, there is, the first line deletes the list as  a whole, the second line just empties the list",
        "correct": false
      },
      {
        "text": "C. no, there is no difference",
        "correct": false
      },
      {
        "text": "D. yes, there is, the first line deletes the list as  a whole, the second line removes all the elements except",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "if __name__ != \"XXX\": Correct Answer: C Section: (none) ",
    "code": "What should you put instead of XXX to print out the  module name?\nprint(__name__)\n",
    "answers": [
      {
        "text": "A. main",
        "correct": false
      },
      {
        "text": "B. _main_",
        "correct": false
      },
      {
        "text": "C. __main__",
        "correct": false
      },
      {
        "text": "D. ___main___",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Files with the suffix .pyc contain: Correct Answer: D ",
    "code": "",
    "answers": [
      {
        "text": "A. Python 4 source code",
        "correct": false
      },
      {
        "text": "B. backups",
        "correct": false
      },
      {
        "text": "C. temporary data",
        "correct": false
      },
      {
        "text": "D. semi-compiled Python code",
        "correct": false
      }
    ],
    "explanation": "Section: (none) ExplanationExplanation/Reference:"
  },
  {
    "question": "Package source directories/folders can be: Correct Answer: B Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. converted into the so-called pypck format",
        "correct": false
      },
      {
        "text": "B. packed as a ZIP file and distributed as one file",
        "correct": false
      },
      {
        "text": "C. rebuilt to a flat form and distributed as one dir ectory/folder",
        "correct": false
      },
      {
        "text": "D. removed as Python compiles them into an internal portable format",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What can you deduce from the line below? (Choose tw o.) x = a.b.c.f() Correct Answer: AB Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. import a.b.c should be placed before that line",
        "correct": false
      },
      {
        "text": "B. f() is located in subpackage c of subpackage b of  package a",
        "correct": false
      },
      {
        "text": "C. the line is incorrect",
        "correct": false
      },
      {
        "text": "D. the function being invoked is called a.b.c.f()",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "A two-parameter lambda function raising its first p arameter to the power of the second parameter shoul d be declared as: Correct Answer: D Section: (none) ",
    "code": "C. def lambda (x, y): return x ** y\n",
    "answers": [
      {
        "text": "A. lambda (x, y) = x ** y",
        "correct": false
      },
      {
        "text": "B. lambda (x, y): x ** y",
        "correct": false
      },
      {
        "text": "D. lambda x, y: x ** y",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code? if n == 1: return 1 Correct Answer: C Section: (none) ",
    "code": "def f(n):\nreturn n + f(n - 1) print(f(2))\n",
    "answers": [
      {
        "text": "A. 21",
        "correct": false
      },
      {
        "text": "B. 12",
        "correct": false
      },
      {
        "text": "C. 3",
        "correct": false
      },
      {
        "text": "D. None",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "A method for passing the arguments used by the foll owing snippet is called: return a + b res = fun(1, 2) Correct Answer: C Section: (none) ",
    "code": "def fun(a, b):\n",
    "answers": [
      {
        "text": "A. sequential",
        "correct": false
      },
      {
        "text": "B. named",
        "correct": false
      },
      {
        "text": "C. positional",
        "correct": false
      },
      {
        "text": "D. keyword",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? for i in range(1, n + 1): yield i for i in f(2): Correct Answer: B Section: (none) ",
    "code": "def f(n):\nprint(i, end=' ')\nA. print 2 1\nB. print 1 2\nD. print <generator object f at (some hex digits)>\n",
    "answers": [
      {
        "text": "C. cause a runtime exception",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code? lst = [x for x in range(5)] lst = list(filter(lambda x: x % 2 == 0, lst)) Correct Answer: D Section: (none) ",
    "code": "print(len(lst))\n",
    "answers": [
      {
        "text": "A. 2",
        "correct": false
      },
      {
        "text": "B. The code will cause a runtime exception",
        "correct": false
      },
      {
        "text": "C. 1",
        "correct": false
      },
      {
        "text": "D. 3",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? if x % 2 == 1: return 0  Correct Answer: B Section: (none) ",
    "code": "def unclear(x):\nprint(unclear(1) + unclear(2))\nA. prints 0\nC. prints 3\nD. print an empty line\n",
    "answers": [
      {
        "text": "B. cause a runtime exception",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "If any of a class's components has a name that star ts with two underscores (___), then: Correct Answer: A Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. the class component's name will be mangled",
        "correct": false
      },
      {
        "text": "B. the class component has to be an instance variabl e",
        "correct": false
      },
      {
        "text": "C. the class component has to be a class variable",
        "correct": false
      },
      {
        "text": "D. the class component has to be a method",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "If you need to serve two different exceptions calle d Ex1 and Ex2 in one except branch, you can write: Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. except Ex1 Ex2:",
        "correct": false
      },
      {
        "text": "B. except (Ex1, Ex2):",
        "correct": false
      },
      {
        "text": "C. except Ex1, Ex2:",
        "correct": false
      },
      {
        "text": "D. except Ex1+Ex2: Correct Answer: B",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "A function called issubclass(c1, c2) is able to che ck if: Correct Answer: C Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. c1 and c2 are both subclasses of the same supercl ass",
        "correct": false
      },
      {
        "text": "B. c2 is a subclass of c1",
        "correct": false
      },
      {
        "text": "C. c1 is a subclass of c2",
        "correct": false
      },
      {
        "text": "D. c1 and c2 are not subclasses of the same supercla ss",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "A class constructor (Choose two.) Correct Answer: BC Section: (none) From Python Institute: Note that the constructor: cannot return a value, as it is designed to return a newly created object and nothing else; cannot be invoked directly either from the object o r from inside the class (you can invoke a construct or from any of the object's subclasses, but we'll disc uss this issue later.) https://www.examtopics.com//discussions/python-inst itute/view/16489-exam-pcap-topic-1-question-69- discussion/ https://www.examtopics.com//discussions/python-inst itute/view/104004-exam-pcap-topic-1-question-69- discussion/ ",
    "code": "",
    "answers": [
      {
        "text": "A. can return a value",
        "correct": false
      },
      {
        "text": "B. cannot be invoked directly from inside the class",
        "correct": false
      },
      {
        "text": "C. can be invoked directly from any of the subclasse s",
        "correct": false
      },
      {
        "text": "D. can be invoked directly from any of the superclas ses",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "The following class definition is given. We want th e show () method to invoke the get () method, and t hen output the value the get () method returns. Which o f the invocations should be used instead of XXX? class Class: self.val = val return self.val Correct Answer: B Section: (none) ",
    "code": "def __init__(self, val):\ndef get(self):\ndef show(self):\nprint(self.get())\nA. print(get(self))\nB. print(self.get()) C. print(get())\nD. print(self.get(val))\n",
    "answers": [],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "If s is a stream open for reading, what do you expe ct from the following invocation? c = s.read() Correct Answer: B Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. one line of the file will be read and stored in t he string called c",
        "correct": false
      },
      {
        "text": "B. the whole file content will be read and stored in  the string called c",
        "correct": false
      },
      {
        "text": "C. one character will be read and stored in the stri ng called c",
        "correct": false
      },
      {
        "text": "D. one disk sector (512 bytes) will be read and stor ed in the string called c",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "You are going to read 16 bytes from a binary file i nto a bytearray called data. Which lines would you use? (Choose two.) Correct Answer: AD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. data = bytearray(16); bf.readinto(data)",
        "correct": false
      },
      {
        "text": "B. data = binfile.read(bytearray(16))",
        "correct": false
      },
      {
        "text": "C. bf.readinto(data = bytearray(16))",
        "correct": false
      },
      {
        "text": "D. data = bytearray(binfile.read(16))",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following snippe t? class X: pass class Y(X): pass class Z(X): pass x = Z() z = Z() Correct Answer: B Section: (none) ",
    "code": "print(isinstance(x, Z), isinstance(z, X))\n",
    "answers": [
      {
        "text": "A. True False",
        "correct": false
      },
      {
        "text": "B. True True",
        "correct": false
      },
      {
        "text": "C. False False D. False True",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the code below has been executed succ essfully, which of the following expressions will always evaluate to True? (Choose two.) import random random.seed(1) v1 = random.random() random.seed(1) v2 = random.random() Correct Answer: BD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. v1 >= 1",
        "correct": false
      },
      {
        "text": "B. v1 == v2",
        "correct": false
      },
      {
        "text": "C. len(random.sample([1, 2, 3], 2)) > 2",
        "correct": false
      },
      {
        "text": "D. random.choice([1, 2, 3]) >= 1",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which one of the platform module functions should b e used to determine the underlying platform name? Correct Answer: C Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. platform.python_version()",
        "correct": false
      },
      {
        "text": "B. platform.processor()",
        "correct": false
      },
      {
        "text": "C. platform.platform()",
        "correct": false
      },
      {
        "text": "D. platform.uname()",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code? import sys import math b1 = type(dir(math)[0]) is str b2 = type(dir(sys.path)[-1]) is str Correct Answer: C Section: (none) ",
    "code": "print(b1 and b2)\n",
    "answers": [
      {
        "text": "A. False",
        "correct": false
      },
      {
        "text": "B. None",
        "correct": false
      },
      {
        "text": "C. True D. 0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "With regards to the directory structure below, sele ct the proper forms of the directives in order to i mport module_a. (Choose two.) pypack  (dir) | |-- upper  (dir) |  | |  |-- lower  (dir) |  |   | |  |   |_ module_c.py (file) |  | |  |_ module_b.py (file) | |_ module_a.py (file) Correct Answer: AD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. from pypack import module_a",
        "correct": false
      },
      {
        "text": "B. import module_a from pypack",
        "correct": false
      },
      {
        "text": "C. import module_a",
        "correct": false
      },
      {
        "text": "D. import pypack.module_a",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "A Python module named pymod.py contains a function named pyfun(). Which of the following snippets will let you invoke  the function? (Choose two.) pymod.pyfun() pyfun() pymod.pyfun() pyfun() Correct Answer: AB Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. import pymod",
        "correct": false
      },
      {
        "text": "B. from pymod import pyfun",
        "correct": false
      },
      {
        "text": "C. from pymod import *",
        "correct": false
      },
      {
        "text": "D. import pyfun from pymod",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is true about Python packages? (Choose two.) Correct Answer: BD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. a package is a single file whose name ends with the  pa extension B. a package is a group of related modules",
        "correct": false
      },
      {
        "text": "C. the __name__ variable always contains the name of  a package",
        "correct": false
      },
      {
        "text": "D. the pyc extension is used to mark semi-compiled P ython packages",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? m = 0 global m assert m == 0 try: return 1 / n except ArithmeticError: m += 1 raise try: foo(0) except ArithmeticError: m += 2 except: m += 1 Correct Answer: A Section: (none) ",
    "code": "def foo(n):\nprint(m)\n",
    "answers": [
      {
        "text": "A. it outputs 3",
        "correct": false
      },
      {
        "text": "B. it outputs 1",
        "correct": false
      },
      {
        "text": "C. the code is erroneous and it will not execute",
        "correct": false
      },
      {
        "text": "D. it outputs 2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? s = '2A' try: n = int(s) except TypeError: n = 3 except LookupError: n = 2 except: n = 1 Correct Answer: C Section: (none) ",
    "code": "print(n)\n",
    "answers": [
      {
        "text": "A. it outputs 3 B. the code is erroneous and it will not execute",
        "correct": false
      },
      {
        "text": "C. it outputs 1",
        "correct": false
      },
      {
        "text": "D. it outputs 2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following snippets will execute withou t raising any unhandled exceptions? (Choose two.) except: else: except NameError: else: try: except: else: except (NameError, SystemError): else: Correct Answer: AC Section: (none) ",
    "code": "print(0/0)\nprint(0/1)\nprint(0/2)\nprint(int(\"0\"))\nprint(\"0\")\nprint(int(\"\"))\nprint(math.sqrt(-1))\nprint(math.sqrt(0))\nprint(math.sqrt(1))\nprint(float(\"1e1\"))\nprint(float(\"1a1\"))\nprint(float(\"1c1\"))\n",
    "answers": [
      {
        "text": "A. try:",
        "correct": false
      },
      {
        "text": "B. try:",
        "correct": false
      },
      {
        "text": "C. import math",
        "correct": false
      },
      {
        "text": "D. try:",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? my_list = [1, 2, 3] try: my_list[3] = my_list[2] except BaseException as error: Correct Answer: C Section: (none) ",
    "code": "print(error)\n",
    "answers": [
      {
        "text": "A. it outputs error B. it outputs <class 'IndexError'>",
        "correct": false
      },
      {
        "text": "C. it outputs list assignment index out of range",
        "correct": false
      },
      {
        "text": "D. the code is erroneous and it will not execute",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is true about the following snippet? (Choose t wo.) class E(Exception): self.message = message return \"it's nice to see you\"  try: raise Exception(\"what a pity\") except E as e: else: Correct Answer: BC Section: (none) ",
    "code": "def __init__(self, message):\ndef __str__(self):\nprint(\"I feel fine\")\nprint(e)\nprint(\"the schow must go on\")\n",
    "answers": [
      {
        "text": "A. the string it's nice to see you will be seen",
        "correct": false
      },
      {
        "text": "B. the string I feel fine will be seen",
        "correct": false
      },
      {
        "text": "C. the code will raise an unhandled exception",
        "correct": false
      },
      {
        "text": "D. the string what a pity will be seen",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following expressions evaluate to True ? (Choose two.) Correct Answer: BC Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. ord(\"Z\") - ord(\"z\") == ord(\"0\")",
        "correct": false
      },
      {
        "text": "B. chr(ord('A') + 1) == 'B'",
        "correct": false
      },
      {
        "text": "C. len('\\'') == 1  # ( ' \\ ' ' )",
        "correct": false
      },
      {
        "text": "D. len(\"\"\" \"\"\") == 0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following invocations are valid? (Choo se two.) Correct Answer: BD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. \"python\".sort()",
        "correct": false
      },
      {
        "text": "B. sorted(\"python\") C. rfind(\"python\", \"r\")",
        "correct": false
      },
      {
        "text": "D. \"python\".index(\"th\")",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? string = str(1 / 3) dummy = '' for character in string: dummy = character + dummy Correct Answer: B Section: (none) ",
    "code": "print(dummy[-1])\n",
    "answers": [
      {
        "text": "A. it raises an exception",
        "correct": false
      },
      {
        "text": "B. it outputs 0",
        "correct": false
      },
      {
        "text": "C. it outputs 3",
        "correct": false
      },
      {
        "text": "D. it outputs 'None'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following statements are true? (Choose  two.) Correct Answer: AB Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. II in ASCII stands for Information Interchange",
        "correct": false
      },
      {
        "text": "B. a code point is a number assigned to a given char acter",
        "correct": false
      },
      {
        "text": "C. ACII is synonymous with UTF-8",
        "correct": false
      },
      {
        "text": "D. \\e is an escape sequence used to mark the end of lines",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following expressions evaluate to True ? (Choose two.) Correct Answer: AD Section: (none) What is the expected behavior of the following code ? the_list = \"alpha;beta;gamma\".split(\":\") the_string = ''.join(the_list) Correct Answer: C Section: (none) ",
    "code": "print(the_string.isalpha())\n",
    "answers": [
      {
        "text": "A. str(1-1) in '0123456789'",
        "correct": false
      },
      {
        "text": "B. 'dcb' not in 'abcde'[::-1]",
        "correct": false
      },
      {
        "text": "C. 'phd' in 'alpha'",
        "correct": false
      },
      {
        "text": "D. 'True' not in 'False'",
        "correct": false
      },
      {
        "text": "A. it raises an exception",
        "correct": false
      },
      {
        "text": "B. it outputs True",
        "correct": false
      },
      {
        "text": "C. it outputs False",
        "correct": false
      },
      {
        "text": "D. it outputs nothing",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference: QUESTION 344ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following expressions evaluate to True ? (Choose two.) Correct Answer: AD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. 121 + 1 != '1' + 2 * '2'",
        "correct": false
      },
      {
        "text": "B. '1' + '1' + '1' < '1' * 3",
        "correct": false
      },
      {
        "text": "C. 'AbC'.lower() < 'AB'",
        "correct": false
      },
      {
        "text": "D. '3.14' != str(3.1415)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the snippet below has been executed s uccessfully, which of the following expressions evaluate to True? string = 'python'[::2] string = string[-1] + string[-2] Correct Answer: A Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. string[0] == 'o'",
        "correct": false
      },
      {
        "text": "B. string is None",
        "correct": false
      },
      {
        "text": "C. len(string) == 3",
        "correct": false
      },
      {
        "text": "D. string[0] == string [-1]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? class Super: return 0 class Sub_A(Super): return 1  class Sub_B(Super): pass a = Sub_A() b = Sub_B() Correct Answer: B Section: (none) ",
    "code": "def make(self):\ndef doit(self):         return self.make()\ndef make(self):\nprint(a.doit() + b.doit())\n",
    "answers": [
      {
        "text": "A. it outputs 0",
        "correct": false
      },
      {
        "text": "B. it outputs 1",
        "correct": false
      },
      {
        "text": "C. it raises an exception",
        "correct": false
      },
      {
        "text": "D. it outputs 2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the following inheritance set is in f orce, which of the following classes are declared p roperly? (Choose two.) class A: pass class B(A): pass class C(A): pass class D(B): pass pass pass pass pass Correct Answer: AD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. class Class_4(D, A):",
        "correct": false
      },
      {
        "text": "B. class Class_3(A, C):",
        "correct": false
      },
      {
        "text": "C. class Class_2(B, D):",
        "correct": false
      },
      {
        "text": "D. class Class_1(C, D):",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following snippe t? return 'upper'  class Lower(Upper): return 'lower'  Object = Upper() Correct Answer: C Section: (none) ",
    "code": "class Upper:     def method(self):\ndef method(self):\nprint(isinstance(Object, Lower), end=' ')\nprint(Object.method())\n",
    "answers": [
      {
        "text": "A. True upper",
        "correct": false
      },
      {
        "text": "B. True lower",
        "correct": false
      },
      {
        "text": "C. False upper",
        "correct": false
      },
      {
        "text": "D. False lower",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the code below has been placed inside  a file named code.py and executed successfully, which of the following expressions evaluate to True ? (Choose two.) class ClassA: var = 1 prop1 = prop2 = prop return 'Object'  class ClassB(ClassA): prop3 = prop ** 2 super().__init__(prop) Object = ClassB(2) Correct Answer: BD Section: (none) ",
    "code": "def __init__(self, prop):\ndef __str__(self):\ndef __init__(self, prop):\n",
    "answers": [
      {
        "text": "A. len(ClassA.__bases__) == 2",
        "correct": false
      },
      {
        "text": "B. ClassA.__module__ == '__main__'",
        "correct": false
      },
      {
        "text": "C. __name__ == 'code.py'",
        "correct": false
      },
      {
        "text": "D. str(Object) == 'Object'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? class Class: __Var = 0 Class._Class__Var += 1 self.__prop = Class._Class__Var o1 = Class() o1.foo() o2 = Class() o2.foo() Correct Answer: B Section: (none) ",
    "code": "def foo(self):\nprint(o2._Class__Var + o1._Class__prop)\n",
    "answers": [
      {
        "text": "A. it outputs 1",
        "correct": false
      },
      {
        "text": "B. it outputs 3",
        "correct": false
      },
      {
        "text": "C. it outputs 6",
        "correct": false
      },
      {
        "text": "D. it raises an exception",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? class Class: Variable = 0 self.value = 0 object_1 = Class() object_1.Variable = 1 object_2 = Class() object_2.value += 1 Correct Answer: A Section: (none) ",
    "code": "def __init__(self):\nprint(object_2.Variable + object_1.value)\n",
    "answers": [
      {
        "text": "A. it outputs 0",
        "correct": false
      },
      {
        "text": "B. it raises an exception",
        "correct": false
      },
      {
        "text": "C. it outputs 1",
        "correct": false
      },
      {
        "text": "D. it outputs 2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is true about Object-Oriented Programming in P ython? (Choose two.) Correct Answer: BD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. each object of the same class can have a differen t set of methods",
        "correct": false
      },
      {
        "text": "B. a subclass is usually more specialized than its s uperclass",
        "correct": false
      },
      {
        "text": "C. if a real-life object can be described with a set  of adjectives, they may reflect a Python object me thod",
        "correct": false
      },
      {
        "text": "D. the same class can be used many times to build a number of objects",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Correct Answer: CD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. there can be more than one constructor in a Pytho n class",
        "correct": false
      },
      {
        "text": "B. the constructor must return a value other than No ne",
        "correct": false
      },
      {
        "text": "C. the constructor is a method named __init__",
        "correct": false
      },
      {
        "text": "D. the constructor must have at least one parameter",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the following piece of code has been executed successfully, which of the expressions evaluate to True? (Choose two.) class A: VarA = 1 self.prop_a = 1  class B(A): VarA = 2 super().__init__() self.prop_b = 2 obj_a = A() obj_aa = A() obj_b = B() obj_bb = obj_b Correct Answer: AB Section: (none) ",
    "code": "def __init__(self):\ndef __init__(self):\n",
    "answers": [
      {
        "text": "A. isinstance(obj_a, A)",
        "correct": false
      },
      {
        "text": "B. A.VarA == 1",
        "correct": false
      },
      {
        "text": "C. obj_a is obj_aa",
        "correct": false
      },
      {
        "text": "D. B.VarA == 1",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the code below has been executed succ essfully, which of the expressions evaluate to True ? (Choose two.) class Class: var = data = 1 self.prop = value Object = Class(2) Section: (none) ",
    "code": "def __init__(self, value):\n",
    "answers": [
      {
        "text": "A. len(Class.__dict__) == 1",
        "correct": false
      },
      {
        "text": "B. 'data' in Class.__dict__",
        "correct": false
      },
      {
        "text": "C. 'var' in Class.__dict__",
        "correct": false
      },
      {
        "text": "D. 'data' in Object.__dict__ Correct Answer: BC",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "A property that stores information about a given cl ass's super-classes is named: Correct Answer: D Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. __upper__",
        "correct": false
      },
      {
        "text": "B. __super__",
        "correct": false
      },
      {
        "text": "C. __ancestors__",
        "correct": false
      },
      {
        "text": "D. __bases__",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following lines of code will work flaw lessly when put independently inside the add_new() method in order to make the snippet's output equal to [0, 1, 2]? (Choose two.) class MyClass: self.queue = [i for i in range(size)] return self.queue return self.queue[-1] Object = MyClass(2) Object.add_new() Correct Answer: AC Section: (none) ",
    "code": "def __init__(self, size):\ndef get(self):\ndef get_last(self):\ndef add_new(self):\n# insert the line of the code here\nprint(Object.get())\n",
    "answers": [
      {
        "text": "A. self.queue.append(self.get_last() + 1)",
        "correct": false
      },
      {
        "text": "B. self.queue.append(get_last() + 1)",
        "correct": false
      },
      {
        "text": "C. self.queue.append(self.queue[-1] + 1)",
        "correct": false
      },
      {
        "text": "D. queue.append(self.get_last() + 1)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code? mytu = ('a', 'b', 'c') Correct Answer: B Section: (none) ",
    "code": "m = tuple(map(lambda x: chr(ord(x) + 1), mytu)) print(m[-2])\n",
    "answers": [
      {
        "text": "A. a",
        "correct": false
      },
      {
        "text": "B. c",
        "correct": false
      },
      {
        "text": "C. an exception is raised",
        "correct": false
      },
      {
        "text": "D. b",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code i f there is no file named non_existing_file inside t he working directory? try: f = open('non_existing_file', 'w') s = f.readline() except IOError as error: else: f.close() Correct Answer: D Section: (none) ",
    "code": "print(1, end=' ')\nprint(2, end=' ')\nprint(3, end=' ')\nprint(4, end=' ')\n",
    "answers": [
      {
        "text": "A. 1 2 4",
        "correct": false
      },
      {
        "text": "B. 1 2 3 4",
        "correct": false
      },
      {
        "text": "C. 2 4",
        "correct": false
      },
      {
        "text": "D. 1 3",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code i f the file named existing_text_file is a non-zero l ength text file located inside the working directory? try: f = open('existing_text_file', 'w') d = f.readline() f.close() except IOError: Correct Answer: B Section: (none) ",
    "code": "print(len(d))\nprint(-1)\n",
    "answers": [
      {
        "text": "A. the length of the first line from the file",
        "correct": false
      },
      {
        "text": "B. -1",
        "correct": false
      },
      {
        "text": "C. the number of lines contained inside the file",
        "correct": false
      },
      {
        "text": "D. the length of the last line from the file",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? my_list = [i for i in range(5)] m = [my_list[i] for i in range(4, 0, -1) if my_list [i] % 2 != 0] Correct Answer: C Section: (none) ",
    "code": "print(m)\n",
    "answers": [
      {
        "text": "A. it outputs [1, 3]",
        "correct": false
      },
      {
        "text": "B. the code is erroneous and it will not execute",
        "correct": false
      },
      {
        "text": "C. it outputs [3, 1]",
        "correct": false
      },
      {
        "text": "D. it outputs [4, 2, 0]",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the following code has been executed successfully, which of the expressions evaluate to True? (Choose two.) nom, denom = x, y return nom / denom return g a = f(1, 2) b = f(3, 4) Correct Answer: BC Section: (none) ",
    "code": "def f(x, y):\ndef g():\n",
    "answers": [
      {
        "text": "A. b() == 4",
        "correct": false
      },
      {
        "text": "B. a != b",
        "correct": false
      },
      {
        "text": "C. a is not None",
        "correct": false
      },
      {
        "text": "D. a() == 4",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code? return y(x) + (x + 1) Section: (none) ",
    "code": "def foo(x, y):\nprint(foo(1, lambda x: x*x))\n",
    "answers": [
      {
        "text": "A. 3",
        "correct": false
      },
      {
        "text": "B. 5",
        "correct": false
      },
      {
        "text": "C. 4",
        "correct": false
      },
      {
        "text": "D. an exception is raised Correct Answer: A",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following lambda definitions are corre ct? (Choose two.) Correct Answer: AC Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. lambda x,y: (x,y)",
        "correct": false
      },
      {
        "text": "B. lambda x,y: return x//y - x%y",
        "correct": false
      },
      {
        "text": "C. lambda x,y: x//y - x%y",
        "correct": false
      },
      {
        "text": "D. lambda x,y = x//y - x%y",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following statements are true? (Choose  two.) Correct Answer: AC Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. if invoking open () fails, an exception is raised",
        "correct": false
      },
      {
        "text": "B. open () requires a second argument",
        "correct": false
      },
      {
        "text": "C. open () is a function which returns an object tha t represents a physical file",
        "correct": false
      },
      {
        "text": "D. instd, outstd. errstd are the names of pre-opened  streams",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? x = 3 % 1 y = 1 if x > 0 else 0 Correct Answer: D Section: (none) ",
    "code": "print(y)\n",
    "answers": [
      {
        "text": "A. the code is erroneous and it will not execute",
        "correct": false
      },
      {
        "text": "B. it outputs 1",
        "correct": false
      },
      {
        "text": "C. it outputs -1",
        "correct": false
      },
      {
        "text": "D. it outputs 0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following snippets will execute withou t raising any unhandled exceptions? (Choose two.) except (ValueError, NameError): else: except: else: except ValueError: else: except: else: Correct Answer: AD Section: (none) ",
    "code": "A. try:     print(float(\"1e1\"))\nprint(float(\"1a1\"))\nprint(float(\"101\"))\nprint(1/1)\nprint(2/1)\nprint(3/0)\nprint(1/0)\nprint(1/1)\nprint(1/2)\nprint(0/1)\nprint(1/1)\nprint(2/1)\n",
    "answers": [
      {
        "text": "B. try:",
        "correct": false
      },
      {
        "text": "C. try:",
        "correct": false
      },
      {
        "text": "D. try:",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following expressions evaluate to True ? (Choose two.) Correct Answer: BD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. '8' + '8' != 2 * '8'",
        "correct": false
      },
      {
        "text": "B. 'xYz'.lower() > 'XY'",
        "correct": false
      },
      {
        "text": "C. float('3.14') == str('3.' + '14')",
        "correct": false
      },
      {
        "text": "D. 121 + 1 == int('1' + 2 * '2')",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? class Class: Var = 0 Class.Var += 1 return Class.Var  o = Class() o.__Class_foo() Correct Answer: A Section: (none) ",
    "code": "def __foo(self):\nprint(o.__Class_foo()) A. it raises an exception\n",
    "answers": [
      {
        "text": "B. it outputs 3",
        "correct": false
      },
      {
        "text": "C. it outputs 1",
        "correct": false
      },
      {
        "text": "D. it outputs 6",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? x = 8 ** (1 / 3) y = 2. if x < 2.3 else 3. Correct Answer: B Section: (none) ",
    "code": "print(y)\n",
    "answers": [
      {
        "text": "A. the code is erroneous and it will not execute",
        "correct": false
      },
      {
        "text": "B. it outputs 2.0",
        "correct": false
      },
      {
        "text": "C. it outputs 2.5",
        "correct": false
      },
      {
        "text": "D. it outputs 3.0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? my_list = [i for i in range(5, 0, -1)] m = [my_list[i] for i in range(5) if my_list[i] % 2  == 0] Correct Answer: A Section: (none) ",
    "code": "print(m)\n",
    "answers": [
      {
        "text": "A. it outputs [4, 2]",
        "correct": false
      },
      {
        "text": "B. it outputs [2, 4]",
        "correct": false
      },
      {
        "text": "C. it outputs [0, 1, 2, 3, 4]",
        "correct": false
      },
      {
        "text": "D. the code is erroneous and it will not execute",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "The __bases__ property contains: Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. base class location (addr)",
        "correct": false
      },
      {
        "text": "B. base class objects (class)",
        "correct": false
      },
      {
        "text": "C. base class names (str)",
        "correct": false
      },
      {
        "text": "D. base class ids (int) Correct Answer: B",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? class Super: pass return self.make()  class Sub_A(Super): return 1  class Sub_B(Super): pass a = Sub_A() b = Sub_B() Correct Answer: B Section: (none) ",
    "code": "def make(self):\ndef doit(self):\ndef make(self):\nprint(a.doit() + b.doit())\n",
    "answers": [
      {
        "text": "A. it outputs 0",
        "correct": false
      },
      {
        "text": "B. it raises an exception",
        "correct": false
      },
      {
        "text": "C. it outputs 1",
        "correct": false
      },
      {
        "text": "D. it outputs 2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following statements are true? (Choose  two.) Correct Answer: CD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. an escape sequence can be recognized by the / sig n put in front of it",
        "correct": false
      },
      {
        "text": "B. II in ASCII stands for Internal Information",
        "correct": false
      },
      {
        "text": "C. ASCII is a subset of UNICODE",
        "correct": false
      },
      {
        "text": "D. a code point is a number assigned to a given char acter",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? string = '123' dummy = 0 for character in reversed(string): dummy += int(character) Correct Answer: C Section: (none) ",
    "code": "print(dummy) A. it outputs 321\n",
    "answers": [
      {
        "text": "B. it outputs 123",
        "correct": false
      },
      {
        "text": "C. it outputs 6",
        "correct": false
      },
      {
        "text": "D. it raises an exception",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "A Python module named pymod.py contains a variable named pyvar. Which of the following snippets will let you access  the variable? (Choose two.) pymod.pyvar = 1 pyvar = 1 pyvar() pyvar = 1 Correct Answer: AD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. import pymod",
        "correct": false
      },
      {
        "text": "B. import pyvar from pymod",
        "correct": false
      },
      {
        "text": "C. from pymod import pyvar",
        "correct": false
      },
      {
        "text": "D. from pymod import *",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following expressions evaluate to True ? (Choose two.) Correct Answer: BD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. ord('a') - ord('A') == ord('0')",
        "correct": false
      },
      {
        "text": "B. len(\"\"\" \"\"\") > 0",
        "correct": false
      },
      {
        "text": "C. chr(ord('a') + 1) == 'B'",
        "correct": false
      },
      {
        "text": "D. len('\\'') == 1   # ' \\' '",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code i f the file named non_zero_length_existing_text_file  is a non-zero length file located inside the working dir ectory? try: f = open('non_zero_length_existing_text_file', 'rt') d = f.read(1) f.close() except IOError: Correct Answer: D Section: (none) ",
    "code": "print(len(d))\nprint(-1) A. -1\n",
    "answers": [
      {
        "text": "B. 0",
        "correct": false
      },
      {
        "text": "C. an errno value corresponding to file not found",
        "correct": false
      },
      {
        "text": "D. 1",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the code below has been executed succ essfully, which of the expressions evaluate to True ? (Choose two.) class Class: var = 1 self.prop = value Object = Class(2) Correct Answer: AC Section: (none) ",
    "code": "def __init__(self, value):\n",
    "answers": [
      {
        "text": "A. 'var' in Class.__dict__",
        "correct": false
      },
      {
        "text": "B. 'var' in Object.__dict__",
        "correct": false
      },
      {
        "text": "C. len(Object.__dict__) == 1",
        "correct": false
      },
      {
        "text": "D. 'prop' in Class.__dict__",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? the_list = \"1, 2, 3\".split() the_string = ''.join(the_list) Correct Answer: D Section: (none) ",
    "code": "print(the_string.isdigit())\n",
    "answers": [
      {
        "text": "A. it raises an exception",
        "correct": false
      },
      {
        "text": "B. it outputs nothing",
        "correct": false
      },
      {
        "text": "C. it outputs True",
        "correct": false
      },
      {
        "text": "D. it outputs False",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the code below has been executed succ essfully, which of the following expressions will always evaluate to True? (Choose two.) import random v1 = random.random() v2 = random.random() Correct Answer: BC Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. v1 == v2",
        "correct": false
      },
      {
        "text": "B. v1 < 1",
        "correct": false
      },
      {
        "text": "C. random.choice([1, 2, 3]) > 0",
        "correct": false
      },
      {
        "text": "D. len(random.sample([1, 2, 3], 1)) > 2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "With regards to the directory structure below, sele ct the proper forms of the directives in order to i mport module_b. (Choose two.) pypack  (dir) | |-- upper  (dir) |  | |  |-- lower  (dir) |  |   | |  |   |_ module_c.py (file) |  | |  |_ module_b.py (file) | |_ module_a.py (file) Correct Answer: AB Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. from pypack.upper import module_b",
        "correct": false
      },
      {
        "text": "B. import pypack.upper.module_b",
        "correct": false
      },
      {
        "text": "C. import upper_module_b",
        "correct": false
      },
      {
        "text": "D. import module_b",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following lines of code will work flaw lessly when out independently inside the inc() meth od in order to make the snippet's output equal to 3? (Cho ose two.) class MyClass: Var = 0 MyClass.Var += 1 self.prop = MyClass.Var return self.prop self.prop = val Object = MyClass() Object.inc(2) Correct Answer: CD Section: (none) ",
    "code": "def __init__(self):\ndef get(self):\ndef put(self, val):\ndef inc(self, val):\n# insert the line of code here\nprint(Object.get())\n",
    "answers": [
      {
        "text": "A. put(self.prop + val)",
        "correct": false
      },
      {
        "text": "B. self.put(get() + val)",
        "correct": false
      },
      {
        "text": "C. self.put(self.get() + val)",
        "correct": false
      },
      {
        "text": "D. self.put(self.prop + val)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code? import sys b1 = type(dir(sys)) is str b2 = type(sys.path[-1]) is str Correct Answer: A Section: (none) ",
    "code": "print(b1 and b2)\n",
    "answers": [
      {
        "text": "A. False",
        "correct": false
      },
      {
        "text": "B. 0",
        "correct": false
      },
      {
        "text": "C. None",
        "correct": false
      },
      {
        "text": "D. True",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is true about Python class constructors? (Choo se two.) Correct Answer: AC Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. there can be only one constructor in a Python cla ss",
        "correct": false
      },
      {
        "text": "B. the constructor cannot be invoked directly under any circumstances",
        "correct": false
      },
      {
        "text": "C. the constructor cannot return a result other than  None",
        "correct": false
      },
      {
        "text": "D. the constructor's first parameter must always be named self",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? return y(x) + y(x+1) Correct Answer: D Section: (none) ",
    "code": "def foo(x, y):\nprint(foo(1, lambda x: x*x))\n",
    "answers": [
      {
        "text": "A. 4B. 3",
        "correct": false
      },
      {
        "text": "C. an exception is raised",
        "correct": false
      },
      {
        "text": "D. 5",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the following inheritance set is in f orce, which of the following classes are declared p roperly? (Choose two.) class A: pass class B(A): pass class C(A): pass class D(B, C): pass Correct Answer: BC Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. class Class_3(A, C): pass",
        "correct": false
      },
      {
        "text": "B. class Class_4(C, B): pass",
        "correct": false
      },
      {
        "text": "C. class Class_1(D, A): pass",
        "correct": false
      },
      {
        "text": "D. class Class_2(A, B): pass",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? s = '2A' try: n = int(s) except ValueError: n = 2 except ArithmeticError: n = 1 except: n = 0 Correct Answer: D Section: (none) ",
    "code": "print(n)\n",
    "answers": [
      {
        "text": "A. it outputs 0",
        "correct": false
      },
      {
        "text": "B. the code is erroneous and it will not execute",
        "correct": false
      },
      {
        "text": "C. it outputs 1",
        "correct": false
      },
      {
        "text": "D. it outputs 2",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "Which of the following expressions evaluate to True ? (Choose two.) Correct Answer: BD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. 'in' in 'Thames'",
        "correct": false
      },
      {
        "text": "B. 'in' in 'in'",
        "correct": false
      },
      {
        "text": "C. 'in not' in 'not'",
        "correct": false
      },
      {
        "text": "D. 't'.upper() in 'Thames'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? class Class: Variable = 0 self.value = 0 object_1 = Class() Class.Variable += 1 object_2 = Class() object_2.value += 1 Correct Answer: C Section: (none) ",
    "code": "def __init__(self):\nprint(object_2.Variable + object_1.value)\n",
    "answers": [
      {
        "text": "A. it outputs 2",
        "correct": false
      },
      {
        "text": "B. it raises an exception",
        "correct": false
      },
      {
        "text": "C. it outputs 1",
        "correct": false
      },
      {
        "text": "D. it outputs 0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following invocations are valid? (Choo se two.) Correct Answer: BC Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. sort(\"python\")",
        "correct": false
      },
      {
        "text": "B. \"python\".find(\"\")",
        "correct": false
      },
      {
        "text": "C. \"python\".rindex(\"th\")",
        "correct": false
      },
      {
        "text": "D. \"python\".sorted()",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following snippe t? class Upper: self.property = 'upper' class Lower(Upper): super().__init__() Object = Lower() Correct Answer: B Section: (none) ",
    "code": "def __init__(self):\ndef __init__(self):\nprint(isinstance(Object, Lower), end=' ')\nprint(Object.property)\n",
    "answers": [
      {
        "text": "A. True lower",
        "correct": false
      },
      {
        "text": "B. True upper",
        "correct": false
      },
      {
        "text": "C. False upper",
        "correct": false
      },
      {
        "text": "D. False lower",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the snippet below has been executed s uccessfully, which of the following expressions evaluate to True? (Choose two.) string = 'SKY'[::-1] string = string[-1] Correct Answer: BD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. string[0] == 'Y'",
        "correct": false
      },
      {
        "text": "B. string[0] == string [-1]",
        "correct": false
      },
      {
        "text": "C. string is None",
        "correct": false
      },
      {
        "text": "D. len(string) == 1",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the code below has been placed inside  a file named code.py and executed successfully, which of the following expressions evaluate to True ? (Choose two.) class ClassA: var = 1 prop1 = prop2 = prop class ClassB(ClassA): prop3 = prop ** 2 super().__init__(prop) return 'Object'  Object = ClassA(2) A. ClassA.__module__ == '__main__' Correct Answer: AB Section: (none) ",
    "code": "def __init__(self, prop):\ndef __init__(self, prop):\ndef __str__(self):\n",
    "answers": [
      {
        "text": "B. __name__ == '__main__'",
        "correct": false
      },
      {
        "text": "C. str(Object) == 'Object'",
        "correct": false
      },
      {
        "text": "D. len(ClassB.__bases__) == 2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following expressions evaluate to True ? (Select two answers) Correct Answer: CD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. 11 == '011'",
        "correct": false
      },
      {
        "text": "B. 3 * 'a' < 'a' * 2",
        "correct": false
      },
      {
        "text": "C. 'abc'.upper() < 'abc'",
        "correct": false
      },
      {
        "text": "D. '1' + 2 * '2' != 2 * '12'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following invocations are valid? (Sele ct two answers) Correct Answer: AD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. sorted('python')",
        "correct": false
      },
      {
        "text": "B. 'python'.sort()",
        "correct": false
      },
      {
        "text": "C. sort('python')",
        "correct": false
      },
      {
        "text": "D. 'python'.find(' ')",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code? return x(y(z)) Correct Answer: A Section: (none) ",
    "code": "def foo(x, y, z):\nprint(foo(lambda x: 2*x, lambda x: x//2, 2))\n",
    "answers": [
      {
        "text": "A. 2",
        "correct": false
      },
      {
        "text": "B. 3",
        "correct": false
      },
      {
        "text": "C. 4",
        "correct": false
      },
      {
        "text": "D. an exception is raised",
        "correct": false
      }
    ],
    "explanation": "Explanation Explanation/Reference:"
  },
  {
    "question": "With regards to the directory structure below, sele ct the proper forms of the directives in order to i mport module_c. (Select two answers) pypack  (dir) | |-- upper  (dir) |  | |  |-- lower  (dir) |  |   | |  |   |_ module_c.py (file) |  | |  |_ module_b.py (file) | |_ module_a.py (file) Correct Answer: AB Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. from pypack.upper.lower import module_c",
        "correct": false
      },
      {
        "text": "B. import pypack.upper.lower.module_c",
        "correct": false
      },
      {
        "text": "C. import upper.module_c",
        "correct": false
      },
      {
        "text": "D. import upper.lower.module_c",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following expression evaluate to True?  (Select two answers) 34''') == 4 Correct Answer: CD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. ord('0') - ord('9') == 10",
        "correct": false
      },
      {
        "text": "B. len('''12",
        "correct": false
      },
      {
        "text": "C. len(\"''\") == 2        # \" ' ' \"",
        "correct": false
      },
      {
        "text": "D. chr(ord('Z') - 1) == 'Y'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code i f existing_file is the name of a file located insid e the working directory? try: f = open('existing_file', 'w') except IOError as error: else: f.close() Correct Answer: B Section: (none) ",
    "code": "print(1, end=' ')\nprint(error.errno, end=' ')\nprint(2, end=' ')\nprint(3, end=' ')\n",
    "answers": [
      {
        "text": "A. 2 3 B. 1 3",
        "correct": false
      },
      {
        "text": "C. 1 2",
        "correct": false
      },
      {
        "text": "D. 1 2 3",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code? return x(y) - x(z) Correct Answer: B Section: (none) ",
    "code": "def foo(x,y,z):\nprint(foo(lambda x: x % 2, 2, 1))\n",
    "answers": [
      {
        "text": "A. 1",
        "correct": false
      },
      {
        "text": "B. -1",
        "correct": false
      },
      {
        "text": "C. an exception is raised",
        "correct": false
      },
      {
        "text": "D. 0",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the math module has been successfully  imported, which of the following expressions evaluate to True? (Select two answers) Correct Answer: BD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. math.hypot(2,5) == math.trunc(2.5)",
        "correct": false
      },
      {
        "text": "B. math.floor(2.5) == math.trunc(2.5)",
        "correct": false
      },
      {
        "text": "C. math.ceil(2.5) == math.floor(2.5)",
        "correct": false
      },
      {
        "text": "D. math.hypot(3,4) == math.sqrt(25)",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following statements are true? (Select  two answers) Correct Answer: AC Section: (none) Which of the following statement are true? (Select two answers) Correct Answer: AC Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. ASCII is the name of a character coding standard",
        "correct": false
      },
      {
        "text": "B. an escape sequence can be recognized by the # sig n put in front of it.",
        "correct": false
      },
      {
        "text": "C. UTF-8 is one of the ways of representing UNICODE code points.",
        "correct": false
      },
      {
        "text": "D. a code point is a point inside the code when exec ution stops immediately",
        "correct": false
      },
      {
        "text": "A. if open( )'s second argument is 'w' and the invoc ation succeeds, the previous file's content is lost",
        "correct": false
      },
      {
        "text": "B. closing an open file is performed by the closefil e( ) function",
        "correct": false
      },
      {
        "text": "C. if open( )'s second argument is 'r' the file must  exist or open will fail",
        "correct": false
      },
      {
        "text": "D. the second open( ) argument describes the open mo de and defaults to 'w'",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference: QUESTION 405ExplanationExplanation/Reference:"
  },
  {
    "question": "What is true about Python packages? (Select two ans wers) Correct Answer: CD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. a code designed to initialize a package's state s hould be placed inside a file named init.py",
        "correct": false
      },
      {
        "text": "B. a package contents can be stored and distributed as an mp3 file",
        "correct": false
      },
      {
        "text": "C. _pycache_is a folder that stores semi-completed Pyt hon modules",
        "correct": false
      },
      {
        "text": "D. the sys.path variable is a list of strings",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? class Class: _Var = 1 __Var = 2 self._prop = 3 self.__prop = 4 o = Class() Correct Answer: D Section: (none) ",
    "code": "def __init__(self):\nprint(o._Class__Var + o._Class__prop)\n",
    "answers": [
      {
        "text": "A. it raises an exception",
        "correct": false
      },
      {
        "text": "B. it outputs 1",
        "correct": false
      },
      {
        "text": "C. it outputs 3",
        "correct": false
      },
      {
        "text": "D. it outputs 6",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following lines of code will work flaw lessly when put independently inside the dup() meth od in order to make the snippet's output equal to [0, 1, 1] ? (Select two answers) class MyClass: self.store = initial self.store.append(new) return self.store  Object = MyClass([0]) Object.put(1) Object.dup() Correct Answer: BC Section: (none) ",
    "code": "def __init__(self, initial):\ndef put(self, new):\ndef get(self):\ndef dup(self):\n# Insert the line of code here\nprint(Object.get())\n",
    "answers": [
      {
        "text": "A. put(self.store[1])",
        "correct": false
      },
      {
        "text": "B. self.put(self.store[1])",
        "correct": false
      },
      {
        "text": "C. self.put(self.get()[-1])",
        "correct": false
      },
      {
        "text": "D. self.put(store[1])",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code i f there is no file named non_existing_file inside t he working directory? try: f = open('non_existing_file', 'r') except IOError as error: else: f.close() Correct Answer: A Section: (none) ",
    "code": "print(1, end=' ')\nprint(error.errno, end=' ')\nprint(2, end=' ')\nprint(3, end=' ')\n",
    "answers": [
      {
        "text": "A. 2 2",
        "correct": false
      },
      {
        "text": "B. 1 3",
        "correct": false
      },
      {
        "text": "C. 1 2 3",
        "correct": false
      },
      {
        "text": "D. 2 2 3",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following lambda function definitions are correct? (Select two answers) Correct Answer: AB Section: (none) ",
    "code": "C. lambda x: def fun(): return x\n",
    "answers": [
      {
        "text": "A. lambda x: None B. lambda: 3.1415",
        "correct": false
      },
      {
        "text": "D. lambda lambda: lambda * lambda",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is true about Python class constructors? (Sele ct two answers) Correct Answer: AD Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. the constructor's first parameter identifies an o bject currently being created",
        "correct": false
      },
      {
        "text": "B. the constructor cannot use the default values of the parameters",
        "correct": false
      },
      {
        "text": "C. the constructor can be invoked directly under str ictly defined circumstances",
        "correct": false
      },
      {
        "text": "D. super-class constructor is invoked implicitly dur ing constructor execution",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? class Class: Variable = 0 self.value = 0 object_1 = Class() object_1.Variable += 1 object_2 = Class() object_2.value += 1 Correct Answer: B Section: (none) ",
    "code": "def __init__(self):\nprint(object_2.Variable + object_1.value)\n",
    "answers": [
      {
        "text": "A. it outputs 1",
        "correct": false
      },
      {
        "text": "B. it outputs 0",
        "correct": false
      },
      {
        "text": "C. it raises an exception",
        "correct": false
      },
      {
        "text": "D. it outputs 2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is true about Python packages? (Select two ans wers) Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. the __name__ variable content determines the way in which the module was run",
        "correct": false
      },
      {
        "text": "B. a package can be stored as a tree of sub-director ies/sub-folders",
        "correct": false
      },
      {
        "text": "C. __pycache__ is the name of a built-in variable",
        "correct": false
      },
      {
        "text": "D. hashbang is the name of a built-in Python functio n Correct Answer: AB",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is true about Object-Oriented Programming in P ython? (Select two answers) Correct Answer: AC Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. encapsulation allows you to protect some data fro m uncontrolled access",
        "correct": false
      },
      {
        "text": "B. the arrows on a class diagram are always directed  from a superclass towards its subclass",
        "correct": false
      },
      {
        "text": "C. inheritance is the relation between a superclass and a subclass",
        "correct": false
      },
      {
        "text": "D. an object is a recipe for a class",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected behavior of the following code ? the_string = ',,'.join(('alpha', 'omega')) the_list = the_string.split(',') Correct Answer: A Section: (none) ",
    "code": "print(',' in the_list)\n",
    "answers": [
      {
        "text": "A. It outputs False",
        "correct": false
      },
      {
        "text": "B. It outputs nothing",
        "correct": false
      },
      {
        "text": "C. It outputs True",
        "correct": false
      },
      {
        "text": "D. It raises an exception",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the following code has been executed successfully, select the expressions which evaluate  to True (Select two answers) var = 1 global var var += 1 return var return g a = f() b = f() Section: (none) ",
    "code": "def f():\ndef g():\n",
    "answers": [
      {
        "text": "A. a is b",
        "correct": false
      },
      {
        "text": "B. b() > 2",
        "correct": false
      },
      {
        "text": "C. a() == 2",
        "correct": false
      },
      {
        "text": "D. a is not None Correct Answer: BD",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code? myli = range(-2,2) m = list(filter(lambda x: True if abs(x) < 1 else F alse, myli)) Correct Answer: D Section: (none) ",
    "code": "print(len(m))\n",
    "answers": [
      {
        "text": "A. 4",
        "correct": false
      },
      {
        "text": "B. 16",
        "correct": false
      },
      {
        "text": "C. an exception is raised",
        "correct": false
      },
      {
        "text": "D. 1",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Which of the following expressions evaluate to True ? (Select two answers) Correct Answer: AC Section: (none) ",
    "code": "",
    "answers": [
      {
        "text": "A. 't'.upper() in 'Thames'",
        "correct": false
      },
      {
        "text": "B. 'in not' in 'not'",
        "correct": false
      },
      {
        "text": "C. 'not' not in 'in'",
        "correct": false
      },
      {
        "text": "D. 'a' not in 'ABC'.lower()",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "Assuming that the following piece of code has been executed successfully, which of the expressions evaluate to True? (Select two answers) class A: __VarA = 1 return self.__VarA  class B(A): __VarA = 2 return self.__VarA  class C(B): __VarA = 3 obj_a = A() obj_b = B() obj_c = C() A. isinstance(obj_b, C) Correct Answer: CD Section: (none) ",
    "code": "def get(self):\ndef get(self):\n",
    "answers": [
      {
        "text": "B. C._C__VarA == 2",
        "correct": false
      },
      {
        "text": "C. hasattr(B, 'get')",
        "correct": false
      },
      {
        "text": "D. obj_c.get() == 2",
        "correct": false
      }
    ],
    "explanation": "ExplanationExplanation/Reference:"
  },
  {
    "question": "What is the expected output of the following code?",
    "code": "22.         print(\"Woof!\" )\n23.\n24.\n25. a = Animal( \"Buddy\" )\n26. c = Cat( \"Fluffy\" )\n27. d = Dog( \"Max\")\n28.\n29. a.speak()\n30. c.speak()\n31. d.speak()\n1. class MyClass:\n2.     class_variable = 42\n3.\n4.     def __init__( self, instance_variable):\n5.         self.instance_variable = instance_variable\n6.\n7. # Accessing class variable\n8. print(MyClass.class_variable)  # Output: 42\n9.\n10. # Creating instances of the class\n11. obj1 = MyClass(1)\n12. obj2 = MyClass(2)\n13.\n14. # Accessing instance variables\n15. print(obj1.instance_variable)  # Output: 1\n16. print(obj2.instance_variable)  # Output: 2\n17.\n18. # Modifying class variable\n19. MyClass.class_variable = 50\n20.   21. # Class variable change reflected in instances\n22. print(obj1.class_variable)  # Output: 50\n23. print(obj2.class_variable)  # Output: 50\n1. class MyClass:\n2.     def __init__( self):\n3.         self.my_attribute = 42\n4.\n5. obj = MyClass()\n6.\n7. print(hasattr(obj, 'my_attribute' ))  # Output: True\n8. print(hasattr(obj, 'nonexistent_attribute' ))  # Output: False\n1. class MyClass:\n2.     my_class_attribute = 42\n3.\n4. print(hasattr(MyClass, 'my_class_attribute' ))  # Output: True\n5. print(hasattr(MyClass, 'nonexistent_class_attribute' ))  # Output: False\n1.print(' \\n '.isspace())\n2.print(\" \".isspace())\n3.print(\"How are you\" .isspace())\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "What is the output of the following code in Python?1.classAnimal: 2.     def__init__( self, name): 3.         self.name = name 4. 5.     defspeak(self): 6.         pass 7. 8. 9.classCat(Animal): 10.    def__init__( self, name): 11.        super().__init__(name) 12. 13.    defspeak(self): 14.        print(\"Meow!\" ) 15. 16. 17.classDog(Animal): 18.    def__init__( self, name): 19.        super().__init__(name) 20. 21.    defspeak(self): 22.        print(\"Woof!\" ) 23. 24. 25.a = Animal( \"Buddy\" ) 26.c = Cat( \"Fluffy\" ) 27.d = Dog( \"Max\") 28. 29.a.speak() 30.c.speak() 31.d.speak()",
    "section": "Data Types"
  },
  {
    "question": "",
    "code": "9.     print('Oh no' )\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "Meow! Meow! Woof! Woof! Meow! Woof! (Correct) Woof! Meow! Explanation Try it yourself: 1. class Animal: 2.     def __init__( self, name): 3.         self.name = name 4. 5.     def speak( self): 6.         pass 7. 8. 9. class Cat(Animal): 10.     def __init__( self, name): 11.         super().__init__(name) 12. 13.     def speak( self): 14.         print(\"Meow!\" ) 15. 16. 17. class Dog(Animal): 18.     def __init__( self, name): 19.         super().__init__(name) 20. 21.     def speak( self): 22.         print(\"Woof!\" ) 23. 24. 25. a = Animal( \"Buddy\" ) 26. c = Cat( \"Fluffy\" ) 27. d = Dog( \"Max\") 28. 29. a.speak() 30. c.speak() 31. d.speak() Explanation: The Animal class has a speak() method that does nothing, so calling a.speak() doesn't produce any output. The Cat and Dog classes both have their own speak() method that prints a message, so calling c.speak() produces \"Meow!\" and calling d.speak() produces \"Woof!\". Question 3: Skipped",
    "section": "Data Types"
  },
  {
    "question": "What is true?(Select two true statements.)",
    "code": "",
    "answers": [],
    "correct_answers": [],
    "explanation": "<b>ProCoding<b> <b>ProCoding</b> (Correct) <b>ProCoding None of these. Explanation Try it yourself: 1.deftag(tg): 2.     tg2 = tg 3.     tg2 = tg[0] + '/'+ tg[1:] 4. 5.     definner(str): 6.         return tg + str + tg2 7.     return inner 8. 9. 10.b_tag = tag( '<b>') 11.print(b_tag( 'ProCoding' )) Explanation: The output of the code will be: <b>ProCoding</b>Thetagfunction takes a tag name as an argument and returns an inner function. The inner function takes a string as an argument and returns the string wrapped with the specified tag. In this case, b_tagis assigned the inner function returned bytag('<b>') , so when b_tagis called with the argument 'ProCoding', it returns '<b>ProCoding</b>' . Question 16: Skipped",
    "section": "Data Types"
  },
  {
    "question": "What is the expected output of the following code?",
    "code": "1.print('pro'>'Pro')\n2.\n3.print('Pro'<'Pro')\n4.\n5.print('PRO'>'1000')\n6.\n7.print('11'<'8')\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "If you want to import mathematical constant efrommath, which line will you use?",
    "section": "Data Types"
  },
  {
    "question": "",
    "code": "1.import os\n2. os.mkdir( 'new_directory' )\n3. os.chdir( 'new_directory' )\n4. os.mkdir( 'subdirectory' )\n5. os.chdir( 'subdirectory' )\n6.print(os.getcwd())\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "import e from math None of these from e import math from math import e (Correct) Explanation Try it yourself: 1.frommath import e 2. 3.# Using the constant e 4.print(\"The value of e is:\" , e) Explanation: In Python, the mathematical constant e can be imported from the mathmodule. Themathmodule provides various mathematical functions and constants including e. The line from math import e imports only the constant efrom the mathmodule. This means that we can now use the constant edirectly in our code, without having to prefix it with the module name math. The second line print(\"The value of e is:\", e) uses the print() function to display the value of e. The string \"The value of e is:\" is printed first, followed by the value of e. The value of eis obtained from the mathmodule, which we imported in the first line. When you run this code, you should see the output: 1. The value of e is: 2.718281828459045 This is the approximate value of the mathematical constant e, which is a fundamental mathematical constant that is used in many areas of mathematics and science, including calculus, probability, and physics. Question 17: Skipped",
    "section": "Data Types"
  },
  {
    "question": "",
    "code": "",
    "answers": [],
    "correct_answers": [],
    "explanation": "",
    "section": "Data Types"
  },
  {
    "question": "What is the output of the following code in Python?1.classAnimal:",
    "code": "1. ('Python is a ' ,'great' ,' language for programming' )\n2.     def__init__( self, name):\n3.         self.name = name\n4.\n5.     defspeak(self):\n6.         pass\n7.\n8.\n9.classCat(Animal):\n10.    def__init__( self, name):\n11.        super().__init__(name)\n12.\n13.    defspeak(self):\n14.        print(\"Meow!\" )\n15.\n16.\n17.classDog(Animal):\n18.    def__init__( self, name):\n19.        super().__init__(name)\n20.\n21.    defspeak(self):\n22.        print(\"Woof!\" )\n23.\n24.\n25.a = Animal( \"Buddy\" )\n26.c = Cat( \"Fluffy\" )\n27.d = Dog( \"Max\")\n28.\n29.a.speak()\n30.c.speak()\n31.d.speak()\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "What is the expected output of the following code? 1. s = \"Python is a great language for programming\" 2.print(s.partition( \"great\" ))",
    "section": "OOP (Object-Oriented Programming)"
  },
  {
    "question": "What is the output of the following code in Python?",
    "code": "4.except Exception asexception:\n5.     print(exception.args)\n6.else:\n7.     print(\"('yes',)\" )\n1.classMyClass:\n2.     pass\n3.\n4. obj = MyClass()\n5.\n6.print(hasattr(obj, '__name__' ))\n7.print(hasattr(obj, '__module__' ))\n8.print(hasattr(obj, '__bases__' ))\n9.print(hasattr(MyClass, '__name__' ))\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "",
    "section": "OOP (Object-Oriented Programming)"
  },
  {
    "question": "What is the output of the following code in Python?",
    "code": "3.print(result)\n1.classA:\n2.     A = 1\n3.\n4.classB:\n5.     b = 1\n6.7.classC(A, B):\n8.     pass\n9.\n10.print(hasattr(C, 'A'),end=\",\")\n11.print(hasattr(C, 'B'),end=\",\")\n12.print(hasattr(B, 'A'))\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "",
    "section": "OOP (Object-Oriented Programming)"
  },
  {
    "question": "What is the output of the following code in Python?",
    "code": "3.     print(content)\n1.withopen('file.txt' ,'r')asf:\n2.     partial_content = f.read(10)\n3.     print(partial_content)In this case, file.read(10) reads the first 10 bytes from the file and assigns them to\n1.classA:\n2.     x = 5\n3.\n4.classB(A):\n5.    pass\n6.\n7.classC(A):\n8.     x = 10\n9.\n10.classD(B, C):\n11.    pass\n12.\n13.obj = D()\n14.print(obj.x)\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "CustomError has occured. The code is erroneous. (Correct) Else Oh no Explanation Try it yourself: 1.try: 2.     if'42'> 42: 3.         raiseCustomError 4.     else: 5.         print('Else')6.except CustomError: 7.     print('CustomError has occured.' ) 8.else: 9.     print('Oh no' ) Explanation: The code is erroneous because CustomError is not defined. Here is the corrected code: 1.try: 2.     if'42'> 42: 3.         raiseTypeError 4.     else: 5.         print('Else') 6.except TypeError: 7.     print('TypeError has occurred.' ) 8.else: 9.     print('Oh no' ) Question 7: Skipped",
    "section": "OOP (Object-Oriented Programming)"
  },
  {
    "question": "What is the output of the following code in Python?",
    "code": "10.classD(B, C):\n11.    pass\n12.\n13.obj = D()\n14.print(obj.x)\n6. scipy              1.7.3\n1.classMyClass:\n2.     __private_var = 10\n3.\n4.     defget_private_var( self):\n5.         return self .__private_var\n6.\n7.     defset_private_var( self, value):\n8.         self.__private_var = value\n9.\n10.a = MyClass()\n11.a.set_private_var(20)\n12.\n13.print(a.get_private_var())\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "('list index out of range',) (Correct) 13 -4 42 ('yes',) Explanation Try it yourself: 1. data = [42, 13, -4] 2.try: 3.     print(data[-4]) 4.except Exception asexception: 5.     print(exception.args) 6.else: 7.     print(\"('yes',)\" ) Explanation: The expected output of the code is (\"list index out of range\",) . Whendata[-4] is accessed, an IndexError is raised since the index -4is out of range for the list data. This exception is caught by the exceptblock and its error message is printed with the argsattribute of the exception object. The output is(\"list index out of range\",) . Since an exception was caught and printed, the code in the elseblock will not be executed. Question 8: Skipped",
    "section": "OOP (Object-Oriented Programming)"
  },
  {
    "question": "",
    "code": "11.a.set_private_var(20)\n12.\n13.print(a.get_private_var())\n5.\n6.print(result)\n10.        if self .i == len( self.lst):\n11.            raiseStopIteration\n12.        v = self.lst[self.i]\n13.        self.i += 1\n14.        return v\n15.\n16.b = B([1, 2, 3, 4])\n17.forx inb:\n18.    print(x,end=\"\")\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "[\"a\", \"aa\", \"aaa\", \"b\", \"bb\", \"bbb\", \"c\", \"cc\", \"ccc\"] [\"aa\", \"bb\", \"cc\"] [\"aa\", \"cc\"] (Correct) [\"a\", \"b\", \"c\"] Explanation Try it yourself: 1. letters = [ \"a\",\"b\",\"c\"] 2. result = [letter*2 forletter inletters ifletter!= \"b\"] 3.print(result) Explanation: This code uses a list comprehension to create a new list containing each letter in theletters list repeated twice, except for the letter \"b\", which is filtered out. Therefore, only the letters \"a\" and \"c\" are included in the result, and they are repeated twice: [\"aa\", \"cc\"]. Question 10: Skipped",
    "section": "OOP (Object-Oriented Programming)"
  },
  {
    "question": "",
    "code": "14.         return v\n15.\n16. b = B([1, 2, 3, 4])\n17. for x in b:\n18.     print (x, end=\"\")\n5.print(result)\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "True,True,False True,False,False (Correct) True,False,True False,False,False Explanation Try it yourself: 1.classA: 2.     A = 1 3. 4.classB: 5.     b = 1 6. 7.classC(A, B): 8.     pass 9. 10.print(hasattr(C, 'A'),end=\",\") 11.print(hasattr(C, 'B'),end=\",\") 12.print(hasattr(B, 'A')) Explanation: hasattr(C, 'A') will return True because Ais defined in class A, and classCinherits from A. hasattr(C, 'B') will return False because Bis not defined in either class Bor classA. hasattr(B, 'A') will return False because Ais not defined in class B. Question 11: Skipped",
    "section": "OOP (Object-Oriented Programming)"
  },
  {
    "question": "",
    "code": "1.classRectangle:\n2.     def__init__( self, length=1, width=1):\n3.         self.__length = length\n4.         self.__width = width\n5.\n6.     defset_length( self, length):\n7.         self.__length = length\n8.\n9.     defset_width( self, width):\n10.        self.__width = width\n11.\n12.    defarea(self):\n13.        return self .__length * self.__width\n14.\n15.rect = Rectangle()\n16.print(rect.set_length(5))\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "1 3 2 1 (Correct) 1 2 3 3 Explanation Try it yourself: 1.defcountdown(n): 2.     whilen > 0: 3.         yieldn 4.         n -= 1 5. 6.forx incountdown(3): 7.     print(x,end=\" \") Explanation: The output of the code is: 1. 3 2 1 Thecountdown function takes a number nand yields a sequence of integers fromndown to 1 (inclusive). The forloop iterates through the values yielded by the generator function and prints them, separated by a space. In this case, the output is 3 2 1, which are the values yielded by the generator function. Question 13: Skipped",
    "section": "OOP (Object-Oriented Programming)"
  },
  {
    "question": "What is the output of the following code in Python?",
    "code": "12.     def area(self):\n13.         return self.__length * self.__width\n14.\n15. rect = Rectangle()\n16. print(rect.set_length(5))\n17.\n18. print(rect.area())\n1. class A:\n2.     var_a = 10\n3.     def fun_a( self):\n4.         return 11\n5.\n6.\n7. class B:\n8.     var_b = 20\n9.     def fun_b( self):\n10.         return 21\n11.\n12.\n13. class Sub(A, B):\n14.     pass\n15.\n16.\n17. obj = Sub()\n18.\n19. print(obj.var_a, obj.fun_b())\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "The code is erroneous. 1 (Correct) 3 2 Explanation Try it yourself: 1. a, b = 42.0, 0 2.try: 3.     c = a / b 4.except ArithmeticError: 5.     c = 1 6.except ZeroDivisionError: 7.     c = 2 8.else: 9.     c = 3 10.print(c) Explanation: The expected output of the following code is: 1. 1 In thetryblock, the statement c = a / b would raise a ZeroDivisionError , which is a subclass of the ArithmeticError exception. However, in the exceptblock, theArithmeticError exception would be caught before theZeroDivisionError exception. Therefore, the value of cwould be set to 1. Finally, the value of cis printed, which would be 1. Question 14: Skipped",
    "section": "OOP (Object-Oriented Programming)"
  },
  {
    "question": "What is the expected output of the following code in Python?",
    "code": "2.     if'42'> 42:\n3.         raiseCustomError\n4.     else:\n5.         print('Else')6.except CustomError:\n7.     print('CustomError has occured.' )\n8.else:\n9.     print('Oh no' )\n1.try:\n2.     if'42'> 42:\n3.         raiseTypeError\n4.     else:\n5.         print('Else')\n6.except TypeError:\n7.     print('TypeError has occurred.' )\n8.else:\n9.     print('Oh no' )\n1. data = [42, 13, -4]\n2.try:\n3.     print(data[-4])\n4.except Exception asexception:\n5.     print(exception.args)\n6.else:\n7.     print(\"('yes',)\" )\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "",
    "section": "Exceptions"
  },
  {
    "question": "What is the expected output of the following code?",
    "code": "7.         return v\n8.\n9. a=A()\n10.print(a.set(a.v + 1))\n1. a, b = 42.0, 0\n2.try:\n3.     c = a / b4.except ArithmeticError:\n5.     c = 1\n6.except ZeroDivisionError:\n7.     c = 2\n8.else:\n9.     c = 3\n10.print(c)\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "The hasattr function in Python is used to check if an object has a given named attribute. It takes two arguments: the first is the object whose attributes are to be checked, and the second is a string representing the name of the attribute to be checked. If the attribute is found in the object, hasattr returns True, otherwise it returns False. Here's an example to demonstrate the usage of hasattr() : 1. class MyClass: 2.     def __init__( self): 3.         self.my_attribute = 42 4. 5. obj = MyClass() 6. 7. print(hasattr(obj, 'my_attribute' ))  # Output: True 8. print(hasattr(obj, 'nonexistent_attribute' ))  # Output: False In this example, obj is an instance of the MyClass class. The hasattr(obj, 'my_attribute')  call checks if obj has an attribute named 'my_attribute' , which it does, so it returns True. On the other hand, hasattr(obj, 'nonexistent_attribute')  checks if obj has an attribute named 'nonexistent_attribute' , which it doesn't, so it returns False. You can also use hasattr()  to check if a class has a particular attribute: 1. class MyClass: 2.     my_class_attribute = 42 3. 4. print(hasattr(MyClass, 'my_class_attribute' ))  # Output: True 5. print(hasattr(MyClass, 'nonexistent_class_attribute' ))  # Output: False In this case, hasattr(MyClass, 'my_class_attribute')  checks if the class MyClass has an attribute named 'my_class_attribute' , which it does, so it returns True. Similarly, hasattr(MyClass, 'nonexistent_class_attribute') checks for a nonexistent attribute and returns False. Usinghasattr() can help you handle situations where you want to safely check for the existence of attributes before accessing them, avoiding potential errors or exceptions. Question 4: Skipped",
    "section": "Exceptions"
  },
  {
    "question": "What is the output of the following code?",
    "code": "5.     c = 1\n6.except ZeroDivisionError:\n7.     c = 2\n8.else:\n9.     c = 3\n10.print(c)\n3.         self.my_var = 5\n4.\n5. obj = MyClass()\n6.print(hasattr(obj, 'my_var' ))\n7.print(hasattr(obj, 'non_existent_var' ))\n1.deftag(tg):\n2.     tg2 = tg\n3.     tg2 = tg[0] + '/'+ tg[1:]\n4.\n5.     definner(str):\n6.         return tg + str + tg2\n7.     return inner\n8.\n9.\n10.b_tag = tag( '<b>')\n11.print(b_tag( 'ProCoding' ))\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "What is the output of the following code in Python? 1. matrix = [[1, 2], [3, 4]] 2. result = [num**2 forrow inmatrix fornum inrow] 3.print(result)",
    "section": "Exceptions"
  },
  {
    "question": "",
    "code": "",
    "answers": [],
    "correct_answers": [],
    "explanation": "[1, 2, 3, 4] [2, 4, 6, 8] [[1, 4], [9, 16]] [1, 4, 9, 16] (Correct) ExplanationTry it yourself: 1. matrix = [[1, 2], [3, 4]] 2. result = [num**2 forrow inmatrix fornum inrow] 3.print(result) Explanation: This code uses a nested list comprehension to create a new list containing the squares of all the numbers in the matrixlist. The outer loop iterates over the rows of the matrix, and the inner loop iterates over the numbers in each row. The result is a flattened list of numbers: [1, 2, 3, 4]. Each of these numbers is then squared and added to the new list, resulting in [1, 4, 9, 16]. Question 6: Skipped",
    "section": "Modules and Packages"
  },
  {
    "question": "",
    "code": "1. The value of e is: 2.718281828459045\n1.import random\n2. sports = [ 'judo','tennis' ,'karate' ,'football' ,'basketball' ]\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "What is the output of the following code in Python? 1.try: 2.     if'42'> 42: 3.         raiseCustomError 4.     else: 5.         print('Else') 6.except CustomError: 7.     print('CustomError has occured.' ) 8.else: 9.     print('Oh no' )",
    "section": "Modules and Packages"
  },
  {
    "question": "What is the expected output of the following code snippet?",
    "code": "2.h(g(2)):\n3.g(f(3)):\n1.import math\n2.\n3. x = -4.7\n4.print(-abs(math.floor(x) + math.ceil(x))+ math.trunc(x))\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "What is the output of the following code in Python? 1.classA: 2.     def__init__( self, v=1):3.         self.v=v 4. 5.     def set (self, v): 6.         self.v = v 7.         return v 8. 9. a=A() 10.print(a.set(a.v + 1))",
    "section": "Modules and Packages"
  },
  {
    "question": "What is the expected output of the following code?",
    "code": "1. s = \"This is a test string\"\n2.if\"test\" ins:\n3.     print(s.index( \"t\"))\n4.else:\n5.     print(s.find( \"t\"))\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "1 0 2 (Correct) 3 Explanation Try it yourself: 1.classA: 2.     def__init__( self, v=1): 3.         self.v=v 4. 5.     def set (self, v): 6.         self.v = v 7.         return v 8. 9. a=A() 10.print(a.set(a.v + 1)) Explanation: Whenais created with A(), itsvattribute is set to 1 by default, because vis passed with a default value of 1 in the constructor of class A. a.set(a.v + 1) sets the value of a'svattribute to a.v + 1, which is 2. It then returns this value, which is printed by the print() statement, resulting in the output of 2. Question 12: Skipped",
    "section": "Modules and Packages"
  },
  {
    "question": "What is the output of the following code in Python?",
    "code": "3.\n4. obj = MyClass()\n5.\n6.print(hasattr(obj, '__name__' ))\n7.print(hasattr(obj, '__module__' ))\n8.print(hasattr(obj, '__bases__' ))\n9.print(hasattr(MyClass, '__name__' ))\n1. letters = [ \"a\",\"b\",\"c\"]\n2. result = [letter*2 forletter inletters ifletter!= \"b\"]\n3.print(result)\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "",
    "section": "Miscellaneous"
  },
  {
    "question": "What is the output of the following code?",
    "code": "10.Question 28:\n1.try:\n2.     withopen(\"file.txt\" ,\"r\")asf:\n3.         f.write( \"Hello, world!\" )\n4.except IOError ase:\n5.     print(\"Permission denied\" )\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "What is the output of the following code?1.defcountdown(n): 2.     whilen > 0: 3.         yieldn 4.         n -= 1 5. 6.forx incountdown(3): 7.     print(x,end=\" \")",
    "section": "Miscellaneous"
  },
  {
    "question": "",
    "code": "8.     var_b = 20\n9.     deffun_b(self):\n10.        return 21\n11.\n12.\n13.classSub(A, B):\n14.    pass\n15.\n16.\n17.obj = Sub()\n18.\n19.print(obj.var_a, obj.fun_b())\n1. s1 = \"23catsand6dogs\"\n2.ifs1.isalnum() == True:\n3.     print(s1.count( \"a\"))\n4.else:\n5.     print(\"Not alphanumeric\" )\n",
    "answers": [],
    "correct_answers": [],
    "explanation": "What is the output of the following code? 1.deftag(tg): 2.     tg2 = tg 3.     tg2 = tg[0] + '/'+ tg[1:] 4. 5.     definner(str): 6.         return tg + str + tg2 7.     return inner 8. 9. 10.b_tag = tag( '<b>') 11.print(b_tag( 'ProCoding' ))",
    "section": "Miscellaneous"
  }
]
